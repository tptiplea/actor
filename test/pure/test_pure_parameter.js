// Generated by js_of_ocaml 3.1.0
(function(joo_global_object)
   {"use strict";
    function raw_array_sub(a,i,l)
     {var b=new Array(l);for(var j=0;j < l;j++)b[j] = a[i + j];return b}
    function caml_subarray_to_string(a,i,len)
     {var f=String.fromCharCode;
      if(i == 0 && len <= 4096 && len == a.length)return f.apply(null,a);
      var s="";
      for(;0 < len;i += 1024,len -= 1024)
       s += f.apply(null,raw_array_sub(a,i,Math.min(len,1024)));
      return s}
    function caml_convert_string_to_array(s)
     {if(joo_global_object.Uint8Array)
       var a=new (joo_global_object.Uint8Array)(s.l);
      else
       var a=new Array(s.l);
      var b=s.c,l=b.length,i=0;
      for(;i < l;i++)a[i] = b.charCodeAt(i);
      for(l = s.l;i < l;i++)a[i] = 0;
      s.c = a;
      s.t = 4;
      return a}
    function caml_blit_string(s1,i1,s2,i2,len)
     {if(len == 0)return 0;
      if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length))
       {s2.c
        =
        s1.t == 4
         ?caml_subarray_to_string(s1.c,i1,len)
         :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
        s2.t = s2.c.length == s2.l?0:2}
      else
       if(s2.t == 2 && i2 == s2.c.length)
        {s2.c
         +=
         s1.t == 4
          ?caml_subarray_to_string(s1.c,i1,len)
          :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
         s2.t = s2.c.length == s2.l?0:2}
       else
        {if(s2.t != 4)caml_convert_string_to_array(s2);
         var c1=s1.c,c2=s2.c;
         if(s1.t == 4)
          if(i2 <= i1)
           for(var i=0;i < len;i++)c2[i2 + i] = c1[i1 + i];
          else
           for(var i=len - 1;i >= 0;i--)c2[i2 + i] = c1[i1 + i];
         else
          {var l=Math.min(len,c1.length - i1);
           for(var i=0;i < l;i++)c2[i2 + i] = c1.charCodeAt(i1 + i);
           for(;i < len;i++)c2[i2 + i] = 0}}
      return 0}
    var caml_blit_bytes=caml_blit_string;
    function caml_str_repeat(n,s)
     {if(s.repeat)return s.repeat(n);
      var r="",l=0;
      if(n == 0)return r;
      for(;;)
       {if(n & 1)r += s;
        n >>= 1;
        if(n == 0)return r;
        s += s;
        l++;
        if(l == 9)s.slice(0,1)}}
    function caml_convert_string_to_bytes(s)
     {if(s.t == 2)
       s.c += caml_str_repeat(s.l - s.c.length,"\0");
      else
       s.c = caml_subarray_to_string(s.c,0,s.c.length);
      s.t = 0}
    function caml_bytes_of_string(s)
     {if((s.t & 6) != 0)caml_convert_string_to_bytes(s);return s.c}
    function caml_raise_with_arg(tag,arg){throw [0,tag,arg]}
    function caml_is_ascii(s)
     {if(s.length < 24)
       {for(var i=0;i < s.length;i++)if(s.charCodeAt(i) > 127)return false;
        return true}
      else
       return ! /[^\x00-\x7f]/.test(s)}
    function caml_utf16_of_utf8(s)
     {for(var b="",t="",c,c1,c2,v,i=0,l=s.length;i < l;i++)
       {c1 = s.charCodeAt(i);
        if(c1 < 128)
         {for(var j=i + 1;j < l && (c1 = s.charCodeAt(j)) < 128;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        v = 1;
        if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
         {c = c2 + (c1 << 6);
          if(c1 < 224)
           {v = c - 12416;if(v < 128)v = 1}
          else
           {v = 2;
            if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
             {c = c2 + (c << 6);
              if(c1 < 240)
               {v = c - 925824;if(v < 2048 || v >= 55295 && v < 57344)v = 2}
              else
               {v = 3;
                if
                 (++i
                  <
                  l
                  &&
                  ((c2 = s.charCodeAt(i)) & - 64)
                  ==
                  128
                  &&
                  c1
                  <
                  245)
                 {v = c2 - 63447168 + (c << 6);
                  if(v < 65536 || v > 1114111)v = 3}}}}}
        if(v < 4)
         {i -= v;t += "\ufffd"}
        else
         if(v > 65535)
          t += String.fromCharCode(55232 + (v >> 10),56320 + (v & 1023));
         else
          t += String.fromCharCode(v);
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_to_js_string(s)
     {switch(s.t)
       {case 9:return s.c;
        default:caml_convert_string_to_bytes(s);case 0:
         if(caml_is_ascii(s.c)){s.t = 9;return s.c}s.t = 8;
        case 8:return caml_utf16_of_utf8(s.c)
        }}
    function MlString(tag,contents,length)
     {this.t = tag;this.c = contents;this.l = length}
    MlString.prototype.toString = function(){return caml_to_js_string(this)};
    function caml_new_string(s){return new MlString(0,s,s.length)}
    function caml_raise_with_string(tag,msg)
     {caml_raise_with_arg(tag,caml_new_string(msg))}
    var caml_global_data=[0];
    function caml_invalid_argument(msg)
     {caml_raise_with_string(caml_global_data.Invalid_argument,msg)}
    function caml_string_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_bytes_unsafe_set(s,i,c)
     {c &= 255;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_string_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_bytes_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_bytes_unsafe_set(s,i,c)}
    function raw_array_append_one(a,x)
     {var l=a.length,b=new Array(l + 1),i=0;
      for(;i < l;i++)b[i] = a[i];
      b[i] = x;
      return b}
    function caml_call_gen(f,args)
     {if(f.fun)return caml_call_gen(f.fun,args);
      var n=f.length,argsLen=args.length,d=n - argsLen;
      if(d == 0)
       return f.apply(null,args);
      else
       if(d < 0)
        return caml_call_gen
                (f.apply(null,raw_array_sub(args,0,n)),
                 raw_array_sub(args,n,argsLen - n));
       else
        return function(x)
         {return caml_call_gen(f,raw_array_append_one(args,x))}}
    function caml_array_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_check_bound(array,index)
     {if(index >>> 0 >= array.length - 1)caml_array_bound_error();
      return array}
    function caml_classify_float(x)
     {if(isFinite(x))
       {if(Math.abs(x) >= 2.22507385850720138e-308)return 0;
        if(x != 0)return 1;
        return 2}
      return isNaN(x)?4:3}
    function caml_int64_compare(x,y)
     {var x3=x[3] << 16,y3=y[3] << 16;
      if(x3 > y3)return 1;
      if(x3 < y3)return - 1;
      if(x[2] > y[2])return 1;
      if(x[2] < y[2])return - 1;
      if(x[1] > y[1])return 1;
      if(x[1] < y[1])return - 1;
      return 0}
    function caml_int_compare(a,b)
     {if(a < b)return - 1;if(a == b)return 0;return 1}
    function caml_string_compare(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?- 1:s1.c > s2.c?1:0}
    function caml_compare_val(a,b,total)
     {var stack=[];
      for(;;)
       {if(! (total && a === b))
         if(a instanceof MlString)
          if(b instanceof MlString)
           {if(a !== b){var x=caml_string_compare(a,b);if(x != 0)return x}}
          else
           return 1;
         else
          if(a instanceof Array && a[0] === (a[0] | 0))
           {var ta=a[0];
            if(ta === 254)ta = 0;
            if(ta === 250)
             {a = a[1];continue}
            else
             if(b instanceof Array && b[0] === (b[0] | 0))
              {var tb=b[0];
               if(tb === 254)tb = 0;
               if(tb === 250)
                {b = b[1];continue}
               else
                if(ta != tb)
                 return ta < tb?- 1:1;
                else
                 switch(ta)
                  {case 248:
                    var x=caml_int_compare(a[2],b[2]);if(x != 0)return x;break;
                   case 251:caml_invalid_argument("equal: abstract value");
                   case 255:
                    var x=caml_int64_compare(a,b);if(x != 0)return x;break;
                   default:
                    if(a.length != b.length)return a.length < b.length?- 1:1;
                    if(a.length > 1)stack.push(a,b,1)}}
             else
              return 1}
          else
           if
            (b instanceof MlString
             ||
             b instanceof Array
             &&
             b[0]
             ===
             (b[0] | 0))
            return - 1;
           else
            if(typeof a != "number" && a && a.compare)
             return a.compare(b,total);
            else
             if(typeof a == "function")
              caml_invalid_argument("compare: functional value");
             else
              {if(a < b)return - 1;
               if(a > b)return 1;
               if(a != b)
                {if(! total)return NaN;
                 if(a == a)return 1;
                 if(b == b)return - 1}}
        if(stack.length == 0)return 0;
        var i=stack.pop();
        b = stack.pop();
        a = stack.pop();
        if(i + 1 < a.length)stack.push(a,b,i + 1);
        a = a[i];
        b = b[i]}}
    function caml_compare(a,b){return caml_compare_val(a,b,true)}
    function caml_convert_raw_backtrace(){return [0]}
    function caml_create_bytes(len)
     {if(len < 0)caml_invalid_argument("Bytes.create");
      return new MlString(len?2:9,"",len)}
    function caml_fill_string(s,i,l,c)
     {if(l > 0)
       if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
        if(c == 0)
         {s.c = "";s.t = 2}
        else
         {s.c = caml_str_repeat(l,String.fromCharCode(c));s.t = l == s.l?0:2}
       else
        {if(s.t != 4)caml_convert_string_to_array(s);
         for(l += i;i < l;i++)s.c[i] = c}
      return 0}
    var caml_fill_bytes=caml_fill_string;
    function caml_parse_format(fmt)
     {fmt = caml_bytes_of_string(fmt);
      var len=fmt.length;
      if(len > 31)caml_invalid_argument("format_int: format too long");
      var
       f=
        {justify:"+",
         signstyle:"-",
         filler:" ",
         alternate:false,
         base:0,
         signedconv:false,
         width:0,
         uppercase:false,
         sign:1,
         prec:- 1,
         conv:"f"};
      for(var i=0;i < len;i++)
       {var c=fmt.charAt(i);
        switch(c)
         {case "-":f.justify = "-";break;
          case "+":
          case " ":f.signstyle = c;break;
          case "0":f.filler = "0";break;
          case "#":f.alternate = true;break;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
           f.width = 0;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.width = f.width * 10 + c;i++}
           i--;
           break;
          case ".":
           f.prec = 0;
           i++;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.prec = f.prec * 10 + c;i++}
           i--;
          case "d":
          case "i":f.signedconv = true;
          case "u":f.base = 10;break;
          case "x":f.base = 16;break;
          case "X":f.base = 16;f.uppercase = true;break;
          case "o":f.base = 8;break;
          case "e":
          case "f":
          case "g":f.signedconv = true;f.conv = c;break;
          case "E":
          case "F":
          case "G":
           f.signedconv = true;
           f.uppercase = true;
           f.conv = c.toLowerCase();
           break
          }}
      return f}
    function caml_finish_formatting(f,rawbuffer)
     {if(f.uppercase)rawbuffer = rawbuffer.toUpperCase();
      var len=rawbuffer.length;
      if(f.signedconv && (f.sign < 0 || f.signstyle != "-"))len++;
      if(f.alternate){if(f.base == 8)len += 1;if(f.base == 16)len += 2}
      var buffer="";
      if(f.justify == "+" && f.filler == " ")
       for(var i=len;i < f.width;i++)buffer += " ";
      if(f.signedconv)
       if(f.sign < 0)
        buffer += "-";
       else
        if(f.signstyle != "-")buffer += f.signstyle;
      if(f.alternate && f.base == 8)buffer += "0";
      if(f.alternate && f.base == 16)buffer += "0x";
      if(f.justify == "+" && f.filler == "0")
       for(var i=len;i < f.width;i++)buffer += "0";
      buffer += rawbuffer;
      if(f.justify == "-")for(var i=len;i < f.width;i++)buffer += " ";
      return caml_new_string(buffer)}
    function caml_format_float(fmt,x)
     {var s,f=caml_parse_format(fmt),prec=f.prec < 0?6:f.prec;
      if(x < 0 || x == 0 && 1 / x == - Infinity){f.sign = - 1;x = - x}
      if(isNaN(x))
       {s = "nan";f.filler = " "}
      else
       if(! isFinite(x))
        {s = "inf";f.filler = " "}
       else
        switch(f.conv)
         {case "e":
           var s=x.toExponential(prec),i=s.length;
           if(s.charAt(i - 3) == "e")
            s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
           break;
          case "f":s = x.toFixed(prec);break;
          case "g":
           prec = prec?prec:1;
           s = x.toExponential(prec - 1);
           var j=s.indexOf("e"),exp=+ s.slice(j + 1);
           if(exp < - 4 || x >= 1e+21 || x.toFixed(0).length > prec)
            {var i=j - 1;
             while(s.charAt(i) == "0")i--;
             if(s.charAt(i) == ".")i--;
             s = s.slice(0,i + 1) + s.slice(j);
             i = s.length;
             if(s.charAt(i - 3) == "e")
              s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
             break}
           else
            {var p=prec;
             if(exp < 0)
              {p -= exp + 1;s = x.toFixed(p)}
             else
              while(s = x.toFixed(p),s.length > prec + 1)p--;
             if(p)
              {var i=s.length - 1;
               while(s.charAt(i) == "0")i--;
               if(s.charAt(i) == ".")i--;
               s = s.slice(0,i + 1)}}
           break
          }
      return caml_finish_formatting(f,s)}
    function caml_format_int(fmt,i)
     {if(caml_bytes_of_string(fmt) == "%d")return caml_new_string("" + i);
      var f=caml_parse_format(fmt);
      if(i < 0)if(f.signedconv){f.sign = - 1;i = - i}else i >>>= 0;
      var s=i.toString(f.base);
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - s.length;
        if(n > 0)s = caml_str_repeat(n,"0") + s}
      return caml_finish_formatting(f,s)}
    var caml_oo_last_id=0;
    function caml_fresh_oo_id(){return caml_oo_last_id++}
    function caml_get_exception_raw_backtrace(){return [0]}
    function caml_greaterequal(x,y)
     {return + (caml_compare_val(x,y,false) >= 0)}
    if(! Math.imul)
     Math.imul
     =
     function(x,y){y |= 0;return ((x >> 16) * y << 16) + (x & 65535) * y | 0};
    var caml_mul=Math.imul;
    function caml_hash_mix_int(h,d)
     {d = caml_mul(d,3432918353 | 0);
      d = d << 15 | d >>> 32 - 15;
      d = caml_mul(d,461845907);
      h ^= d;
      h = h << 13 | h >>> 32 - 13;
      return (h + (h << 2) | 0) + (3864292196 | 0) | 0}
    function caml_hash_mix_int64(h,v)
     {var lo=v[1] | v[2] << 24,hi=v[2] >>> 8 | v[3] << 16;
      h = caml_hash_mix_int(h,hi ^ lo);
      return h}
    var log2_ok=Math.log2 && Math.log2(1.12355820928894744e+307) == 1020;
    function jsoo_floor_log2(x)
     {if(log2_ok)return Math.floor(Math.log2(x));
      var i=0;
      if(x == 0)return - Infinity;
      if(x >= 1)while(x >= 2){x /= 2;i++}else while(x < 1){x *= 2;i--}
      return i}
    function caml_int64_bits_of_float(x)
     {if(! isFinite(x))
       {if(isNaN(x))return [255,1,0,32752];
        return x > 0?[255,0,0,32752]:[255,0,0,65520]}
      var sign=x == 0 && 1 / x == - Infinity?32768:x >= 0?0:32768;
      if(sign)x = - x;
      var exp=jsoo_floor_log2(x) + 1023;
      if(exp <= 0)
       {exp = 0;x /= Math.pow(2,- 1026)}
      else
       {x /= Math.pow(2,exp - 1027);
        if(x < 16){x *= 2;exp -= 1}
        if(exp == 0)x /= 2}
      var k=Math.pow(2,24),r3=x | 0;
      x = (x - r3) * k;
      var r2=x | 0;
      x = (x - r2) * k;
      var r1=x | 0;
      r3 = r3 & 15 | sign | exp << 4;
      return [255,r1,r2,r3]}
    function caml_hash_mix_float(h,v0)
     {var
       v=caml_int64_bits_of_float(v0),
       lo=v[1] | v[2] << 24,
       hi=v[2] >>> 8 | v[3] << 16;
      h = caml_hash_mix_int(h,lo);
      h = caml_hash_mix_int(h,hi);
      return h}
    function caml_hash_mix_string_arr(h,s)
     {var len=s.length,i,w;
      for(i = 0;i + 4 <= len;i += 4)
       {w = s[i] | s[i + 1] << 8 | s[i + 2] << 16 | s[i + 3] << 24;
        h = caml_hash_mix_int(h,w)}
      w = 0;
      switch(len & 3)
       {case 3:w = s[i + 2] << 16;
        case 2:w |= s[i + 1] << 8;
        case 1:w |= s[i];h = caml_hash_mix_int(h,w)
        }
      h ^= len;
      return h}
    function caml_hash_mix_string_str(h,s)
     {var len=s.length,i,w;
      for(i = 0;i + 4 <= len;i += 4)
       {w
        =
        s.charCodeAt(i)
        |
        s.charCodeAt(i + 1)
        <<
        8
        |
        s.charCodeAt(i + 2)
        <<
        16
        |
        s.charCodeAt(i + 3)
        <<
        24;
        h = caml_hash_mix_int(h,w)}
      w = 0;
      switch(len & 3)
       {case 3:w = s.charCodeAt(i + 2) << 16;
        case 2:w |= s.charCodeAt(i + 1) << 8;
        case 1:w |= s.charCodeAt(i);h = caml_hash_mix_int(h,w)
        }
      h ^= len;
      return h}
    function caml_hash_mix_string(h,v)
     {switch(v.t & 6)
       {default:caml_convert_string_to_bytes(v);case 0:
         h = caml_hash_mix_string_str(h,v.c);break;
        case 2:h = caml_hash_mix_string_arr(h,v.c)
        }
      return h}
    function caml_hash_mix_final(h)
     {h ^= h >>> 16;
      h = caml_mul(h,2246822507 | 0);
      h ^= h >>> 13;
      h = caml_mul(h,3266489909 | 0);
      h ^= h >>> 16;
      return h}
    var HASH_QUEUE_SIZE=256;
    function caml_hash(count,limit,seed,obj)
     {var queue,rd,wr,sz,num,h,v,i,len;
      sz = limit;
      if(sz < 0 || sz > HASH_QUEUE_SIZE)sz = HASH_QUEUE_SIZE;
      num = count;
      h = seed;
      queue = [obj];
      rd = 0;
      wr = 1;
      while(rd < wr && num > 0)
       {v = queue[rd++];
        if(v instanceof Array && v[0] === (v[0] | 0))
         switch(v[0])
          {case 248:h = caml_hash_mix_int(h,v[2]);num--;break;
           case 250:queue[--rd] = v[1];break;
           case 255:h = caml_hash_mix_int64(h,v);num--;break;
           default:
            var tag=v.length - 1 << 10 | v[0];
            h = caml_hash_mix_int(h,tag);
            for(i = 1,len = v.length;i < len;i++)
             {if(wr >= sz)break;queue[wr++] = v[i]}
            break}
        else
         if(v instanceof MlString)
          {h = caml_hash_mix_string(h,v);num--}
         else
          if(v === (v | 0))
           {h = caml_hash_mix_int(h,v + v + 1);num--}
          else
           if(v === + v)
            {h = caml_hash_mix_float(h,v);num--}
           else
            if(v && v.hash)h = caml_hash_mix_int(h,v.hash())}
      h = caml_hash_mix_final(h);
      return h & 1073741823}
    function caml_int64_to_bytes(x)
     {return [x[3] >> 8,
              x[3] & 255,
              x[2] >> 16,
              x[2] >> 8 & 255,
              x[2] & 255,
              x[1] >> 16,
              x[1] >> 8 & 255,
              x[1] & 255]}
    function caml_hash_univ_param(count,limit,obj)
     {var hash_accu=0;
      function hash_aux(obj)
       {limit--;
        if(count < 0 || limit < 0)return;
        if(obj instanceof Array && obj[0] === (obj[0] | 0))
         switch(obj[0])
          {case 248:count--;hash_accu = hash_accu * 65599 + obj[2] | 0;break;
           case 250:limit++;hash_aux(obj);break;
           case 255:
            count--;
            hash_accu = hash_accu * 65599 + obj[1] + (obj[2] << 24) | 0;
            break;
           default:
            count--;
            hash_accu = hash_accu * 19 + obj[0] | 0;
            for(var i=obj.length - 1;i > 0;i--)hash_aux(obj[i])}
        else
         if(obj instanceof MlString)
          {count--;
           switch(obj.t & 6)
            {default:caml_convert_string_to_bytes(obj);case 0:
              for(var b=obj.c,l=obj.l,i=0;i < l;i++)
               hash_accu = hash_accu * 19 + b.charCodeAt(i) | 0;
              break;
             case 2:
              for(var a=obj.c,l=obj.l,i=0;i < l;i++)
               hash_accu = hash_accu * 19 + a[i] | 0
             }}
         else
          if(obj === (obj | 0))
           {count--;hash_accu = hash_accu * 65599 + obj | 0}
          else
           if(obj === + obj)
            {count--;
             var p=caml_int64_to_bytes(caml_int64_bits_of_float(obj));
             for(var i=7;i >= 0;i--)hash_accu = hash_accu * 19 + p[i] | 0}
           else
            if(obj && obj.hash)hash_accu = hash_accu * 65599 + obj.hash() | 0}
      hash_aux(obj);
      return hash_accu & 1073741823}
    function caml_utf8_of_utf16(s)
     {for(var b="",t=b,c,d,i=0,l=s.length;i < l;i++)
       {c = s.charCodeAt(i);
        if(c < 128)
         {for(var j=i + 1;j < l && (c = s.charCodeAt(j)) < 128;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        if(c < 2048)
         {t += String.fromCharCode(192 | c >> 6);
          t += String.fromCharCode(128 | c & 63)}
        else
         if(c < 55296 || c >= 57343)
          t
          +=
          String.fromCharCode(224 | c >> 12,128 | c >> 6 & 63,128 | c & 63);
         else
          if
           (c
            >=
            56319
            ||
            i
            +
            1
            ==
            l
            ||
            (d = s.charCodeAt(i + 1))
            <
            56320
            ||
            d
            >
            57343)
           t += "\xef\xbf\xbd";
          else
           {i++;
            c = (c << 10) + d - 56613888;
            t
            +=
            String.fromCharCode
             (240 | c >> 18,128 | c >> 12 & 63,128 | c >> 6 & 63,128 | c & 63)}
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_js_to_string(s)
     {var tag=9;
      if(! caml_is_ascii(s))tag = 8,s = caml_utf8_of_utf16(s);
      return new MlString(tag,s,s.length)}
    function caml_hexstring_of_float(x,prec,style)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_js_to_string("nan");
        return caml_js_to_string(x > 0?"infinity":"-infinity")}
      var sign=x == 0 && 1 / x == - Infinity?1:x >= 0?0:1;
      if(sign)x = - x;
      var exp=0;
      if(x == 0)
       ;
      else
       if(x < 1)
        while(x < 1 && exp > - 1022){x *= 2;exp--}
       else
        while(x >= 2){x /= 2;exp++}
      var exp_sign=exp < 0?"":"+",sign_str="";
      if(sign)
       sign_str = "-";
      else
       switch(style)
        {case 43:sign_str = "+";break;
         case 32:sign_str = " ";break;
         default:break}
      if(prec >= 0 && prec < 13)
       {var cst=Math.pow(2,prec * 4);x = Math.round(x * cst) / cst}
      var x_str=x.toString(16);
      if(prec >= 0)
       {var idx=x_str.indexOf(".");
        if(idx < 0)
         x_str += "." + caml_str_repeat(prec,"0");
        else
         {var size=idx + 1 + prec;
          if(x_str.length < size)
           x_str += caml_str_repeat(size - x_str.length,"0");
          else
           x_str = x_str.substr(0,size)}}
      return caml_js_to_string
              (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10))}
    function caml_int64_is_zero(x){return (x[3] | x[2] | x[1]) == 0}
    function caml_int64_of_int32(x)
     {return [255,x & 16777215,x >> 24 & 16777215,x >> 31 & 65535]}
    function caml_obj_dup(x)
     {var l=x.length,a=new Array(l);
      for(var i=0;i < l;i++)a[i] = x[i];
      return a}
    function caml_int64_sub(x,y)
     {var
       z1=x[1] - y[1],
       z2=x[2] - y[2] + (z1 >> 24),
       z3=x[3] - y[3] + (z2 >> 24);
      return [255,z1 & 16777215,z2 & 16777215,z3 & 65535]}
    function caml_int64_ucompare(x,y)
     {if(x[3] > y[3])return 1;
      if(x[3] < y[3])return - 1;
      if(x[2] > y[2])return 1;
      if(x[2] < y[2])return - 1;
      if(x[1] > y[1])return 1;
      if(x[1] < y[1])return - 1;
      return 0}
    function caml_int64_lsl1(x)
     {x[3] = x[3] << 1 | x[2] >> 23;
      x[2] = (x[2] << 1 | x[1] >> 23) & 16777215;
      x[1] = x[1] << 1 & 16777215}
    function caml_int64_lsr1(x)
     {x[1] = (x[1] >>> 1 | x[2] << 23) & 16777215;
      x[2] = (x[2] >>> 1 | x[3] << 23) & 16777215;
      x[3] = x[3] >>> 1}
    function caml_int64_udivmod(x,y)
     {var
       offset=0,
       modulus=caml_obj_dup(x),
       divisor=caml_obj_dup(y),
       quotient=[255,0,0,0];
      while(caml_int64_ucompare(modulus,divisor) > 0)
       {offset++;caml_int64_lsl1(divisor)}
      while(offset >= 0)
       {offset--;
        caml_int64_lsl1(quotient);
        if(caml_int64_ucompare(modulus,divisor) >= 0)
         {quotient[1]++;modulus = caml_int64_sub(modulus,divisor)}
        caml_int64_lsr1(divisor)}
      return [0,quotient,modulus]}
    function caml_int64_to_int32(x){return x[1] | x[2] << 24}
    function caml_int64_is_negative(x){return x[3] << 16 < 0}
    function caml_int64_neg(x)
     {var y1=- x[1],y2=- x[2] + (y1 >> 24),y3=- x[3] + (y2 >> 24);
      return [255,y1 & 16777215,y2 & 16777215,y3 & 65535]}
    function caml_int64_format(fmt,x)
     {var f=caml_parse_format(fmt);
      if(f.signedconv && caml_int64_is_negative(x))
       {f.sign = - 1;x = caml_int64_neg(x)}
      var
       buffer="",
       wbase=caml_int64_of_int32(f.base),
       cvtbl="0123456789abcdef";
      do
       {var p=caml_int64_udivmod(x,wbase);
        x = p[1];
        buffer = cvtbl.charAt(caml_int64_to_int32(p[2])) + buffer}
      while
       (! caml_int64_is_zero(x));
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - buffer.length;
        if(n > 0)buffer = caml_str_repeat(n,"0") + buffer}
      return caml_finish_formatting(f,buffer)}
    function caml_js_from_string(s){return s.toString()}
    function caml_js_get_console()
     {var
       c=joo_global_object.console?joo_global_object.console:{},
       m=
        ["log",
         "debug",
         "info",
         "warn",
         "error",
         "assert",
         "dir",
         "dirxml",
         "trace",
         "group",
         "groupCollapsed",
         "groupEnd",
         "time",
         "timeEnd"];
      function f(){}
      for(var i=0;i < m.length;i++)if(! c[m[i]])c[m[i]] = f;
      return c}
    function raw_array_cons(a,x)
     {var l=a.length,b=new Array(l + 1);
      b[0] = x;
      for(var i=1;i <= l;i++)b[i] = a[i - 1];
      return b}
    function caml_js_to_array(a){return raw_array_cons(a,0)}
    function caml_js_to_byte_string(s){return caml_new_string(s)}
    function caml_js_wrap_callback(f)
     {return function()
       {return arguments.length > 0
                ?caml_call_gen(f,arguments)
                :caml_call_gen(f,[undefined])}}
    function caml_js_wrap_meth_callback(f)
     {return function()
       {return caml_call_gen(f,raw_array_cons(arguments,this))}}
    var JSON=joo_global_object.JSON;
    if(typeof JSON !== "object")JSON = {};
    (function()
       {"use strict";
        var
         rx_one=/^[\],:{}\s]*$/,
         rx_two=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,
         rx_three=
          /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
         rx_four=/(?:^|:|,)(?:\s*\[)+/g,
         rx_escapable=
          /[\\\"\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
         rx_dangerous=
          /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
        function f(n){return n < 10?"0" + n:n}
        function this_value(){return this.valueOf()}
        if(typeof Date.prototype.toJSON !== "function")
         {Date.prototype.toJSON
          =
          function()
           {return isFinite(this.valueOf())
                    ?this.getUTCFullYear()
                     +
                     "-"
                     +
                     f(this.getUTCMonth() + 1)
                     +
                     "-"
                     +
                     f(this.getUTCDate())
                     +
                     "T"
                     +
                     f(this.getUTCHours())
                     +
                     ":"
                     +
                     f(this.getUTCMinutes())
                     +
                     ":"
                     +
                     f(this.getUTCSeconds())
                     +
                     "Z"
                    :null};
          Boolean.prototype.toJSON = this_value;
          Number.prototype.toJSON = this_value;
          String.prototype.toJSON = this_value}
        var gap,indent,meta,rep;
        function quote(string)
         {rx_escapable.lastIndex = 0;
          return rx_escapable.test(string)
                  ?'"'
                   +
                   string.replace
                    (rx_escapable,
                     function(a)
                      {var c=meta[a];
                       return typeof c === "string"
                               ?c
                               :"\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(- 4)})
                   +
                   '"'
                  :'"' + string + '"'}
        function str(key,holder)
         {var i,k,v,length,mind=gap,partial,value=holder[key];
          if
           (value
            &&
            typeof value
            ===
            "object"
            &&
            typeof value.toJSON
            ===
            "function")
           value = value.toJSON(key);
          if(typeof rep === "function")value = rep.call(holder,key,value);
          switch(typeof value)
           {case "string":return quote(value);
            case "number":return isFinite(value)?String(value):"null";
            case "boolean":
            case "null":return String(value);
            case "object":
             if(! value)return "null";
             gap += indent;
             partial = [];
             if(Object.prototype.toString.apply(value) === "[object Array]")
              {length = value.length;
               for(i = 0;i < length;i += 1)
                partial[i] = str(i,value) || "null";
               v
               =
               partial.length === 0
                ?"[]"
                :gap
                  ?"[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]"
                  :"[" + partial.join(",") + "]";
               gap = mind;
               return v}
             if(rep && typeof rep === "object")
              {length = rep.length;
               for(i = 0;i < length;i += 1)
                if(typeof rep[i] === "string")
                 {k = rep[i];
                  v = str(k,value);
                  if(v)partial.push(quote(k) + (gap?": ":":") + v)}}
             else
              for(k in value)
               if(Object.prototype.hasOwnProperty.call(value,k))
                {v = str(k,value);
                 if(v)partial.push(quote(k) + (gap?": ":":") + v)}
             v
             =
             partial.length === 0
              ?"{}"
              :gap
                ?"{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}"
                :"{" + partial.join(",") + "}";
             gap = mind;
             return v
            }}
        if(typeof JSON.stringify !== "function")
         {meta
          =
          {"\b":"\\b",
           "\t":"\\t",
           "\n":"\\n",
           "\f":"\\f",
           "\r":"\\r",
           '"':'\\"',
           "\\":"\\\\"};
          JSON.stringify
          =
          function(value,replacer,space)
           {var i;
            gap = "";
            indent = "";
            if(typeof space === "number")
             for(i = 0;i < space;i += 1)indent += " ";
            else
             if(typeof space === "string")indent = space;
            rep = replacer;
            if
             (replacer
              &&
              typeof replacer
              !==
              "function"
              &&
              (typeof replacer
               !==
               "object"
               ||
               typeof replacer.length
               !==
               "number"))
             throw new Error("JSON.stringify");
            return str("",{"":value})}}
        if(typeof JSON.parse !== "function")
         JSON.parse
         =
         function(text,reviver)
          {var j;
           function walk(holder,key)
            {var k,v,value=holder[key];
             if(value && typeof value === "object")
              for(k in value)
               if(Object.prototype.hasOwnProperty.call(value,k))
                {v = walk(value,k);
                 if(v !== undefined)value[k] = v;else delete value[k]}
             return reviver.call(holder,key,value)}
           text = String(text);
           rx_dangerous.lastIndex = 0;
           if(rx_dangerous.test(text))
            text
            =
            text.replace
             (rx_dangerous,
              function(a)
               {return "\\u"
                       +
                       ("0000" + a.charCodeAt(0).toString(16)).slice(- 4)});
           if
            (rx_one.test
              (text.replace(rx_two,"@").replace(rx_three,"]").replace
                (rx_four,"")))
            {j = eval("(" + text + ")");
             return typeof reviver === "function"?walk({"":j},""):j}
           throw new SyntaxError("JSON.parse")}}
      ());
    function caml_json(){return JSON}
    function caml_make_vect(len,init)
     {var len=len + 1 | 0,b=new Array(len);
      b[0] = 0;
      for(var i=1;i < len;i++)b[i] = init;
      return b}
    function caml_string_of_array(a){return new MlString(4,a,a.length)}
    var
     caml_md5_string=
      function()
        {function add(x,y){return x + y | 0}
         function xx(q,a,b,x,s,t)
          {a = add(add(a,q),add(x,t));return add(a << s | a >>> 32 - s,b)}
         function ff(a,b,c,d,x,s,t){return xx(b & c | ~ b & d,a,b,x,s,t)}
         function gg(a,b,c,d,x,s,t){return xx(b & d | c & ~ d,a,b,x,s,t)}
         function hh(a,b,c,d,x,s,t){return xx(b ^ c ^ d,a,b,x,s,t)}
         function ii(a,b,c,d,x,s,t){return xx(c ^ (b | ~ d),a,b,x,s,t)}
         function md5(buffer,length)
          {var i=length;
           buffer[i >> 2] |= 128 << 8 * (i & 3);
           for(i = (i & ~ 3) + 8;(i & 63) < 60;i += 4)
            buffer[(i >> 2) - 1] = 0;
           buffer[(i >> 2) - 1] = length << 3;
           buffer[i >> 2] = length >> 29 & 536870911;
           var w=[1732584193,4023233417,2562383102,271733878];
           for(i = 0;i < buffer.length;i += 16)
            {var a=w[0],b=w[1],c=w[2],d=w[3];
             a = ff(a,b,c,d,buffer[i + 0],7,3614090360);
             d = ff(d,a,b,c,buffer[i + 1],12,3905402710);
             c = ff(c,d,a,b,buffer[i + 2],17,606105819);
             b = ff(b,c,d,a,buffer[i + 3],22,3250441966);
             a = ff(a,b,c,d,buffer[i + 4],7,4118548399);
             d = ff(d,a,b,c,buffer[i + 5],12,1200080426);
             c = ff(c,d,a,b,buffer[i + 6],17,2821735955);
             b = ff(b,c,d,a,buffer[i + 7],22,4249261313);
             a = ff(a,b,c,d,buffer[i + 8],7,1770035416);
             d = ff(d,a,b,c,buffer[i + 9],12,2336552879);
             c = ff(c,d,a,b,buffer[i + 10],17,4294925233);
             b = ff(b,c,d,a,buffer[i + 11],22,2304563134);
             a = ff(a,b,c,d,buffer[i + 12],7,1804603682);
             d = ff(d,a,b,c,buffer[i + 13],12,4254626195);
             c = ff(c,d,a,b,buffer[i + 14],17,2792965006);
             b = ff(b,c,d,a,buffer[i + 15],22,1236535329);
             a = gg(a,b,c,d,buffer[i + 1],5,4129170786);
             d = gg(d,a,b,c,buffer[i + 6],9,3225465664);
             c = gg(c,d,a,b,buffer[i + 11],14,643717713);
             b = gg(b,c,d,a,buffer[i + 0],20,3921069994);
             a = gg(a,b,c,d,buffer[i + 5],5,3593408605);
             d = gg(d,a,b,c,buffer[i + 10],9,38016083);
             c = gg(c,d,a,b,buffer[i + 15],14,3634488961);
             b = gg(b,c,d,a,buffer[i + 4],20,3889429448);
             a = gg(a,b,c,d,buffer[i + 9],5,568446438);
             d = gg(d,a,b,c,buffer[i + 14],9,3275163606);
             c = gg(c,d,a,b,buffer[i + 3],14,4107603335);
             b = gg(b,c,d,a,buffer[i + 8],20,1163531501);
             a = gg(a,b,c,d,buffer[i + 13],5,2850285829);
             d = gg(d,a,b,c,buffer[i + 2],9,4243563512);
             c = gg(c,d,a,b,buffer[i + 7],14,1735328473);
             b = gg(b,c,d,a,buffer[i + 12],20,2368359562);
             a = hh(a,b,c,d,buffer[i + 5],4,4294588738);
             d = hh(d,a,b,c,buffer[i + 8],11,2272392833);
             c = hh(c,d,a,b,buffer[i + 11],16,1839030562);
             b = hh(b,c,d,a,buffer[i + 14],23,4259657740);
             a = hh(a,b,c,d,buffer[i + 1],4,2763975236);
             d = hh(d,a,b,c,buffer[i + 4],11,1272893353);
             c = hh(c,d,a,b,buffer[i + 7],16,4139469664);
             b = hh(b,c,d,a,buffer[i + 10],23,3200236656);
             a = hh(a,b,c,d,buffer[i + 13],4,681279174);
             d = hh(d,a,b,c,buffer[i + 0],11,3936430074);
             c = hh(c,d,a,b,buffer[i + 3],16,3572445317);
             b = hh(b,c,d,a,buffer[i + 6],23,76029189);
             a = hh(a,b,c,d,buffer[i + 9],4,3654602809);
             d = hh(d,a,b,c,buffer[i + 12],11,3873151461);
             c = hh(c,d,a,b,buffer[i + 15],16,530742520);
             b = hh(b,c,d,a,buffer[i + 2],23,3299628645);
             a = ii(a,b,c,d,buffer[i + 0],6,4096336452);
             d = ii(d,a,b,c,buffer[i + 7],10,1126891415);
             c = ii(c,d,a,b,buffer[i + 14],15,2878612391);
             b = ii(b,c,d,a,buffer[i + 5],21,4237533241);
             a = ii(a,b,c,d,buffer[i + 12],6,1700485571);
             d = ii(d,a,b,c,buffer[i + 3],10,2399980690);
             c = ii(c,d,a,b,buffer[i + 10],15,4293915773);
             b = ii(b,c,d,a,buffer[i + 1],21,2240044497);
             a = ii(a,b,c,d,buffer[i + 8],6,1873313359);
             d = ii(d,a,b,c,buffer[i + 15],10,4264355552);
             c = ii(c,d,a,b,buffer[i + 6],15,2734768916);
             b = ii(b,c,d,a,buffer[i + 13],21,1309151649);
             a = ii(a,b,c,d,buffer[i + 4],6,4149444226);
             d = ii(d,a,b,c,buffer[i + 11],10,3174756917);
             c = ii(c,d,a,b,buffer[i + 2],15,718787259);
             b = ii(b,c,d,a,buffer[i + 9],21,3951481745);
             w[0] = add(a,w[0]);
             w[1] = add(b,w[1]);
             w[2] = add(c,w[2]);
             w[3] = add(d,w[3])}
           var t=new Array(16);
           for(var i=0;i < 4;i++)
            for(var j=0;j < 4;j++)t[i * 4 + j] = w[i] >> 8 * j & 255;
           return t}
         return function(s,ofs,len)
          {var buf=[];
           switch(s.t & 6)
            {default:caml_convert_string_to_bytes(s);case 0:
              var b=s.c;
              for(var i=0;i < len;i += 4)
               {var j=i + ofs;
                buf[i >> 2]
                =
                b.charCodeAt(j)
                |
                b.charCodeAt(j + 1)
                <<
                8
                |
                b.charCodeAt(j + 2)
                <<
                16
                |
                b.charCodeAt(j + 3)
                <<
                24}
              for(;i < len;i++)
               buf[i >> 2] |= b.charCodeAt(i + ofs) << 8 * (i & 3);
              break;
             case 4:
              var a=s.c;
              for(var i=0;i < len;i += 4)
               {var j=i + ofs;
                buf[i >> 2]
                =
                a[j]
                |
                a[j + 1]
                <<
                8
                |
                a[j + 2]
                <<
                16
                |
                a[j + 3]
                <<
                24}
              for(;i < len;i++)buf[i >> 2] |= a[i + ofs] << 8 * (i & 3)
             }
           return caml_string_of_array(md5(buf,len))}}
       ();
    function caml_ml_bytes_length(s){return s.l}
    function caml_raise_sys_error(msg)
     {caml_raise_with_string(caml_global_data.Sys_error,msg)}
    var caml_ml_channels=new Array();
    function caml_ml_flush(chanid)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)caml_raise_sys_error("Cannot flush a closed channel");
      if(! chan.buffer || chan.buffer == "")return 0;
      if
       (chan.fd
        &&
        caml_global_data.fds[chan.fd]
        &&
        caml_global_data.fds[chan.fd].output)
       {var output=caml_global_data.fds[chan.fd].output;
        switch(output.length)
         {case 2:output(chanid,chan.buffer);break;default:output(chan.buffer)}}
      chan.buffer = "";
      return 0}
    if(joo_global_object.process && joo_global_object.process.cwd)
     var caml_current_dir=joo_global_object.process.cwd().replace(/\\/g,"/");
    else
     var caml_current_dir="/static";
    if(caml_current_dir.slice(- 1) !== "/")caml_current_dir += "/";
    function caml_make_path(name)
     {name = name instanceof MlString?name.toString():name;
      if(name.charCodeAt(0) != 47)name = caml_current_dir + name;
      var comp=name.split("/"),ncomp=[];
      for(var i=0;i < comp.length;i++)
       switch(comp[i])
        {case "..":if(ncomp.length > 1)ncomp.pop();break;
         case ".":break;
         case "":if(ncomp.length == 0)ncomp.push("");break;
         default:ncomp.push(comp[i]);break}
      ncomp.orig = name;
      return ncomp}
    function caml_raise_no_such_file(name)
     {name = name instanceof MlString?name.toString():name;
      caml_raise_sys_error(name + ": No such file or directory")}
    function caml_string_unsafe_get(s,i)
     {switch(s.t & 6)
       {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
        case 4:return s.c[i]
        }}
    function caml_string_get(s,i)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_string_unsafe_get(s,i)}
    function caml_create_string(len)
     {if(len < 0)caml_invalid_argument("String.create");
      return new MlString(len?2:9,"",len)}
    function caml_ml_string_length(s){return s.l}
    function MlFile(){}
    function MlFakeFile(content){this.data = content}
    MlFakeFile.prototype = new MlFile();
    MlFakeFile.prototype.truncate
    =
    function(len)
     {var old=this.data;
      this.data = caml_create_string(len | 0);
      caml_blit_string(old,0,this.data,0,len)};
    MlFakeFile.prototype.length
    =
    function(){return caml_ml_string_length(this.data)};
    MlFakeFile.prototype.write
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      if(offset + len >= clen)
       {var new_str=caml_create_string(offset + len),old_data=this.data;
        this.data = new_str;
        caml_blit_string(old_data,0,this.data,0,clen)}
      caml_blit_string(buf,pos,this.data,offset,len);
      return 0};
    MlFakeFile.prototype.read
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      caml_blit_string(this.data,offset,buf,pos,len);
      return 0};
    MlFakeFile.prototype.read_one
    =
    function(offset){return caml_string_get(this.data,offset)};
    MlFakeFile.prototype.close = function(){};
    MlFakeFile.prototype.constructor = MlFakeFile;
    function MlFakeDevice(root,f)
     {this.content = {};this.root = root;this.lookupFun = f}
    MlFakeDevice.prototype.nm = function(name){return this.root + name};
    MlFakeDevice.prototype.lookup
    =
    function(name)
     {if(! this.content[name] && this.lookupFun)
       {var
         res=
          this.lookupFun(caml_new_string(this.root),caml_new_string(name));
        if(res != 0)this.content[name] = new MlFakeFile(res[1])}};
    MlFakeDevice.prototype.exists
    =
    function(name)
     {if(name == "")return 1;
      var name_slash=name + "/",r=new RegExp("^" + name_slash);
      for(var n in this.content)if(n.match(r))return 1;
      this.lookup(name);
      return this.content[name]?1:0};
    MlFakeDevice.prototype.readdir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       seen={},
       a=[];
      for(var n in this.content)
       {var m=n.match(r);
        if(m && ! seen[m[1]]){seen[m[1]] = true;a.push(m[1])}}
      return a};
    MlFakeDevice.prototype.is_dir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       a=[];
      for(var n in this.content){var m=n.match(r);if(m)return 1}
      return 0};
    MlFakeDevice.prototype.unlink
    =
    function(name)
     {var ok=this.content[name]?true:false;
      delete this.content[name];
      return ok};
    MlFakeDevice.prototype.open
    =
    function(name,f)
     {if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      this.lookup(name);
      if(this.content[name])
       {if(this.is_dir(name))
         caml_raise_sys_error(this.nm(name) + " : is a directory");
        if(f.create && f.excl)
         caml_raise_sys_error(this.nm(name) + " : file already exists");
        var file=this.content[name];
        if(f.truncate)file.truncate();
        return file}
      else
       if(f.create)
        {this.content[name] = new MlFakeFile(caml_create_string(0));
         return this.content[name]}
       else
        caml_raise_no_such_file(this.nm(name))};
    MlFakeDevice.prototype.register
    =
    function(name,content)
     {if(this.content[name])
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      if(content instanceof MlString)
       this.content[name] = new MlFakeFile(content);
      else
       if(content instanceof Array)
        this.content[name] = new MlFakeFile(caml_string_of_array(content));
       else
        if(content.toString)
         {var mlstring=caml_new_string(content.toString());
          this.content[name] = new MlFakeFile(mlstring)}};
    MlFakeDevice.prototype.constructor = MlFakeDevice;
    function caml_array_of_string(s)
     {if(s.t != 4)caml_convert_string_to_array(s);return s.c}
    function caml_string_unsafe_set(s,i,c)
     {c &= 255;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_string_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_string_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_string_unsafe_set(s,i,c)}
    var Buffer=joo_global_object.Buffer;
    function MlNodeFile(fd){this.fs = require("fs");this.fd = fd}
    MlNodeFile.prototype = new MlFile();
    MlNodeFile.prototype.truncate
    =
    function(len){this.fs.ftruncateSync(this.fd,len | 0)};
    MlNodeFile.prototype.length
    =
    function(){return this.fs.fstatSync(this.fd).size};
    MlNodeFile.prototype.write
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(! (a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=new Buffer(a);
      this.fs.writeSync(this.fd,buffer,buf_offset,len,offset);
      return 0};
    MlNodeFile.prototype.read
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(! (a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=new Buffer(a);
      this.fs.readSync(this.fd,buffer,buf_offset,len,offset);
      for(var i=0;i < len;i++)
       caml_string_set(buf,buf_offset + i,buffer[buf_offset + i]);
      return 0};
    MlNodeFile.prototype.read_one
    =
    function(offset)
     {var a=new (joo_global_object.Uint8Array)(1),buffer=new Buffer(a);
      this.fs.readSync(this.fd,buffer,0,1,offset);
      return buffer[0]};
    MlNodeFile.prototype.close = function(){this.fs.closeSync(this.fd)};
    MlNodeFile.prototype.constructor = MlNodeFile;
    function MlNodeDevice(root){this.fs = require("fs");this.root = root}
    MlNodeDevice.prototype.nm = function(name){return this.root + name};
    MlNodeDevice.prototype.exists
    =
    function(name){return this.fs.existsSync(this.nm(name))?1:0};
    MlNodeDevice.prototype.readdir
    =
    function(name){return this.fs.readdirSync(this.nm(name))};
    MlNodeDevice.prototype.is_dir
    =
    function(name){return this.fs.statSync(this.nm(name)).isDirectory()?1:0};
    MlNodeDevice.prototype.unlink
    =
    function(name)
     {var b=this.fs.existsSync(this.nm(name))?1:0;
      this.fs.unlinkSync(this.nm(name));
      return b};
    MlNodeDevice.prototype.open
    =
    function(name,f)
     {var consts=require("constants"),res=0;
      for(var key in f)
       switch(key)
        {case "rdonly":res |= consts.O_RDONLY;break;
         case "wronly":res |= consts.O_WRONLY;break;
         case "append":res |= consts.O_WRONLY | consts.O_APPEND;break;
         case "create":res |= consts.O_CREAT;break;
         case "truncate":res |= consts.O_TRUNC;break;
         case "excl":res |= consts.O_EXCL;break;
         case "binary":res |= consts.O_BINARY;break;
         case "text":res |= consts.O_TEXT;break;
         case "nonblock":res |= consts.O_NONBLOCK;break
         }
      var fd=this.fs.openSync(this.nm(name),res);
      return new MlNodeFile(fd)};
    MlNodeDevice.prototype.rename
    =
    function(o,n){this.fs.renameSync(this.nm(o),this.nm(n))};
    MlNodeDevice.prototype.constructor = MlNodeDevice;
    var caml_root=caml_current_dir.match(/[^\/]*\//)[0],jsoo_mount_point=[];
    if
     (typeof module
      !==
      "undefined"
      &&
      module.exports
      &&
      typeof require
      !==
      "undefined")
     jsoo_mount_point.push
      ({path:caml_root,device:new MlNodeDevice(caml_root)});
    else
     jsoo_mount_point.push
      ({path:caml_root,device:new MlFakeDevice(caml_root)});
    jsoo_mount_point.push
     ({path:caml_root + "static/",
       device:new MlFakeDevice(caml_root + "static/")});
    function resolve_fs_device(name)
     {var
       path=caml_make_path(name),
       name=path.join("/"),
       name_slash=name + "/",
       res;
      for(var i=0;i < jsoo_mount_point.length;i++)
       {var m=jsoo_mount_point[i];
        if
         (name_slash.search(m.path)
          ==
          0
          &&
          (! res || res.path.length < m.path.length))
         res
         =
         {path:m.path,
          device:m.device,
          rest:name.substring(m.path.length,name.length)}}
      return res}
    function caml_std_output(chanid,s)
     {var
       chan=caml_ml_channels[chanid],
       str=caml_new_string(s),
       slen=caml_ml_string_length(str);
      chan.file.write(chan.offset,str,0,slen);
      chan.offset += slen;
      return 0}
    function js_print_stderr(s)
     {var g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stderr.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.error && v.error(s)}}
    function js_print_stdout(s)
     {var g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stdout.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.log && v.log(s)}}
    function caml_sys_open_internal(idx,output,file,flags)
     {if(caml_global_data.fds === undefined)
       caml_global_data.fds = new Array();
      flags = flags?flags:{};
      var info={};
      info.file = file;
      info.offset = flags.append?file.length():0;
      info.flags = flags;
      info.output = output;
      caml_global_data.fds[idx] = info;
      if(! caml_global_data.fd_last_idx || idx > caml_global_data.fd_last_idx)
       caml_global_data.fd_last_idx = idx;
      return idx}
    function caml_sys_open(name,flags,_perms)
     {var f={};
      while(flags)
       {switch(flags[1])
         {case 0:f.rdonly = 1;break;
          case 1:f.wronly = 1;break;
          case 2:f.append = 1;break;
          case 3:f.create = 1;break;
          case 4:f.truncate = 1;break;
          case 5:f.excl = 1;break;
          case 6:f.binary = 1;break;
          case 7:f.text = 1;break;
          case 8:f.nonblock = 1;break
          }
        flags = flags[2]}
      if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (name.toString()
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (name.toString()
         +
         " : flags Open_text and Open_binary are not compatible");
      var
       root=resolve_fs_device(name),
       file=root.device.open(root.rest,f),
       idx=caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;
      return caml_sys_open_internal(idx + 1,caml_std_output,file,f)}
    caml_sys_open_internal
     (0,caml_std_output,new MlFakeFile(caml_create_string(0)));
    caml_sys_open_internal
     (1,js_print_stdout,new MlFakeFile(caml_create_string(0)));
    caml_sys_open_internal
     (2,js_print_stderr,new MlFakeFile(caml_create_string(0)));
    function caml_ml_open_descriptor_in(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.wronly)caml_raise_sys_error("fd " + fd + " is writeonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:false,
         refill:null};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_open_descriptor_out(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.rdonly)caml_raise_sys_error("fd " + fd + " is readonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:true,
         buffer:""};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_out_channels_list()
     {var l=0;
      for(var c=0;c < caml_ml_channels.length;c++)
       if
        (caml_ml_channels[c]
         &&
         caml_ml_channels[c].opened
         &&
         caml_ml_channels[c].out)
        l = [0,caml_ml_channels[c].fd,l];
      return l}
    function caml_ml_output(chanid,buffer,offset,len)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)
       caml_raise_sys_error("Cannot output to a closed channel");
      var string;
      if(offset == 0 && caml_ml_string_length(buffer) == len)
       string = buffer;
      else
       {string = caml_create_string(len);
        caml_blit_string(buffer,offset,string,0,len)}
      var jsstring=string.toString(),id=jsstring.lastIndexOf("\n");
      if(id < 0)
       chan.buffer += jsstring;
      else
       {chan.buffer += jsstring.substr(0,id + 1);
        caml_ml_flush(chanid);
        chan.buffer += jsstring.substr(id + 1)}
      return 0}
    function caml_ml_output_char(chanid,c)
     {var s=caml_new_string(String.fromCharCode(c));
      caml_ml_output(chanid,s,0,1);
      return 0}
    function caml_raise_constant(tag){throw tag}
    function caml_raise_zero_divide()
     {caml_raise_constant(caml_global_data.Division_by_zero)}
    function caml_mod(x,y){if(y == 0)caml_raise_zero_divide();return x % y}
    function caml_modf_float(x)
     {if(isFinite(x))
       {var neg=1 / x < 0;
        x = Math.abs(x);
        var i=Math.floor(x),f=x - i;
        if(neg){i = - i;f = - f}
        return [0,f,i]}
      if(isNaN(x))return [0,NaN,NaN];
      return [0,1 / x,x]}
    function caml_notequal(x,y){return + (caml_compare_val(x,y,false) != 0)}
    function caml_obj_set_tag(x,tag){x[0] = tag;return 0}
    function caml_obj_tag(x)
     {return x instanceof Array?x[0]:x instanceof MlString?252:1e3}
    function caml_register_global(n,v,name_opt)
     {caml_global_data[n + 1] = v;if(name_opt)caml_global_data[name_opt] = v}
    var caml_named_values={};
    function caml_register_named_value(nm,v)
     {caml_named_values[caml_bytes_of_string(nm)] = v;return 0}
    function caml_string_equal(s1,s2)
     {if(s1 === s2)return 1;
      s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c == s2.c?1:0}
    function caml_string_notequal(s1,s2){return 1 - caml_string_equal(s1,s2)}
    function caml_sys_const_max_wosize(){return 2147483647 / 4 | 0}
    function caml_sys_exit(code)
     {var g=joo_global_object;
      if(g.quit)g.quit(code);
      if(g.process && g.process.exit)g.process.exit(code);
      caml_invalid_argument("Function 'exit' not implemented")}
    function caml_sys_get_config(){return [0,caml_new_string("Unix"),32,0]}
    function caml_raise_not_found()
     {caml_raise_constant(caml_global_data.Not_found)}
    function caml_sys_getenv(name)
     {var g=joo_global_object,n=name.toString();
      if(g.process && g.process.env && g.process.env[n] != undefined)
       return caml_js_to_string(g.process.env[n]);
      caml_raise_not_found()}
    function caml_sys_random_seed()
     {var x=new Date() ^ 4294967295 * Math.random();return [0,x]}
    function caml_trampoline(res)
     {var c=1;
      while(res && res.joo_tramp)
       {res = res.joo_tramp.apply(null,res.joo_args);c++}
      return res}
    function caml_trampoline_return(f,args)
     {return {joo_tramp:f,joo_args:args}}
    function caml_update_dummy(x,y)
     {if(typeof y === "function"){x.fun = y;return 0}
      if(y.fun){x.fun = y.fun;return 0}
      var i=y.length;
      while(i--)x[i] = y[i];
      return 0}
    function caml_return_exn_constant(tag){return tag}
    function caml_named_value(nm){return caml_named_values[nm]}
    function caml_wrap_exception(e)
     {if(e instanceof Array)return e;
      if
       (joo_global_object.RangeError
        &&
        e instanceof joo_global_object.RangeError
        &&
        e.message
        &&
        e.message.match(/maximum call stack/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if
       (joo_global_object.InternalError
        &&
        e instanceof joo_global_object.InternalError
        &&
        e.message
        &&
        e.message.match(/too much recursion/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if(e instanceof joo_global_object.Error && caml_named_value("jsError"))
       return [0,caml_named_value("jsError"),e];
      return [0,caml_global_data.Failure,caml_js_to_string(String(e))]}
    function unix_gettimeofday(){return new Date().getTime() / 1e3}
    function unix_inet_addr_of_string(){return 0}
    function unix_localtime(t)
     {var
       d=new Date(t * 1e3),
       januaryfirst=new Date(d.getFullYear(),0,1),
       doy=Math.floor((d - januaryfirst) / 864e5),
       jan=new Date(d.getFullYear(),0,1),
       jul=new Date(d.getFullYear(),6,1),
       stdTimezoneOffset=
        Math.max(jan.getTimezoneOffset(),jul.getTimezoneOffset());
      return [0,
              d.getSeconds(),
              d.getMinutes(),
              d.getHours(),
              d.getDate(),
              d.getMonth(),
              d.getFullYear() - 1900,
              d.getDay(),
              doy,
              d.getTimezoneOffset() < stdTimezoneOffset | 0]}
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):caml_call_gen(f,[a0,a1,a2])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5?f(a0,a1,a2,a3,a4):caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    function caml_call8(f,a0,a1,a2,a3,a4,a5,a6,a7)
     {return f.length == 8
              ?f(a0,a1,a2,a3,a4,a5,a6,a7)
              :caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7])}
    var
     Out_of_memory=[248,caml_new_string("Out_of_memory"),-1],
     Sys_error=[248,caml_new_string("Sys_error"),-2],
     Failure=[248,caml_new_string("Failure"),-3],
     Invalid_argument=[248,caml_new_string("Invalid_argument"),-4],
     End_of_file=[248,caml_new_string("End_of_file"),-5],
     Division_by_zero=[248,caml_new_string("Division_by_zero"),-6],
     Not_found=[248,caml_new_string("Not_found"),-7],
     Match_failure=[248,caml_new_string("Match_failure"),-8],
     Stack_overflow=[248,caml_new_string("Stack_overflow"),-9],
     Sys_blocked_io=[248,caml_new_string("Sys_blocked_io"),-10],
     Assert_failure=[248,caml_new_string("Assert_failure"),-11],
     Undefined_recursive_module=
      [248,caml_new_string("Undefined_recursive_module"),-12],
     partial=[4,0,0,0,0],
     locfmt=
      [0,
       [11,
        caml_new_string('File "'),
        [2,
         0,
         [11,
          caml_new_string('", line '),
          [4,
           0,
           0,
           0,
           [11,
            caml_new_string(", characters "),
            [4,0,0,0,[12,45,[4,0,0,0,[11,caml_new_string(": "),[2,0,0]]]]]]]]]],
       caml_new_string('File "%s", line %d, characters %d-%d: %s')],
     api_function_name=caml_new_string("wakeup"),
     dummy_string=caml_new_string(""),
     timeout_during$0=caml_new_string("waiting for message recv"),
     timeout_during=caml_new_string("sending message"),
     err_msg=
      caml_new_string
       ("ERROR: There already is a request to create a context!!"),
     partial$0=
      [4,
       0,
       [0,2,2],
       0,
       [12,46,[4,0,[0,2,3],0,[12,32,[2,0,[11,caml_new_string(" : "),0]]]]]],
     signalling_server_url=caml_new_string("http://localhost:3000"),
     manager_addr=caml_new_string("tcp://127.0.0.1:5555"),
     opt=[0,0],
     fmt=
      [0,
       [11,
        caml_new_string("fail to send bar:"),
        [4,3,0,0,[11,caml_new_string(" hwm:"),[4,3,0,0,[12,10,0]]]]],
       caml_new_string("fail to send bar:%i hwm:%i\n")];
    caml_register_global
     (11,Undefined_recursive_module,"Undefined_recursive_module");
    caml_register_global(10,Assert_failure,"Assert_failure");
    caml_register_global(9,Sys_blocked_io,"Sys_blocked_io");
    caml_register_global(8,Stack_overflow,"Stack_overflow");
    caml_register_global(7,Match_failure,"Match_failure");
    caml_register_global(6,Not_found,"Not_found");
    caml_register_global(5,Division_by_zero,"Division_by_zero");
    caml_register_global(4,End_of_file,"End_of_file");
    caml_register_global(3,Invalid_argument,"Invalid_argument");
    caml_register_global(2,Failure,"Failure");
    caml_register_global(1,Sys_error,"Sys_error");
    caml_register_global(0,Out_of_memory,"Out_of_memory");
    var
     _g_=caml_new_string("%,"),
     _e_=caml_new_string("%.12g"),
     _d_=caml_new_string("."),
     _b_=caml_new_string("true"),
     _c_=caml_new_string("false"),
     _h_=[0,caml_new_string("list.ml"),262,11],
     _i_=caml_new_string("\\\\"),
     _j_=caml_new_string("\\'"),
     _k_=caml_new_string("\\b"),
     _l_=caml_new_string("\\t"),
     _m_=caml_new_string("\\n"),
     _n_=caml_new_string("\\r"),
     _q_=caml_new_string("String.blit / Bytes.blit_string"),
     _p_=caml_new_string("Bytes.blit"),
     _o_=caml_new_string("String.sub / Bytes.sub"),
     _r_=caml_new_string("String.contains_from / Bytes.contains_from"),
     _w_=caml_new_string("Set.remove_min_elt"),
     _x_=[0,0,0,0],
     _y_=[0,0,0],
     _z_=[0,caml_new_string("set.ml"),510,18],
     _s_=caml_new_string("Set.bal"),
     _t_=caml_new_string("Set.bal"),
     _u_=caml_new_string("Set.bal"),
     _v_=caml_new_string("Set.bal"),
     _F_=caml_new_string("Map.remove_min_elt"),
     _G_=[0,0,0,0],
     _H_=[0,caml_new_string("map.ml"),393,10],
     _I_=[0,0,0],
     _B_=caml_new_string("Map.bal"),
     _C_=caml_new_string("Map.bal"),
     _D_=caml_new_string("Map.bal"),
     _E_=caml_new_string("Map.bal"),
     _K_=caml_new_string("Queue.Empty"),
     _L_=caml_new_string("CamlinternalLazy.Undefined"),
     _M_=caml_new_string("Buffer.add: cannot grow buffer"),
     _V_=caml_new_string("%c"),
     _W_=caml_new_string("%s"),
     _X_=caml_new_string("%i"),
     _Y_=caml_new_string("%li"),
     _Z_=caml_new_string("%ni"),
     ___=caml_new_string("%Li"),
     _$_=caml_new_string("%f"),
     _aa_=caml_new_string("%B"),
     _ab_=caml_new_string("%{"),
     _ac_=caml_new_string("%}"),
     _ad_=caml_new_string("%("),
     _ae_=caml_new_string("%)"),
     _af_=caml_new_string("%a"),
     _ag_=caml_new_string("%t"),
     _ah_=caml_new_string("%?"),
     _ai_=caml_new_string("%r"),
     _aj_=caml_new_string("%_r"),
     _ak_=[0,caml_new_string("camlinternalFormat.ml"),846,23],
     _av_=[0,caml_new_string("camlinternalFormat.ml"),810,21],
     _an_=[0,caml_new_string("camlinternalFormat.ml"),811,21],
     _aw_=[0,caml_new_string("camlinternalFormat.ml"),814,21],
     _ao_=[0,caml_new_string("camlinternalFormat.ml"),815,21],
     _ax_=[0,caml_new_string("camlinternalFormat.ml"),818,19],
     _ap_=[0,caml_new_string("camlinternalFormat.ml"),819,19],
     _ay_=[0,caml_new_string("camlinternalFormat.ml"),822,22],
     _aq_=[0,caml_new_string("camlinternalFormat.ml"),823,22],
     _az_=[0,caml_new_string("camlinternalFormat.ml"),827,30],
     _ar_=[0,caml_new_string("camlinternalFormat.ml"),828,30],
     _at_=[0,caml_new_string("camlinternalFormat.ml"),832,26],
     _al_=[0,caml_new_string("camlinternalFormat.ml"),833,26],
     _au_=[0,caml_new_string("camlinternalFormat.ml"),842,28],
     _am_=[0,caml_new_string("camlinternalFormat.ml"),843,28],
     _as_=[0,caml_new_string("camlinternalFormat.ml"),847,23],
     _bw_=caml_new_string("%u"),
     _bu_=[0,caml_new_string("camlinternalFormat.ml"),1525,4],
     _bv_=caml_new_string("Printf: bad conversion %["),
     _bx_=[0,caml_new_string("camlinternalFormat.ml"),1593,39],
     _by_=[0,caml_new_string("camlinternalFormat.ml"),1616,31],
     _bz_=[0,caml_new_string("camlinternalFormat.ml"),1617,31],
     _bA_=caml_new_string("Printf: bad conversion %_"),
     _bB_=[0,caml_new_string("camlinternalFormat.ml"),1797,8],
     _bC_=caml_new_string("@{"),
     _bD_=caml_new_string("@["),
     _bE_=caml_new_string("@{"),
     _bF_=caml_new_string("@["),
     _bs_=caml_new_string("nan"),
     _bt_=caml_new_string("."),
     _bq_=caml_new_string("neg_infinity"),
     _br_=caml_new_string("infinity"),
     _bp_=caml_new_string("%.12g"),
     _bc_=caml_new_string("%nd"),
     _bd_=caml_new_string("%+nd"),
     _be_=caml_new_string("% nd"),
     _bf_=caml_new_string("%ni"),
     _bg_=caml_new_string("%+ni"),
     _bh_=caml_new_string("% ni"),
     _bi_=caml_new_string("%nx"),
     _bj_=caml_new_string("%#nx"),
     _bk_=caml_new_string("%nX"),
     _bl_=caml_new_string("%#nX"),
     _bm_=caml_new_string("%no"),
     _bn_=caml_new_string("%#no"),
     _bo_=caml_new_string("%nu"),
     _a1_=caml_new_string("%ld"),
     _a2_=caml_new_string("%+ld"),
     _a3_=caml_new_string("% ld"),
     _a4_=caml_new_string("%li"),
     _a5_=caml_new_string("%+li"),
     _a6_=caml_new_string("% li"),
     _a7_=caml_new_string("%lx"),
     _a8_=caml_new_string("%#lx"),
     _a9_=caml_new_string("%lX"),
     _a__=caml_new_string("%#lX"),
     _a$_=caml_new_string("%lo"),
     _ba_=caml_new_string("%#lo"),
     _bb_=caml_new_string("%lu"),
     _aO_=caml_new_string("%Ld"),
     _aP_=caml_new_string("%+Ld"),
     _aQ_=caml_new_string("% Ld"),
     _aR_=caml_new_string("%Li"),
     _aS_=caml_new_string("%+Li"),
     _aT_=caml_new_string("% Li"),
     _aU_=caml_new_string("%Lx"),
     _aV_=caml_new_string("%#Lx"),
     _aW_=caml_new_string("%LX"),
     _aX_=caml_new_string("%#LX"),
     _aY_=caml_new_string("%Lo"),
     _aZ_=caml_new_string("%#Lo"),
     _a0_=caml_new_string("%Lu"),
     _aB_=caml_new_string("%d"),
     _aC_=caml_new_string("%+d"),
     _aD_=caml_new_string("% d"),
     _aE_=caml_new_string("%i"),
     _aF_=caml_new_string("%+i"),
     _aG_=caml_new_string("% i"),
     _aH_=caml_new_string("%x"),
     _aI_=caml_new_string("%#x"),
     _aJ_=caml_new_string("%X"),
     _aK_=caml_new_string("%#X"),
     _aL_=caml_new_string("%o"),
     _aM_=caml_new_string("%#o"),
     _aN_=caml_new_string("%u"),
     _N_=caml_new_string("@]"),
     _O_=caml_new_string("@}"),
     _P_=caml_new_string("@?"),
     _Q_=caml_new_string("@\n"),
     _R_=caml_new_string("@."),
     _S_=caml_new_string("@@"),
     _T_=caml_new_string("@%"),
     _U_=caml_new_string("@"),
     _aA_=caml_new_string("CamlinternalFormat.Type_mismatch"),
     _bJ_=caml_new_string(""),
     _bK_=
      [0,[11,caml_new_string(", "),[2,0,[2,0,0]]],caml_new_string(", %s%s")],
     _b2_=[0,[2,0,[12,10,0]],caml_new_string("%s\n")],
     _b3_=
      [0,
       [11,
        caml_new_string
         ("(Program not linked with -g, cannot print stack backtrace)\n"),
        0],
       caml_new_string
        ("(Program not linked with -g, cannot print stack backtrace)\n")],
     _bU_=caml_new_string("Raised at"),
     _bV_=caml_new_string("Re-raised at"),
     _bW_=caml_new_string("Raised by primitive operation at"),
     _bX_=caml_new_string("Called from"),
     _bY_=caml_new_string(" (inlined)"),
     _b0_=caml_new_string(""),
     _bZ_=
      [0,
       [2,
        0,
        [11,
         caml_new_string(' file "'),
         [2,
          0,
          [12,
           34,
           [2,
            0,
            [11,
             caml_new_string(", line "),
             [4,
              0,
              0,
              0,
              [11,caml_new_string(", characters "),[4,0,0,0,[12,45,partial]]]]]]]]]],
       caml_new_string('%s file "%s"%s, line %d, characters %d-%d')],
     _b1_=
      [0,
       [2,0,[11,caml_new_string(" unknown location"),0]],
       caml_new_string("%s unknown location")],
     _bP_=caml_new_string("Out of memory"),
     _bQ_=caml_new_string("Stack overflow"),
     _bR_=caml_new_string("Pattern matching failed"),
     _bS_=caml_new_string("Assertion failed"),
     _bT_=caml_new_string("Undefined recursive module"),
     _bL_=[0,[12,40,[2,0,[2,0,[12,41,0]]]],caml_new_string("(%s%s)")],
     _bM_=caml_new_string(""),
     _bN_=caml_new_string(""),
     _bO_=[0,[12,40,[2,0,[12,41,0]]],caml_new_string("(%s)")],
     _bI_=[0,[4,0,0,0,0],caml_new_string("%d")],
     _bG_=[0,[3,0,0],caml_new_string("%S")],
     _bH_=caml_new_string("_"),
     _b5_=caml_new_string("Random.int"),
     _b4_=caml_new_string("x"),
     _b6_=
      [0,
       987910699,
       495797812,
       364182224,
       414272206,
       318284740,
       990407751,
       383018966,
       270373319,
       840823159,
       24560019,
       536292337,
       512266505,
       189156120,
       730249596,
       143776328,
       51606627,
       140166561,
       366354223,
       1003410265,
       700563762,
       981890670,
       913149062,
       526082594,
       1021425055,
       784300257,
       667753350,
       630144451,
       949649812,
       48546892,
       415514493,
       258888527,
       511570777,
       89983870,
       283659902,
       308386020,
       242688715,
       482270760,
       865188196,
       1027664170,
       207196989,
       193777847,
       619708188,
       671350186,
       149669678,
       257044018,
       87658204,
       558145612,
       183450813,
       28133145,
       901332182,
       710253903,
       510646120,
       652377910,
       409934019,
       801085050],
     _fo_=caml_new_string("OCAMLRUNPARAM"),
     _fm_=caml_new_string("CAMLRUNPARAM"),
     _b7_=caml_new_string(""),
     _fl_=caml_new_string("TMPDIR"),
     _fk_=caml_new_string("TEMP"),
     _b9_=caml_new_string("Cygwin"),
     _b__=caml_new_string("Win32"),
     _cz_=[0,caml_new_string("src/core/lwt.ml"),2615,6],
     _cA_=[0,0],
     _cy_=[0,0],
     _cx_=[0,0],
     _cv_=[0,0],
     _cw_=[0,1],
     _ct_=[0,1],
     _cu_=[0,1],
     _cr_=[0,0],
     _cs_=[0,1],
     _cp_=[0,0],
     _cq_=[0,1],
     _cn_=[0,0],
     _co_=[0,1],
     _cl_=[0,0],
     _cm_=[0,0],
     _ck_=caml_new_string("wakeup_later_exn"),
     _cj_=caml_new_string("wakeup_later"),
     _cg_=[0,[11,caml_new_string("Lwt."),[2,0,0]],caml_new_string("Lwt.%s")],
     _ch_=[0,[11,caml_new_string("Lwt."),[2,0,0]],caml_new_string("Lwt.%s")],
     _ci_=[0,1],
     _cd_=[0,[11,caml_new_string("Lwt."),[2,0,0]],caml_new_string("Lwt.%s")],
     _ce_=[0,[11,caml_new_string("Lwt."),[2,0,0]],caml_new_string("Lwt.%s")],
     _cf_=[0,0],
     _cb_=caml_new_string("Fatal error: exception "),
     _b$_=[0,caml_new_string("src/core/lwt.ml"),1014,23],
     _ca_=[0,caml_new_string("src/core/lwt.ml"),1015,22],
     _cc_=caml_new_string("Lwt.Resolution_loop.Canceled"),
     _cC_=caml_new_string("Js.Error"),
     _cD_=caml_new_string("jsError"),
     _cE_=caml_new_string("Exception during Lwt.async: "),
     _cF_=caml_new_string("Omq_types.OMQ_Exception"),
     _cH_=caml_new_string(""),
     _cG_=caml_new_string("|| reason: "),
     _cL_=caml_new_string("fail: cannot send msg to "),
     _cK_=caml_new_string("fail: cannot connect to remote_socket "),
     _cJ_=caml_new_string("fail: cannot bind "),
     _cI_=caml_new_string("fail: start_comm_layer with server_url="),
     _c6_=caml_new_string("ERROR: OMQ socket already closed!"),
     _c5_=[0,0],
     _c4_=[0,0],
     _c3_=[0,0],
     _c1_=caml_new_string("Called send before any recv on a REP socket"),
     _c2_=caml_new_string("Called send twice in a row on a REP socket"),
     _c0_=caml_new_string("Called send twice in a row on a REQ socket"),
     _cZ_=caml_new_string("No connected services to send msg to!!"),
     _cY_=
      [0,
       [11,
        caml_new_string("INFO: "),
        [2,
         0,
         [11,
          caml_new_string(" omqsocket is connected to remote "),
          [2,0,[11,caml_new_string(", listening on local "),[2,0,[12,10,0]]]]]]],
       caml_new_string
        ("INFO: %s omqsocket is connected to remote %s, listening on local %s\n")],
     _cW_=
      [0,
       [11,
        caml_new_string("ERROR: Already listening on local "),
        [2,0,[12,10,0]]],
       caml_new_string("ERROR: Already listening on local %s\n")],
     _cX_=
      [0,
       [11,
        caml_new_string("INFO: "),
        [2,
         0,
         [11,
          caml_new_string(" local was bound to socket with id "),
          [2,0,[12,10,0]]]]],
       caml_new_string("INFO: %s local was bound to socket with id %s\n")],
     _cU_=
      [0,
       [11,
        caml_new_string("INFO: New remote ("),
        [2,0,[11,caml_new_string(") connected to sckt\n"),0]]],
       caml_new_string("INFO: New remote (%s) connected to sckt\n")],
     _cV_=
      caml_new_string
       ("WARN: The local address is not yet acknowledged by the OMQSocket"),
     _cS_=caml_new_string("WARN: Remote disconnected from sckt\n"),
     _cT_=
      caml_new_string
       ("WARN: The remote that disconnected is not known by the OMQSocket!"),
     _cQ_=
      caml_new_string
       ("WARN: omq_socket.ml; got message on socket not listening on just yet!\n"),
     _cR_=
      caml_new_string
       ("WARN: Messaged dropped, reached recv high water mark!!\n"),
     _cP_=caml_new_string("TIMEOUT DURING: "),
     _cO_=caml_new_string("ERROR: Operation on closed socket"),
     _cM_=caml_new_string("ERROR: Omq socket is blocked in a SEND operation"),
     _cN_=caml_new_string("ERROR: Omq socket is blocked in a RECV operation"),
     _c8_=[0,[2,0,[12,10,0]],caml_new_string("%s\n")],
     _c7_=caml_new_string("ERROR: Operation on closed context"),
     _db_=caml_new_string("E2BIG"),
     _dd_=caml_new_string("EACCES"),
     _de_=caml_new_string("EAGAIN"),
     _df_=caml_new_string("EBADF"),
     _dg_=caml_new_string("EBUSY"),
     _dh_=caml_new_string("ECHILD"),
     _di_=caml_new_string("EDEADLK"),
     _dj_=caml_new_string("EDOM"),
     _dk_=caml_new_string("EEXIST"),
     _dl_=caml_new_string("EFAULT"),
     _dm_=caml_new_string("EFBIG"),
     _dn_=caml_new_string("EINTR"),
     _do_=caml_new_string("EINVAL"),
     _dp_=caml_new_string("EIO"),
     _dq_=caml_new_string("EISDIR"),
     _dr_=caml_new_string("EMFILE"),
     _ds_=caml_new_string("EMLINK"),
     _dt_=caml_new_string("ENAMETOOLONG"),
     _du_=caml_new_string("ENFILE"),
     _dv_=caml_new_string("ENODEV"),
     _dw_=caml_new_string("ENOENT"),
     _dx_=caml_new_string("ENOEXEC"),
     _dy_=caml_new_string("ENOLCK"),
     _dz_=caml_new_string("ENOMEM"),
     _dA_=caml_new_string("ENOSPC"),
     _dB_=caml_new_string("ENOSYS"),
     _dC_=caml_new_string("ENOTDIR"),
     _dD_=caml_new_string("ENOTEMPTY"),
     _dE_=caml_new_string("ENOTTY"),
     _dF_=caml_new_string("ENXIO"),
     _dG_=caml_new_string("EPERM"),
     _dH_=caml_new_string("EPIPE"),
     _dI_=caml_new_string("ERANGE"),
     _dJ_=caml_new_string("EROFS"),
     _dK_=caml_new_string("ESPIPE"),
     _dL_=caml_new_string("ESRCH"),
     _dM_=caml_new_string("EXDEV"),
     _dN_=caml_new_string("EWOULDBLOCK"),
     _dO_=caml_new_string("EINPROGRESS"),
     _dP_=caml_new_string("EALREADY"),
     _dQ_=caml_new_string("ENOTSOCK"),
     _dR_=caml_new_string("EDESTADDRREQ"),
     _dS_=caml_new_string("EMSGSIZE"),
     _dT_=caml_new_string("EPROTOTYPE"),
     _dU_=caml_new_string("ENOPROTOOPT"),
     _dV_=caml_new_string("EPROTONOSUPPORT"),
     _dW_=caml_new_string("ESOCKTNOSUPPORT"),
     _dX_=caml_new_string("EOPNOTSUPP"),
     _dY_=caml_new_string("EPFNOSUPPORT"),
     _dZ_=caml_new_string("EAFNOSUPPORT"),
     _d0_=caml_new_string("EADDRINUSE"),
     _d1_=caml_new_string("EADDRNOTAVAIL"),
     _d2_=caml_new_string("ENETDOWN"),
     _d3_=caml_new_string("ENETUNREACH"),
     _d4_=caml_new_string("ENETRESET"),
     _d5_=caml_new_string("ECONNABORTED"),
     _d6_=caml_new_string("ECONNRESET"),
     _d7_=caml_new_string("ENOBUFS"),
     _d8_=caml_new_string("EISCONN"),
     _d9_=caml_new_string("ENOTCONN"),
     _d__=caml_new_string("ESHUTDOWN"),
     _d$_=caml_new_string("ETOOMANYREFS"),
     _ea_=caml_new_string("ETIMEDOUT"),
     _eb_=caml_new_string("ECONNREFUSED"),
     _ec_=caml_new_string("EHOSTDOWN"),
     _ed_=caml_new_string("EHOSTUNREACH"),
     _ee_=caml_new_string("ELOOP"),
     _ef_=caml_new_string("EOVERFLOW"),
     _eg_=
      [0,
       [11,caml_new_string("EUNKNOWNERR "),[4,0,0,0,0]],
       caml_new_string("EUNKNOWNERR %d")],
     _dc_=
      [0,
       [11,
        caml_new_string("Unix.Unix_error(Unix."),
        [2,
         0,
         [11,
          caml_new_string(", "),
          [3,0,[11,caml_new_string(", "),[3,0,[12,41,0]]]]]]],
       caml_new_string("Unix.Unix_error(Unix.%s, %S, %S)")],
     _c9_=caml_new_string("Unix.Unix_error"),
     _c__=caml_new_string(""),
     _c$_=caml_new_string(""),
     _da_=caml_new_string("Unix.Unix_error"),
     _eh_=caml_new_string("0.0.0.0"),
     _ei_=caml_new_string("127.0.0.1"),
     _fj_=caml_new_string("::"),
     _fi_=caml_new_string("::1"),
     _ew_=[0,[12,10,[10,0]],caml_new_string("\n%!")],
     _ex_=[0,[2,0,0],caml_new_string("%s")],
     _ev_=
      [0,
       [4,
        0,
        [0,2,4],
        0,
        [12,
         45,
         [4,
          0,
          [0,2,2],
          0,
          [12,
           45,
           [4,
            0,
            [0,2,2],
            0,
            [12,32,[4,0,[0,2,2],0,[12,58,[4,0,[0,2,2],0,[12,58,partial$0]]]]]]]]]],
       caml_new_string("%04d-%02d-%02d %02d:%02d:%02d.%03d %s : ")],
     _eq_=caml_new_string("DEBUG"),
     _er_=caml_new_string("INFO"),
     _es_=caml_new_string("WARN"),
     _et_=caml_new_string("ERROR"),
     _eu_=caml_new_string("FATAL"),
     _ep_=caml_new_string("\x1b[0m"),
     _ej_=caml_new_string("\x1b[31m"),
     _ek_=caml_new_string("\x1b[32m"),
     _el_=caml_new_string("\x1b[33m"),
     _em_=caml_new_string("\x1b[34m"),
     _en_=caml_new_string("\x1b[35m"),
     _eo_=caml_new_string("\x1b[36m"),
     _ey_=
      [0,
       [11,caml_new_string("logging set at debug lvl"),0],
       caml_new_string("logging set at debug lvl")],
     _ez_=caml_new_string("tcp://127.0.0.1:"),
     _eB_=caml_new_string(""),
     _eA_=caml_new_string(""),
     _eT_=
      [0,
       [11,
        caml_new_string("paramserv: Connected to addrs ("),
        [2,
         0,
         [11,
          caml_new_string("), listening on local ("),
          [2,0,[11,caml_new_string(")\n"),0]]]]],
       caml_new_string
        ("paramserv: Connected to addrs (%s), listening on local (%s)\n")],
     _eS_=
      [0,
       [11,caml_new_string("paramserv: creating dealer socket for ctx"),0],
       caml_new_string("paramserv: creating dealer socket for ctx")],
     _eR_=
      [0,
       [11,caml_new_string("paramserv: waiting to recv message on myself"),0],
       caml_new_string("paramserv: waiting to recv message on myself")],
     _eQ_=
      [0,
       [11,caml_new_string("paramserv: closed all sockets"),0],
       caml_new_string("paramserv: closed all sockets")],
     _eM_=
      [0,
       [11,caml_new_string("paramserv: param: "),[2,0,0]],
       caml_new_string("paramserv: param: %s")],
     _eK_=
      [0,
       [11,
        caml_new_string("Connected to addrs ("),
        [2,
         0,
         [11,
          caml_new_string("), listening on local ("),
          [2,0,[11,caml_new_string(")\n"),0]]]]],
       caml_new_string("Connected to addrs (%s), listening on local (%s)\n")],
     _eL_=
      [0,
       [11,
        caml_new_string("paramserv: the jobname sent to master is "),
        [2,0,0]],
       caml_new_string("paramserv: the jobname sent to master is %s")],
     _eN_=
      [0,
       [11,caml_new_string("paramserv: sending with the sysargs "),[2,0,0]],
       caml_new_string("paramserv: sending with the sysargs %s")],
     _eO_=
      [0,
       [11,caml_new_string("paramserv: serving Job_Create to master"),0],
       caml_new_string("paramserv: serving Job_Create to master")],
     _eP_=
      [0,
       [11,caml_new_string("paramserv: closing sockets 157"),0],
       caml_new_string("paramserv: closing sockets 157")],
     _eH_=
      [0,
       [2,0,[11,caml_new_string(": ps_get\n"),0]],
       caml_new_string("%s: ps_get\n")],
     _eI_=
      [0,
       [2,0,[11,caml_new_string(": ps_set\n"),0]],
       caml_new_string("%s: ps_set\n")],
     _eJ_=
      [0,
       [2,0,[11,caml_new_string(": ps_push\n"),0]],
       caml_new_string("%s: ps_push\n")],
     _eG_=
      [0,
       [11,caml_new_string("unknown mssage to PS\n"),0],
       caml_new_string("unknown mssage to PS\n")],
     _eF_=
      [0,
       [11,
        caml_new_string("schedule t:"),
        [4,
         3,
         0,
         0,
         [11,
          caml_new_string(" -> "),
          [4,3,0,0,[11,caml_new_string(" workers\n"),0]]]]],
       caml_new_string("schedule t:%i -> %i workers\n")],
     _eE_=[0,[2,0,[12,10,0]],caml_new_string("%s\n")],
     _eD_=
      [0,
       [11,
        caml_new_string("parameter server "),
        [17,[0,caml_new_string("@ "),1,0],[2,0,[12,10,0]]]],
       caml_new_string("parameter server @ %s\n")],
     _eC_=caml_new_string("Paramserver is not initialised!!"),
     _e6_=
      [0,
       [11,
        caml_new_string
         ("Successfully connected to master with local address ("),
        [2,0,[11,caml_new_string(")\n"),0]]],
       caml_new_string
        ("Successfully connected to master with local address (%s)\n")],
     _e1_=caml_new_string(" terminated"),
     _e2_=caml_new_string("#"),
     _e4_=
      [0,
       [11,caml_new_string("unknown mssage to PS\n"),0],
       caml_new_string("unknown mssage to PS\n")],
     _e3_=
      [0,
       [2,0,[11,caml_new_string(": ps_schedule\n"),0]],
       caml_new_string("%s: ps_schedule\n")],
     _e0_=
      [0,
       [2,0,[11,caml_new_string(": terminate\n"),0]],
       caml_new_string("%s: terminate\n")],
     _eZ_=[0,[2,0,[12,10,0]],caml_new_string("%s\n")],
     _eY_=
      [0,
       [11,
        caml_new_string("parameter worker "),
        [17,[0,caml_new_string("@ "),1,0],[2,0,[12,10,0]]]],
       caml_new_string("parameter worker @ %s\n")],
     _e5_=caml_new_string("Paramclient is not initialised!!"),
     _eX_=caml_new_string("Paramclient is not initialised!!"),
     _eW_=caml_new_string("Paramclient is not initialised!!"),
     _eV_=caml_new_string("Paramclient is not initialised!!"),
     _eU_=caml_new_string("Paramclient is not initialised!!"),
     _fc_=caml_new_string(""),
     _fd_=caml_new_string("Actor_pure_param:worker_num"),
     _fb_=caml_new_string(""),
     _fa_=caml_new_string(""),
     _e9_=caml_new_string("unknown command"),
     _e__=[0,[2,0,[12,10,0]],caml_new_string("%s\n")],
     _e8_=
      [0,
       [11,
        caml_new_string("Successfully connected to remote ("),
        [2,
         0,
         [11,
          caml_new_string(") with local address ("),
          [2,0,[11,caml_new_string(")\n"),0]]]]],
       caml_new_string
        ("Successfully connected to remote (%s) with local address (%s)\n")],
     _e7_=
      [0,
       [11,
        caml_new_string
         ("PARAM.ML: Successfully connected to signalling server with id ("),
        [2,0,[11,caml_new_string(") and create OMQ Context"),0]]],
       caml_new_string
        ("PARAM.ML: Successfully connected to signalling server with id (%s) and create OMQ Context")],
     _e$_=caml_new_string("Actor_pure_param:start:psp"),
     _fh_=
      [0,
       [11,caml_new_string("do some work at master node\n"),0],
       caml_new_string("do some work at master node\n")],
     _ff_=
      [0,
       [11,caml_new_string("test_pure_param: command line arg: "),[2,0,0]],
       caml_new_string("test_pure_param: command line arg: %s")],
     _fg_=caml_new_string("must provide job id!!"),
     _fe_=
      [0,
       [11,caml_new_string("working on "),[4,3,0,0,[12,10,0]]],
       caml_new_string("working on %i\n")];
    function erase_rel(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,erase_rel(rest)];
         case 1:var rest$0=param[1];return [1,erase_rel(rest$0)];
         case 2:var rest$1=param[1];return [2,erase_rel(rest$1)];
         case 3:var rest$2=param[1];return [3,erase_rel(rest$2)];
         case 4:var rest$3=param[1];return [4,erase_rel(rest$3)];
         case 5:var rest$4=param[1];return [5,erase_rel(rest$4)];
         case 6:var rest$5=param[1];return [6,erase_rel(rest$5)];
         case 7:var rest$6=param[1];return [7,erase_rel(rest$6)];
         case 8:
          var rest$7=param[2],ty=param[1];return [8,ty,erase_rel(rest$7)];
         case 9:
          var rest$8=param[3],ty1=param[1];
          return [9,ty1,ty1,erase_rel(rest$8)];
         case 10:var rest$9=param[1];return [10,erase_rel(rest$9)];
         case 11:var rest$10=param[1];return [11,erase_rel(rest$10)];
         case 12:var rest$11=param[1];return [12,erase_rel(rest$11)];
         case 13:var rest$12=param[1];return [13,erase_rel(rest$12)];
         default:var rest$13=param[1];return [14,erase_rel(rest$13)]}}
    function concat_fmtty(fmtty1,fmtty2)
     {if(typeof fmtty1 === "number")
       return fmtty2;
      else
       switch(fmtty1[0])
        {case 0:var rest=fmtty1[1];return [0,concat_fmtty(rest,fmtty2)];
         case 1:var rest$0=fmtty1[1];return [1,concat_fmtty(rest$0,fmtty2)];
         case 2:var rest$1=fmtty1[1];return [2,concat_fmtty(rest$1,fmtty2)];
         case 3:var rest$2=fmtty1[1];return [3,concat_fmtty(rest$2,fmtty2)];
         case 4:var rest$3=fmtty1[1];return [4,concat_fmtty(rest$3,fmtty2)];
         case 5:var rest$4=fmtty1[1];return [5,concat_fmtty(rest$4,fmtty2)];
         case 6:var rest$5=fmtty1[1];return [6,concat_fmtty(rest$5,fmtty2)];
         case 7:var rest$6=fmtty1[1];return [7,concat_fmtty(rest$6,fmtty2)];
         case 8:
          var rest$7=fmtty1[2],ty=fmtty1[1];
          return [8,ty,concat_fmtty(rest$7,fmtty2)];
         case 9:
          var rest$8=fmtty1[3],ty2=fmtty1[2],ty1=fmtty1[1];
          return [9,ty1,ty2,concat_fmtty(rest$8,fmtty2)];
         case 10:var rest$9=fmtty1[1];return [10,concat_fmtty(rest$9,fmtty2)];
         case 11:
          var rest$10=fmtty1[1];return [11,concat_fmtty(rest$10,fmtty2)];
         case 12:
          var rest$11=fmtty1[1];return [12,concat_fmtty(rest$11,fmtty2)];
         case 13:
          var rest$12=fmtty1[1];return [13,concat_fmtty(rest$12,fmtty2)];
         default:
          var rest$13=fmtty1[1];return [14,concat_fmtty(rest$13,fmtty2)]}}
    function concat_fmt(fmt1,fmt2)
     {if(typeof fmt1 === "number")
       return fmt2;
      else
       switch(fmt1[0])
        {case 0:var rest=fmt1[1];return [0,concat_fmt(rest,fmt2)];
         case 1:var rest$0=fmt1[1];return [1,concat_fmt(rest$0,fmt2)];
         case 2:
          var rest$1=fmt1[2],pad=fmt1[1];
          return [2,pad,concat_fmt(rest$1,fmt2)];
         case 3:
          var rest$2=fmt1[2],pad$0=fmt1[1];
          return [3,pad$0,concat_fmt(rest$2,fmt2)];
         case 4:
          var rest$3=fmt1[4],prec=fmt1[3],pad$1=fmt1[2],iconv=fmt1[1];
          return [4,iconv,pad$1,prec,concat_fmt(rest$3,fmt2)];
         case 5:
          var rest$4=fmt1[4],prec$0=fmt1[3],pad$2=fmt1[2],iconv$0=fmt1[1];
          return [5,iconv$0,pad$2,prec$0,concat_fmt(rest$4,fmt2)];
         case 6:
          var rest$5=fmt1[4],prec$1=fmt1[3],pad$3=fmt1[2],iconv$1=fmt1[1];
          return [6,iconv$1,pad$3,prec$1,concat_fmt(rest$5,fmt2)];
         case 7:
          var rest$6=fmt1[4],prec$2=fmt1[3],pad$4=fmt1[2],iconv$2=fmt1[1];
          return [7,iconv$2,pad$4,prec$2,concat_fmt(rest$6,fmt2)];
         case 8:
          var rest$7=fmt1[4],prec$3=fmt1[3],pad$5=fmt1[2],fconv=fmt1[1];
          return [8,fconv,pad$5,prec$3,concat_fmt(rest$7,fmt2)];
         case 9:
          var rest$8=fmt1[2],pad$6=fmt1[1];
          return [9,pad$6,concat_fmt(rest$8,fmt2)];
         case 10:var rest$9=fmt1[1];return [10,concat_fmt(rest$9,fmt2)];
         case 11:
          var rest$10=fmt1[2],str=fmt1[1];
          return [11,str,concat_fmt(rest$10,fmt2)];
         case 12:
          var rest$11=fmt1[2],chr=fmt1[1];
          return [12,chr,concat_fmt(rest$11,fmt2)];
         case 13:
          var rest$12=fmt1[3],fmtty=fmt1[2],pad$7=fmt1[1];
          return [13,pad$7,fmtty,concat_fmt(rest$12,fmt2)];
         case 14:
          var rest$13=fmt1[3],fmtty$0=fmt1[2],pad$8=fmt1[1];
          return [14,pad$8,fmtty$0,concat_fmt(rest$13,fmt2)];
         case 15:var rest$14=fmt1[1];return [15,concat_fmt(rest$14,fmt2)];
         case 16:var rest$15=fmt1[1];return [16,concat_fmt(rest$15,fmt2)];
         case 17:
          var rest$16=fmt1[2],fmting_lit=fmt1[1];
          return [17,fmting_lit,concat_fmt(rest$16,fmt2)];
         case 18:
          var rest$17=fmt1[2],fmting_gen=fmt1[1];
          return [18,fmting_gen,concat_fmt(rest$17,fmt2)];
         case 19:var rest$18=fmt1[1];return [19,concat_fmt(rest$18,fmt2)];
         case 20:
          var rest$19=fmt1[3],char_set=fmt1[2],width_opt=fmt1[1];
          return [20,width_opt,char_set,concat_fmt(rest$19,fmt2)];
         case 21:
          var rest$20=fmt1[2],counter=fmt1[1];
          return [21,counter,concat_fmt(rest$20,fmt2)];
         case 22:var rest$21=fmt1[1];return [22,concat_fmt(rest$21,fmt2)];
         case 23:
          var rest$22=fmt1[2],ign=fmt1[1];
          return [23,ign,concat_fmt(rest$22,fmt2)];
         default:
          var rest$23=fmt1[3],f=fmt1[2],arity=fmt1[1];
          return [24,arity,f,concat_fmt(rest$23,fmt2)]}}
    function failwith(s){throw [0,Failure,s]}
    function invalid_arg(s){throw [0,Invalid_argument,s]}
    caml_fresh_oo_id(0);
    function max(x,y){return caml_greaterequal(x,y)?x:y}
    function abs(x){return 0 <= x?x:- x | 0}
    var max_int=2147483647;
    function _a_(s1,s2)
     {var
       l1=caml_ml_string_length(s1),
       l2=caml_ml_string_length(s2),
       s=caml_create_bytes(l1 + l2 | 0);
      caml_blit_string(s1,0,s,0,l1);
      caml_blit_string(s2,0,s,l1,l2);
      return s}
    function string_of_bool(b){return b?_b_:_c_}
    function append(l1,l2)
     {if(l1){var tl=l1[2],hd=l1[1];return [0,hd,append(tl,l2)]}return l2}
    caml_ml_open_descriptor_in(0);
    var
     stdout=caml_ml_open_descriptor_out(1),
     stderr=caml_ml_open_descriptor_out(2);
    function output_string(oc,s)
     {return caml_ml_output(oc,s,0,caml_ml_string_length(s))}
    function print_string(s){return output_string(stdout,s)}
    function prerr_string(s){return output_string(stderr,s)}
    function _f_(param,_or_)
     {var
       str2=_or_[2],
       fmt2=_or_[1],
       str1=param[2],
       fmt1=param[1],
       _os_=_a_(str1,_a_(_g_,str2));
      return [0,concat_fmt(fmt1,fmt2),_os_]}
    function do_at_exit(param)
     {function iter(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var l=param$0[2],a=param$0[1];
            try
             {caml_ml_flush(a)}
            catch(_oq_)
             {_oq_ = caml_wrap_exception(_oq_);
              if(_oq_[1] !== Sys_error)throw _oq_}
            var param$0=l;
            continue}
          return 0}}
      return iter(caml_ml_out_channels_list(0))}
    function exit(retcode){do_at_exit(0);return caml_sys_exit(retcode)}
    function length(l)
     {var len=0,param=l;
      for(;;)
       {if(param)
         {var param$0=param[2],len$0=len + 1 | 0,len=len$0,param=param$0;
          continue}
        return len}}
    function rev_append(l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {var l1$1=l1$0[2],a=l1$0[1],l2$1=[0,a,l2$0],l1$0=l1$1,l2$0=l2$1;
          continue}
        return l2$0}}
    function map(f,param)
     {if(param)
       {var l=param[2],a=param[1],r=caml_call1(f,a);return [0,r,map(f,l)]}
      return 0}
    function iter(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var param$1=param$0[2],a=param$0[1];
          caml_call1(f,a);
          var param$0=param$1;
          continue}
        return 0}}
    function chop(k,l)
     {var k$0=k,l$0=l;
      for(;;)
       {if(0 === k$0)return l$0;
        if(l$0){var l$1=l$0[2],k$1=k$0 - 1 | 0,k$0=k$1,l$0=l$1;continue}
        throw [0,Assert_failure,_h_]}}
    function make(n,c)
     {var s=caml_create_bytes(n);caml_fill_bytes(s,0,n,c);return s}
    function sub_string(b,ofs,len)
     {if(0 <= ofs)
       if(0 <= len)
        if(! ((caml_ml_bytes_length(b) - len | 0) < ofs))
         {var r=caml_create_bytes(len);
          caml_blit_bytes(b,ofs,r,0,len);
          return r}
      return invalid_arg(_o_)}
    function blit(s1,ofs1,s2,ofs2,len)
     {if(0 <= len)
       if(0 <= ofs1)
        if(! ((caml_ml_bytes_length(s1) - len | 0) < ofs1))
         if(0 <= ofs2)
          if(! ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
           return caml_blit_bytes(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_p_)}
    function blit$0(s1,ofs1,s2,ofs2,len)
     {if(0 <= len)
       if(0 <= ofs1)
        if(! ((caml_ml_string_length(s1) - len | 0) < ofs1))
         if(0 <= ofs2)
          if(! ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
           return caml_blit_string(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_q_)}
    function index_rec(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)throw Not_found;
        if(caml_string_unsafe_get(s,i$0) === c)return i$0;
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function contains_from(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i)
       if(! (l < i))
        try
         {index_rec(s,l,i,c);var _oo_=1;return _oo_}
        catch(_op_)
         {_op_ = caml_wrap_exception(_op_);
          if(_op_ === Not_found)return 0;
          throw _op_}
      return invalid_arg(_r_)}
    function contains(s,c){return contains_from(s,0,c)}
    var
     compare=caml_string_compare,
     match=caml_sys_get_config(0),
     os_type=match[1],
     max_array_length=caml_sys_const_max_wosize(0),
     max_string_length=(4 * max_array_length | 0) - 1 | 0;
    caml_fresh_oo_id(0);
    function iter$0(f,a)
     {var _om_=a.length - 1 - 1 | 0,_ol_=0;
      if(! (_om_ < 0))
       {var i=_ol_;
        for(;;)
         {caml_call1(f,a[i + 1]);
          var _on_=i + 1 | 0;
          if(_om_ !== i){var i=_on_;continue}
          break}}
      return 0}
    caml_fresh_oo_id(0);
    function _A_(Ord)
     {function height(param){if(param){var h=param[4];return h}return 0}
      function create(l,v,r)
       {if(l)var h=l[4],hl=h;else var hl=0;
        if(r)var h$0=r[4],hr=h$0;else var hr=0;
        var _ok_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
        return [0,l,v,r,_ok_]}
      function bal(l,v,r)
       {if(l)var h=l[4],hl=h;else var hl=0;
        if(r)var h$0=r[4],hr=h$0;else var hr=0;
        if((hr + 2 | 0) < hl)
         {if(l)
           {var lr=l[3],lv=l[2],ll=l[1],_of_=height(lr);
            if(_of_ <= height(ll))return create(ll,lv,create(lr,v,r));
            if(lr)
             {var lrr=lr[3],lrv=lr[2],lrl=lr[1],_og_=create(lrr,v,r);
              return create(create(ll,lv,lrl),lrv,_og_)}
            return invalid_arg(_s_)}
          return invalid_arg(_t_)}
        if((hl + 2 | 0) < hr)
         {if(r)
           {var rr=r[3],rv=r[2],rl=r[1],_oh_=height(rl);
            if(_oh_ <= height(rr))return create(create(l,v,rl),rv,rr);
            if(rl)
             {var rlr=rl[3],rlv=rl[2],rll=rl[1],_oi_=create(rlr,rv,rr);
              return create(create(l,v,rll),rlv,_oi_)}
            return invalid_arg(_u_)}
          return invalid_arg(_v_)}
        var _oj_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
        return [0,l,v,r,_oj_]}
      function add(x,t)
       {if(t)
         {var r=t[3],v=t[2],l=t[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)return t;
          if(0 <= c){var rr=add(x,r);return r === rr?t:bal(l,v,rr)}
          var ll=add(x,l);
          return l === ll?t:bal(ll,v,r)}
        return [0,0,x,0,1]}
      function singleton(x){return [0,0,x,0,1]}
      function add_min_element(x,param)
       {if(param)
         {var r=param[3],v=param[2],l=param[1];
          return bal(add_min_element(x,l),v,r)}
        return singleton(x)}
      function add_max_element(x,param)
       {if(param)
         {var r=param[3],v=param[2],l=param[1];
          return bal(l,v,add_max_element(x,r))}
        return singleton(x)}
      function join(l,v,r)
       {if(l)
         {if(r)
           {var
             rh=r[4],
             rr=r[3],
             rv=r[2],
             rl=r[1],
             lh=l[4],
             lr=l[3],
             lv=l[2],
             ll=l[1];
            return (rh + 2 | 0) < lh
                    ?bal(ll,lv,join(lr,v,r))
                    :(lh + 2 | 0) < rh?bal(join(l,v,rl),rv,rr):create(l,v,r)}
          return add_max_element(v,l)}
        return add_min_element(v,r)}
      function min_elt(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _oe_=param$0[1];
            if(_oe_){var param$0=_oe_;continue}
            var v=param$0[2];
            return v}
          throw Not_found}}
      function min_elt_opt(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _od_=param$0[1];
            if(_od_){var param$0=_od_;continue}
            var v=param$0[2];
            return [0,v]}
          return 0}}
      function max_elt(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _ob_=param$0[3],_oc_=param$0[2];
            if(_ob_){var param$0=_ob_;continue}
            return _oc_}
          throw Not_found}}
      function max_elt_opt(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _n$_=param$0[3],_oa_=param$0[2];
            if(_n$_){var param$0=_n$_;continue}
            return [0,_oa_]}
          return 0}}
      function remove_min_elt(param)
       {if(param)
         {var _n__=param[1];
          if(_n__)
           {var r=param[3],v=param[2];return bal(remove_min_elt(_n__),v,r)}
          var r$0=param[3];
          return r$0}
        return invalid_arg(_w_)}
      function concat(t,match)
       {if(t)
         {if(match)
           {var _n9_=remove_min_elt(match);return join(t,min_elt(match),_n9_)}
          return t}
        return match}
      function split(x,param)
       {if(param)
         {var r=param[3],v=param[2],l=param[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)return [0,l,1,r];
          if(0 <= c)
           {var match=split(x,r),rr=match[3],pres=match[2],lr=match[1];
            return [0,join(l,v,lr),pres,rr]}
          var
           match$0=split(x,l),
           rl=match$0[3],
           pres$0=match$0[2],
           ll=match$0[1];
          return [0,ll,pres$0,join(rl,v,r)]}
        return _x_}
      var empty=0;
      function is_empty(param){return param?0:1}
      function mem(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[3],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v),
             _n8_=0 === c?1:0;
            if(_n8_)return _n8_;
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          return 0}}
      function remove(x,t)
       {if(t)
         {var r=t[3],v=t[2],l=t[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)
           {if(l)
             {if(r){var _n7_=remove_min_elt(r);return bal(l,min_elt(r),_n7_)}
              return l}
            return r}
          if(0 <= c){var rr=remove(x,r);return r === rr?t:bal(l,v,rr)}
          var ll=remove(x,l);
          return l === ll?t:bal(ll,v,r)}
        return 0}
      function union(t1,match)
       {if(t1)
         {if(match)
           {var
             h2=match[4],
             r2=match[3],
             v2=match[2],
             l2=match[1],
             h1=t1[4],
             r1=t1[3],
             v1=t1[2],
             l1=t1[1];
            if(h2 <= h1)
             {if(1 === h2)return add(v2,t1);
              var
               match$0=split(v1,match),
               r2$0=match$0[3],
               l2$0=match$0[1],
               _n5_=union(r1,r2$0);
              return join(union(l1,l2$0),v1,_n5_)}
            if(1 === h1)return add(v1,match);
            var
             match$1=split(v2,t1),
             r1$0=match$1[3],
             l1$0=match$1[1],
             _n6_=union(r1$0,r2);
            return join(union(l1$0,l2),v2,_n6_)}
          return t1}
        return match}
      function inter(s1,match)
       {if(s1)
         {if(match)
           {var r1=s1[3],v1=s1[2],l1=s1[1],_n1_=split(v1,match),_n2_=_n1_[1];
            if(0 === _n1_[2])
             {var r2=_n1_[3],_n3_=inter(r1,r2);
              return concat(inter(l1,_n2_),_n3_)}
            var r2$0=_n1_[3],_n4_=inter(r1,r2$0);
            return join(inter(l1,_n2_),v1,_n4_)}
          return 0}
        return 0}
      function diff(t1,match)
       {if(t1)
         {if(match)
           {var r1=t1[3],v1=t1[2],l1=t1[1],_nX_=split(v1,match),_nY_=_nX_[1];
            if(0 === _nX_[2])
             {var r2=_nX_[3],_nZ_=diff(r1,r2);
              return join(diff(l1,_nY_),v1,_nZ_)}
            var r2$0=_nX_[3],_n0_=diff(r1,r2$0);
            return concat(diff(l1,_nY_),_n0_)}
          return t1}
        return 0}
      function cons_enum(s,e)
       {var s$0=s,e$0=e;
        for(;;)
         {if(s$0)
           {var r=s$0[3],v=s$0[2],s$1=s$0[1],e$1=[0,v,r,e$0],s$0=s$1,e$0=e$1;
            continue}
          return e$0}}
      function compare(s1,s2)
       {var e2$2=cons_enum(s2,0),e1$2=cons_enum(s1,0),e1=e1$2,e2=e2$2;
        for(;;)
         {if(e1)
           {if(e2)
             {var
               e2$0=e2[3],
               r2=e2[2],
               v2=e2[1],
               e1$0=e1[3],
               r1=e1[2],
               v1=e1[1],
               c=caml_call2(Ord[1],v1,v2);
              if(0 === c)
               {var
                 e2$1=cons_enum(r2,e2$0),
                 e1$1=cons_enum(r1,e1$0),
                 e1=e1$1,
                 e2=e2$1;
                continue}
              return c}
            return 1}
          return e2?-1:0}}
      function equal(s1,s2){return 0 === compare(s1,s2)?1:0}
      function subset(s1,s2)
       {var s1$0=s1,s2$0=s2;
        for(;;)
         {if(s1$0)
           {if(s2$0)
             {var
               r2=s2$0[3],
               v2=s2$0[2],
               l2=s2$0[1],
               r1=s1$0[3],
               v1=s1$0[2],
               l1=s1$0[1],
               c=caml_call2(Ord[1],v1,v2);
              if(0 === c)
               {var _nU_=subset(l1,l2);
                if(_nU_){var s1$0=r1,s2$0=r2;continue}
                return _nU_}
              if(0 <= c)
               {var _nV_=subset([0,0,v1,r1,0],r2);
                if(_nV_){var s1$0=l1;continue}
                return _nV_}
              var _nW_=subset([0,l1,v1,0,0],l2);
              if(_nW_){var s1$0=r1;continue}
              return _nW_}
            return 0}
          return 1}}
      function iter(f,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var param$1=param$0[3],v=param$0[2],l=param$0[1];
            iter(f,l);
            caml_call1(f,v);
            var param$0=param$1;
            continue}
          return 0}}
      function fold(f,s,accu)
       {var s$0=s,accu$0=accu;
        for(;;)
         {if(s$0)
           {var
             s$1=s$0[3],
             v=s$0[2],
             l=s$0[1],
             accu$1=caml_call2(f,v,fold(f,l,accu$0)),
             s$0=s$1,
             accu$0=accu$1;
            continue}
          return accu$0}}
      function for_all(p,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var r=param$0[3],v=param$0[2],l=param$0[1],_nR_=caml_call1(p,v);
            if(_nR_)
             {var _nS_=for_all(p,l);
              if(_nS_){var param$0=r;continue}
              var _nT_=_nS_}
            else
             var _nT_=_nR_;
            return _nT_}
          return 1}}
      function exists(p,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var r=param$0[3],v=param$0[2],l=param$0[1],_nO_=caml_call1(p,v);
            if(_nO_)
             var _nP_=_nO_;
            else
             {var _nQ_=exists(p,l);
              if(! _nQ_){var param$0=r;continue}
              var _nP_=_nQ_}
            return _nP_}
          return 0}}
      function filter(p,t)
       {if(t)
         {var
           r=t[3],
           v=t[2],
           l=t[1],
           l$0=filter(p,l),
           pv=caml_call1(p,v),
           r$0=filter(p,r);
          if(pv){if(l === l$0)if(r === r$0)return t;return join(l$0,v,r$0)}
          return concat(l$0,r$0)}
        return 0}
      function partition(p,param)
       {if(param)
         {var
           r=param[3],
           v=param[2],
           l=param[1],
           match=partition(p,l),
           lf=match[2],
           lt=match[1],
           pv=caml_call1(p,v),
           match$0=partition(p,r),
           rf=match$0[2],
           rt=match$0[1];
          if(pv){var _nM_=concat(lf,rf);return [0,join(lt,v,rt),_nM_]}
          var _nN_=join(lf,v,rf);
          return [0,concat(lt,rt),_nN_]}
        return _y_}
      function cardinal(param)
       {if(param)
         {var r=param[3],l=param[1],_nL_=cardinal(r);
          return (cardinal(l) + 1 | 0) + _nL_ | 0}
        return 0}
      function elements_aux(accu,param)
       {var accu$0=accu,param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[3],
             v=param$0[2],
             param$1=param$0[1],
             accu$1=[0,v,elements_aux(accu$0,r)],
             accu$0=accu$1,
             param$0=param$1;
            continue}
          return accu$0}}
      function elements(s){return elements_aux(0,s)}
      function find(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[3],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v);
            if(0 === c)return v;
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          throw Not_found}}
      function find_first(f,param$0)
       {var param$1=param$0;
        for(;;)
         {if(param$1)
           {var r$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
            if(caml_call1(f,v$0))
             {var v0=v$0,param=l$0;
              for(;;)
               {if(param)
                 {var r=param[3],v=param[2],l=param[1];
                  if(caml_call1(f,v)){var v0=v,param=l;continue}
                  var param=r;
                  continue}
                return v0}}
            var param$1=r$0;
            continue}
          throw Not_found}}
      function find_first_opt(f,param$0)
       {var param$1=param$0;
        for(;;)
         {if(param$1)
           {var r$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
            if(caml_call1(f,v$0))
             {var v0=v$0,param=l$0;
              for(;;)
               {if(param)
                 {var r=param[3],v=param[2],l=param[1];
                  if(caml_call1(f,v)){var v0=v,param=l;continue}
                  var param=r;
                  continue}
                return [0,v0]}}
            var param$1=r$0;
            continue}
          return 0}}
      function find_last(f,param$0)
       {var param$1=param$0;
        for(;;)
         {if(param$1)
           {var r$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
            if(caml_call1(f,v$0))
             {var v0=v$0,param=r$0;
              for(;;)
               {if(param)
                 {var r=param[3],v=param[2],l=param[1];
                  if(caml_call1(f,v)){var v0=v,param=r;continue}
                  var param=l;
                  continue}
                return v0}}
            var param$1=l$0;
            continue}
          throw Not_found}}
      function find_last_opt(f,param$0)
       {var param$1=param$0;
        for(;;)
         {if(param$1)
           {var r$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
            if(caml_call1(f,v$0))
             {var v0=v$0,param=r$0;
              for(;;)
               {if(param)
                 {var r=param[3],v=param[2],l=param[1];
                  if(caml_call1(f,v)){var v0=v,param=r;continue}
                  var param=l;
                  continue}
                return [0,v0]}}
            var param$1=l$0;
            continue}
          return 0}}
      function find_opt(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[3],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v);
            if(0 === c)return [0,v];
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          return 0}}
      function map(f,t)
       {if(t)
         {var
           r=t[3],
           v=t[2],
           l=t[1],
           l$0=map(f,l),
           v$0=caml_call1(f,v),
           r$0=map(f,r);
          if(l === l$0)if(v === v$0)if(r === r$0)return t;
          if(0 === l$0)
           var switch$0=0;
          else
           var
            _nK_=max_elt(l$0),
            switch$0=0 <= caml_call2(Ord[1],_nK_,v$0)?1:0;
          if(! switch$0)
           {if(0 === r$0)
             var switch$1=0;
            else
             var
              _nJ_=min_elt(r$0),
              switch$1=0 <= caml_call2(Ord[1],v$0,_nJ_)?1:0;
            if(! switch$1)return join(l$0,v$0,r$0)}
          return union(l$0,add(v$0,r$0))}
        return 0}
      function of_list(l)
       {if(l)
         {var _nq_=l[2],_nr_=l[1];
          if(_nq_)
           {var _ns_=_nq_[2],_nt_=_nq_[1];
            if(_ns_)
             {var _nu_=_ns_[2],_nv_=_ns_[1];
              if(_nu_)
               {var _nw_=_nu_[2],_nx_=_nu_[1];
                if(_nw_)
                 {if(_nw_[2])
                   {var
                     _ny_=Ord[1],
                     sort=
                      function(n,l)
                       {if(2 === n)
                         {if(l)
                           {var _nG_=l[2];
                            if(_nG_)
                             {var x2=_nG_[1],x1=l[1],c$0=caml_call2(_ny_,x1,x2);
                              return 0 === c$0
                                      ?[0,x1,0]
                                      :0 <= c$0?[0,x2,[0,x1,0]]:[0,x1,[0,x2,0]]}}}
                        else
                         if(3 === n)
                          if(l)
                           {var _nH_=l[2];
                            if(_nH_)
                             {var _nI_=_nH_[2];
                              if(_nI_)
                               {var
                                 x3=_nI_[1],
                                 x2$0=_nH_[1],
                                 x1$0=l[1],
                                 c$1=caml_call2(_ny_,x1$0,x2$0);
                                if(0 === c$1)
                                 {var c$2=caml_call2(_ny_,x2$0,x3);
                                  return 0 === c$2
                                          ?[0,x2$0,0]
                                          :0 <= c$2?[0,x3,[0,x2$0,0]]:[0,x2$0,[0,x3,0]]}
                                if(0 <= c$1)
                                 {var c$3=caml_call2(_ny_,x1$0,x3);
                                  if(0 === c$3)return [0,x2$0,[0,x1$0,0]];
                                  if(0 <= c$3)
                                   {var c$4=caml_call2(_ny_,x2$0,x3);
                                    return 0 === c$4
                                            ?[0,x2$0,[0,x1$0,0]]
                                            :0 <= c$4
                                              ?[0,x3,[0,x2$0,[0,x1$0,0]]]
                                              :[0,x2$0,[0,x3,[0,x1$0,0]]]}
                                  return [0,x2$0,[0,x1$0,[0,x3,0]]]}
                                var c$5=caml_call2(_ny_,x2$0,x3);
                                if(0 === c$5)return [0,x1$0,[0,x2$0,0]];
                                if(0 <= c$5)
                                 {var c$6=caml_call2(_ny_,x1$0,x3);
                                  return 0 === c$6
                                          ?[0,x1$0,[0,x2$0,0]]
                                          :0 <= c$6
                                            ?[0,x3,[0,x1$0,[0,x2$0,0]]]
                                            :[0,x1$0,[0,x3,[0,x2$0,0]]]}
                                return [0,x1$0,[0,x2$0,[0,x3,0]]]}}}
                        var
                         n1=n >> 1,
                         n2=n - n1 | 0,
                         l2$0=chop(n1,l),
                         l1$0=rev_sort(n1,l),
                         l2$1=rev_sort(n2,l2$0),
                         l1=l1$0,
                         l2=l2$1,
                         accu=0;
                        for(;;)
                         {if(l1)
                           {if(l2)
                             {var
                               t2=l2[2],
                               h2=l2[1],
                               t1=l1[2],
                               h1=l1[1],
                               c=caml_call2(_ny_,h1,h2);
                              if(0 === c)
                               {var accu$0=[0,h1,accu],l1=t1,l2=t2,accu=accu$0;continue}
                              if(0 < c){var accu$1=[0,h1,accu],l1=t1,accu=accu$1;continue}
                              var accu$2=[0,h2,accu],l2=t2,accu=accu$2;
                              continue}
                            return rev_append(l1,accu)}
                          return rev_append(l2,accu)}},
                     rev_sort=
                      function(n,l)
                       {if(2 === n)
                         {if(l)
                           {var _nD_=l[2];
                            if(_nD_)
                             {var x2=_nD_[1],x1=l[1],c$0=caml_call2(_ny_,x1,x2);
                              return 0 === c$0
                                      ?[0,x1,0]
                                      :0 < c$0?[0,x1,[0,x2,0]]:[0,x2,[0,x1,0]]}}}
                        else
                         if(3 === n)
                          if(l)
                           {var _nE_=l[2];
                            if(_nE_)
                             {var _nF_=_nE_[2];
                              if(_nF_)
                               {var
                                 x3=_nF_[1],
                                 x2$0=_nE_[1],
                                 x1$0=l[1],
                                 c$1=caml_call2(_ny_,x1$0,x2$0);
                                if(0 === c$1)
                                 {var c$2=caml_call2(_ny_,x2$0,x3);
                                  return 0 === c$2
                                          ?[0,x2$0,0]
                                          :0 < c$2?[0,x2$0,[0,x3,0]]:[0,x3,[0,x2$0,0]]}
                                if(0 < c$1)
                                 {var c$3=caml_call2(_ny_,x2$0,x3);
                                  if(0 === c$3)return [0,x1$0,[0,x2$0,0]];
                                  if(0 < c$3)return [0,x1$0,[0,x2$0,[0,x3,0]]];
                                  var c$4=caml_call2(_ny_,x1$0,x3);
                                  return 0 === c$4
                                          ?[0,x1$0,[0,x2$0,0]]
                                          :0 < c$4
                                            ?[0,x1$0,[0,x3,[0,x2$0,0]]]
                                            :[0,x3,[0,x1$0,[0,x2$0,0]]]}
                                var c$5=caml_call2(_ny_,x1$0,x3);
                                if(0 === c$5)return [0,x2$0,[0,x1$0,0]];
                                if(0 < c$5)return [0,x2$0,[0,x1$0,[0,x3,0]]];
                                var c$6=caml_call2(_ny_,x2$0,x3);
                                return 0 === c$6
                                        ?[0,x2$0,[0,x1$0,0]]
                                        :0 < c$6
                                          ?[0,x2$0,[0,x3,[0,x1$0,0]]]
                                          :[0,x3,[0,x2$0,[0,x1$0,0]]]}}}
                        var
                         n1=n >> 1,
                         n2=n - n1 | 0,
                         l2$0=chop(n1,l),
                         l1$0=sort(n1,l),
                         l2$1=sort(n2,l2$0),
                         l1=l1$0,
                         l2=l2$1,
                         accu=0;
                        for(;;)
                         {if(l1)
                           {if(l2)
                             {var
                               t2=l2[2],
                               h2=l2[1],
                               t1=l1[2],
                               h1=l1[1],
                               c=caml_call2(_ny_,h1,h2);
                              if(0 === c)
                               {var accu$0=[0,h1,accu],l1=t1,l2=t2,accu=accu$0;continue}
                              if(0 <= c)
                               {var accu$1=[0,h2,accu],l2=t2,accu=accu$1;continue}
                              var accu$2=[0,h1,accu],l1=t1,accu=accu$2;
                              continue}
                            return rev_append(l1,accu)}
                          return rev_append(l2,accu)}},
                     len=length(l),
                     _nz_=2 <= len?sort(len,l):l,
                     sub=
                      function(n,l)
                       {if(! (3 < n >>> 0))
                         switch(n)
                          {case 0:return [0,0,l];
                           case 1:
                            if(l){var l$3=l[2],x0=l[1];return [0,[0,0,x0,0,1],l$3]}
                            break;
                           case 2:
                            if(l)
                             {var _nA_=l[2];
                              if(_nA_)
                               {var l$4=_nA_[2],x1=_nA_[1],x0$0=l[1];
                                return [0,[0,[0,0,x0$0,0,1],x1,0,2],l$4]}}
                            break;
                           default:
                            if(l)
                             {var _nB_=l[2];
                              if(_nB_)
                               {var _nC_=_nB_[2];
                                if(_nC_)
                                 {var l$5=_nC_[2],x2=_nC_[1],x1$0=_nB_[1],x0$1=l[1];
                                  return [0,[0,[0,0,x0$1,0,1],x1$0,[0,0,x2,0,1],2],l$5]}}}}
                        var nl=n / 2 | 0,match=sub(nl,l),l$0=match[2],left=match[1];
                        if(l$0)
                         {var
                           l$1=l$0[2],
                           mid=l$0[1],
                           match$0=sub((n - nl | 0) - 1 | 0,l$1),
                           l$2=match$0[2],
                           right=match$0[1];
                          return [0,create(left,mid,right),l$2]}
                        throw [0,Assert_failure,_z_]};
                    return sub(length(_nz_),_nz_)[1]}
                  var x4=_nw_[1];
                  return add(x4,add(_nx_,add(_nv_,add(_nt_,singleton(_nr_)))))}
                return add(_nx_,add(_nv_,add(_nt_,singleton(_nr_))))}
              return add(_nv_,add(_nt_,singleton(_nr_)))}
            return add(_nt_,singleton(_nr_))}
          return singleton(_nr_)}
        return empty}
      return [0,
              empty,
              is_empty,
              mem,
              add,
              singleton,
              remove,
              union,
              inter,
              diff,
              compare,
              equal,
              subset,
              iter,
              map,
              fold,
              for_all,
              exists,
              filter,
              partition,
              cardinal,
              elements,
              min_elt,
              min_elt_opt,
              max_elt,
              max_elt_opt,
              min_elt,
              min_elt_opt,
              split,
              find,
              find_opt,
              find_first,
              find_first_opt,
              find_last,
              find_last_opt,
              of_list]}
    function _J_(Ord)
     {function height(param){if(param){var h=param[5];return h}return 0}
      function create(l,x,d,r)
       {var hl=height(l),hr=height(r),_np_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
        return [0,l,x,d,r,_np_]}
      function singleton(x,d){return [0,0,x,d,0,1]}
      function bal(l,x,d,r)
       {if(l)var h=l[5],hl=h;else var hl=0;
        if(r)var h$0=r[5],hr=h$0;else var hr=0;
        if((hr + 2 | 0) < hl)
         {if(l)
           {var lr=l[4],ld=l[3],lv=l[2],ll=l[1],_nk_=height(lr);
            if(_nk_ <= height(ll))return create(ll,lv,ld,create(lr,x,d,r));
            if(lr)
             {var
               lrr=lr[4],
               lrd=lr[3],
               lrv=lr[2],
               lrl=lr[1],
               _nl_=create(lrr,x,d,r);
              return create(create(ll,lv,ld,lrl),lrv,lrd,_nl_)}
            return invalid_arg(_B_)}
          return invalid_arg(_C_)}
        if((hl + 2 | 0) < hr)
         {if(r)
           {var rr=r[4],rd=r[3],rv=r[2],rl=r[1],_nm_=height(rl);
            if(_nm_ <= height(rr))return create(create(l,x,d,rl),rv,rd,rr);
            if(rl)
             {var
               rlr=rl[4],
               rld=rl[3],
               rlv=rl[2],
               rll=rl[1],
               _nn_=create(rlr,rv,rd,rr);
              return create(create(l,x,d,rll),rlv,rld,_nn_)}
            return invalid_arg(_D_)}
          return invalid_arg(_E_)}
        var _no_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
        return [0,l,x,d,r,_no_]}
      var empty=0;
      function is_empty(param){return param?0:1}
      function add(x,data,m)
       {if(m)
         {var h=m[5],r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)return d === data?m:[0,l,x,data,r,h];
          if(0 <= c){var rr=add(x,data,r);return r === rr?m:bal(l,v,d,rr)}
          var ll=add(x,data,l);
          return l === ll?m:bal(ll,v,d,r)}
        return [0,0,x,data,0,1]}
      function find(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v);
            if(0 === c)return d;
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          throw Not_found}}
      function find_first(f,param$0)
       {var param$1=param$0;
        for(;;)
         {if(param$1)
           {var r$0=param$1[4],d$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
            if(caml_call1(f,v$0))
             {var v0=v$0,d0=d$0,param=l$0;
              for(;;)
               {if(param)
                 {var r=param[4],d=param[3],v=param[2],l=param[1];
                  if(caml_call1(f,v)){var v0=v,d0=d,param=l;continue}
                  var param=r;
                  continue}
                return [0,v0,d0]}}
            var param$1=r$0;
            continue}
          throw Not_found}}
      function find_first_opt(f,param$0)
       {var param$1=param$0;
        for(;;)
         {if(param$1)
           {var r$0=param$1[4],d$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
            if(caml_call1(f,v$0))
             {var v0=v$0,d0=d$0,param=l$0;
              for(;;)
               {if(param)
                 {var r=param[4],d=param[3],v=param[2],l=param[1];
                  if(caml_call1(f,v)){var v0=v,d0=d,param=l;continue}
                  var param=r;
                  continue}
                return [0,[0,v0,d0]]}}
            var param$1=r$0;
            continue}
          return 0}}
      function find_last(f,param$0)
       {var param$1=param$0;
        for(;;)
         {if(param$1)
           {var r$0=param$1[4],d$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
            if(caml_call1(f,v$0))
             {var v0=v$0,d0=d$0,param=r$0;
              for(;;)
               {if(param)
                 {var r=param[4],d=param[3],v=param[2],l=param[1];
                  if(caml_call1(f,v)){var v0=v,d0=d,param=r;continue}
                  var param=l;
                  continue}
                return [0,v0,d0]}}
            var param$1=l$0;
            continue}
          throw Not_found}}
      function find_last_opt(f,param$0)
       {var param$1=param$0;
        for(;;)
         {if(param$1)
           {var r$0=param$1[4],d$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
            if(caml_call1(f,v$0))
             {var v0=v$0,d0=d$0,param=r$0;
              for(;;)
               {if(param)
                 {var r=param[4],d=param[3],v=param[2],l=param[1];
                  if(caml_call1(f,v)){var v0=v,d0=d,param=r;continue}
                  var param=l;
                  continue}
                return [0,[0,v0,d0]]}}
            var param$1=l$0;
            continue}
          return 0}}
      function find_opt(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v);
            if(0 === c)return [0,d];
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          return 0}}
      function mem(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v),
             _nj_=0 === c?1:0;
            if(_nj_)return _nj_;
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          return 0}}
      function min_binding(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _ni_=param$0[1];
            if(_ni_){var param$0=_ni_;continue}
            var d=param$0[3],v=param$0[2];
            return [0,v,d]}
          throw Not_found}}
      function min_binding_opt(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _nh_=param$0[1];
            if(_nh_){var param$0=_nh_;continue}
            var d=param$0[3],v=param$0[2];
            return [0,[0,v,d]]}
          return 0}}
      function max_binding(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _ne_=param$0[4],_nf_=param$0[3],_ng_=param$0[2];
            if(_ne_){var param$0=_ne_;continue}
            return [0,_ng_,_nf_]}
          throw Not_found}}
      function max_binding_opt(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _nb_=param$0[4],_nc_=param$0[3],_nd_=param$0[2];
            if(_nb_){var param$0=_nb_;continue}
            return [0,[0,_nd_,_nc_]]}
          return 0}}
      function remove_min_binding(param)
       {if(param)
         {var _na_=param[1];
          if(_na_)
           {var r=param[4],d=param[3],v=param[2];
            return bal(remove_min_binding(_na_),v,d,r)}
          var r$0=param[4];
          return r$0}
        return invalid_arg(_F_)}
      function _mV_(t,match)
       {if(t)
         {if(match)
           {var match$0=min_binding(match),d=match$0[2],x=match$0[1];
            return bal(t,x,d,remove_min_binding(match))}
          return t}
        return match}
      function remove(x,m)
       {if(m)
         {var r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)return _mV_(l,r);
          if(0 <= c){var rr=remove(x,r);return r === rr?m:bal(l,v,d,rr)}
          var ll=remove(x,l);
          return l === ll?m:bal(ll,v,d,r)}
        return 0}
      function update(x,f,m)
       {if(m)
         {var h=m[5],r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)
           {var match=caml_call1(f,[0,d]);
            if(match){var data=match[1];return d === data?m:[0,l,x,data,r,h]}
            return _mV_(l,r)}
          if(0 <= c){var rr=update(x,f,r);return r === rr?m:bal(l,v,d,rr)}
          var ll=update(x,f,l);
          return l === ll?m:bal(ll,v,d,r)}
        var match$0=caml_call1(f,0);
        if(match$0){var data$0=match$0[1];return [0,0,x,data$0,0,1]}
        return 0}
      function iter(f,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var param$1=param$0[4],d=param$0[3],v=param$0[2],l=param$0[1];
            iter(f,l);
            caml_call2(f,v,d);
            var param$0=param$1;
            continue}
          return 0}}
      function map(f,param)
       {if(param)
         {var
           h=param[5],
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           l$0=map(f,l),
           d$0=caml_call1(f,d),
           r$0=map(f,r);
          return [0,l$0,v,d$0,r$0,h]}
        return 0}
      function mapi(f,param)
       {if(param)
         {var
           h=param[5],
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           l$0=mapi(f,l),
           d$0=caml_call2(f,v,d),
           r$0=mapi(f,r);
          return [0,l$0,v,d$0,r$0,h]}
        return 0}
      function fold(f,m,accu)
       {var m$0=m,accu$0=accu;
        for(;;)
         {if(m$0)
           {var
             m$1=m$0[4],
             d=m$0[3],
             v=m$0[2],
             l=m$0[1],
             accu$1=caml_call3(f,v,d,fold(f,l,accu$0)),
             m$0=m$1,
             accu$0=accu$1;
            continue}
          return accu$0}}
      function for_all(p,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             _m9_=caml_call2(p,v,d);
            if(_m9_)
             {var _m__=for_all(p,l);
              if(_m__){var param$0=r;continue}
              var _m$_=_m__}
            else
             var _m$_=_m9_;
            return _m$_}
          return 1}}
      function exists(p,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             _m6_=caml_call2(p,v,d);
            if(_m6_)
             var _m7_=_m6_;
            else
             {var _m8_=exists(p,l);
              if(! _m8_){var param$0=r;continue}
              var _m7_=_m8_}
            return _m7_}
          return 0}}
      function add_min_binding(k,x,param)
       {if(param)
         {var r=param[4],d=param[3],v=param[2],l=param[1];
          return bal(add_min_binding(k,x,l),v,d,r)}
        return singleton(k,x)}
      function add_max_binding(k,x,param)
       {if(param)
         {var r=param[4],d=param[3],v=param[2],l=param[1];
          return bal(l,v,d,add_max_binding(k,x,r))}
        return singleton(k,x)}
      function join(l,v,d,r)
       {if(l)
         {if(r)
           {var
             rh=r[5],
             rr=r[4],
             rd=r[3],
             rv=r[2],
             rl=r[1],
             lh=l[5],
             lr=l[4],
             ld=l[3],
             lv=l[2],
             ll=l[1];
            return (rh + 2 | 0) < lh
                    ?bal(ll,lv,ld,join(lr,v,d,r))
                    :(lh + 2 | 0) < rh
                      ?bal(join(l,v,d,rl),rv,rd,rr)
                      :create(l,v,d,r)}
          return add_max_binding(v,d,l)}
        return add_min_binding(v,d,r)}
      function concat(t,match)
       {if(t)
         {if(match)
           {var match$0=min_binding(match),d=match$0[2],x=match$0[1];
            return join(t,x,d,remove_min_binding(match))}
          return t}
        return match}
      function concat_or_join(t1,v,d,t2)
       {if(d){var d$0=d[1];return join(t1,v,d$0,t2)}return concat(t1,t2)}
      function split(x,param)
       {if(param)
         {var
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           c=caml_call2(Ord[1],x,v);
          if(0 === c)return [0,l,[0,d],r];
          if(0 <= c)
           {var match=split(x,r),rr=match[3],pres=match[2],lr=match[1];
            return [0,join(l,v,d,lr),pres,rr]}
          var
           match$0=split(x,l),
           rl=match$0[3],
           pres$0=match$0[2],
           ll=match$0[1];
          return [0,ll,pres$0,join(rl,v,d,r)]}
        return _G_}
      function merge(f,s1,s2)
       {if(s1)
         {var h1=s1[5],r1=s1[4],d1=s1[3],v1=s1[2],l1=s1[1];
          if(height(s2) <= h1)
           {var
             match=split(v1,s2),
             r2=match[3],
             d2=match[2],
             l2=match[1],
             _m2_=merge(f,r1,r2),
             _m3_=caml_call3(f,v1,[0,d1],d2);
            return concat_or_join(merge(f,l1,l2),v1,_m3_,_m2_)}}
        else
         if(! s2)return 0;
        if(s2)
         {var
           r2$0=s2[4],
           d2$0=s2[3],
           v2=s2[2],
           l2$0=s2[1],
           match$0=split(v2,s1),
           r1$0=match$0[3],
           d1$0=match$0[2],
           l1$0=match$0[1],
           _m4_=merge(f,r1$0,r2$0),
           _m5_=caml_call3(f,v2,d1$0,[0,d2$0]);
          return concat_or_join(merge(f,l1$0,l2$0),v2,_m5_,_m4_)}
        throw [0,Assert_failure,_H_]}
      function union(f,s1,s2)
       {if(s1)
         {if(s2)
           {var
             h2=s2[5],
             r2=s2[4],
             d2=s2[3],
             v2=s2[2],
             l2=s2[1],
             h1=s1[5],
             r1=s1[4],
             d1=s1[3],
             v1=s1[2],
             l1=s1[1];
            if(h2 <= h1)
             {var
               match=split(v1,s2),
               r2$0=match[3],
               d2$0=match[2],
               l2$0=match[1],
               l=union(f,l1,l2$0),
               r=union(f,r1,r2$0);
              if(d2$0)
               {var d2$1=d2$0[1];
                return concat_or_join(l,v1,caml_call3(f,v1,d1,d2$1),r)}
              return join(l,v1,d1,r)}
            var
             match$0=split(v2,s1),
             r1$0=match$0[3],
             d1$0=match$0[2],
             l1$0=match$0[1],
             l$0=union(f,l1$0,l2),
             r$0=union(f,r1$0,r2);
            if(d1$0)
             {var d1$1=d1$0[1];
              return concat_or_join(l$0,v2,caml_call3(f,v2,d1$1,d2),r$0)}
            return join(l$0,v2,d2,r$0)}
          var s=s1}
        else
         var s=s2;
        return s}
      function filter(p,m)
       {if(m)
         {var
           r=m[4],
           d=m[3],
           v=m[2],
           l=m[1],
           l$0=filter(p,l),
           pvd=caml_call2(p,v,d),
           r$0=filter(p,r);
          if(pvd){if(l === l$0)if(r === r$0)return m;return join(l$0,v,d,r$0)}
          return concat(l$0,r$0)}
        return 0}
      function partition(p,param)
       {if(param)
         {var
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           match=partition(p,l),
           lf=match[2],
           lt=match[1],
           pvd=caml_call2(p,v,d),
           match$0=partition(p,r),
           rf=match$0[2],
           rt=match$0[1];
          if(pvd){var _m0_=concat(lf,rf);return [0,join(lt,v,d,rt),_m0_]}
          var _m1_=join(lf,v,d,rf);
          return [0,concat(lt,rt),_m1_]}
        return _I_}
      function cons_enum(m,e)
       {var m$0=m,e$0=e;
        for(;;)
         {if(m$0)
           {var
             r=m$0[4],
             d=m$0[3],
             v=m$0[2],
             m$1=m$0[1],
             e$1=[0,v,d,r,e$0],
             m$0=m$1,
             e$0=e$1;
            continue}
          return e$0}}
      function compare(cmp,m1,m2)
       {var e2$2=cons_enum(m2,0),e1$2=cons_enum(m1,0),e1=e1$2,e2=e2$2;
        for(;;)
         {if(e1)
           {if(e2)
             {var
               e2$0=e2[4],
               r2=e2[3],
               d2=e2[2],
               v2=e2[1],
               e1$0=e1[4],
               r1=e1[3],
               d1=e1[2],
               v1=e1[1],
               c=caml_call2(Ord[1],v1,v2);
              if(0 === c)
               {var c$0=caml_call2(cmp,d1,d2);
                if(0 === c$0)
                 {var
                   e2$1=cons_enum(r2,e2$0),
                   e1$1=cons_enum(r1,e1$0),
                   e1=e1$1,
                   e2=e2$1;
                  continue}
                return c$0}
              return c}
            return 1}
          return e2?-1:0}}
      function equal(cmp,m1,m2)
       {var e2$2=cons_enum(m2,0),e1$2=cons_enum(m1,0),e1=e1$2,e2=e2$2;
        for(;;)
         {if(e1)
           {if(e2)
             {var
               e2$0=e2[4],
               r2=e2[3],
               d2=e2[2],
               v2=e2[1],
               e1$0=e1[4],
               r1=e1[3],
               d1=e1[2],
               v1=e1[1],
               _mX_=0 === caml_call2(Ord[1],v1,v2)?1:0;
              if(_mX_)
               {var _mY_=caml_call2(cmp,d1,d2);
                if(_mY_)
                 {var
                   e2$1=cons_enum(r2,e2$0),
                   e1$1=cons_enum(r1,e1$0),
                   e1=e1$1,
                   e2=e2$1;
                  continue}
                var _mZ_=_mY_}
              else
               var _mZ_=_mX_;
              return _mZ_}
            return 0}
          return e2?0:1}}
      function cardinal(param)
       {if(param)
         {var r=param[4],l=param[1],_mW_=cardinal(r);
          return (cardinal(l) + 1 | 0) + _mW_ | 0}
        return 0}
      function bindings_aux(accu,param)
       {var accu$0=accu,param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             param$1=param$0[1],
             accu$1=[0,[0,v,d],bindings_aux(accu$0,r)],
             accu$0=accu$1,
             param$0=param$1;
            continue}
          return accu$0}}
      function bindings(s){return bindings_aux(0,s)}
      return [0,
              empty,
              is_empty,
              mem,
              add,
              update,
              singleton,
              remove,
              merge,
              union,
              compare,
              equal,
              iter,
              fold,
              for_all,
              exists,
              filter,
              partition,
              cardinal,
              bindings,
              min_binding,
              min_binding_opt,
              max_binding,
              max_binding_opt,
              min_binding,
              min_binding_opt,
              split,
              find,
              find_opt,
              find_first,
              find_first_opt,
              find_last,
              find_last_opt,
              map,
              mapi]}
    var Empty=[248,_K_,caml_fresh_oo_id(0)];
    function create(param){return [0,0,0,0]}
    function add(x,q)
     {var cell=[0,x,0],_mU_=q[3];
      return _mU_
              ?(q[1] = q[1] + 1 | 0,_mU_[2] = cell,q[3] = cell,0)
              :(q[1] = 1,q[2] = cell,q[3] = cell,0)}
    function take(q)
     {var _mR_=q[2];
      if(_mR_)
       {var _mS_=_mR_[1],_mT_=_mR_[2];
        return _mT_
                ?(q[1] = q[1] - 1 | 0,q[2] = _mT_,_mS_)
                :(q[1] = 0,q[2] = 0,q[3] = 0,_mS_)}
      throw Empty}
    function is_empty(q){return 0 === q[1]?1:0}
    var Undefined=[248,_L_,caml_fresh_oo_id(0)];
    function raise_undefined(param){throw Undefined}
    function force_lazy_block(blk)
     {var closure=blk[1];
      blk[1] = raise_undefined;
      try
       {var result=caml_call1(closure,0);
        blk[1] = result;
        caml_obj_set_tag(blk,250);
        return result}
      catch(e)
       {e = caml_wrap_exception(e);blk[1] = function(param){throw e};throw e}}
    function resize(b,more)
     {var len=b[3],new_len=[0,len];
      for(;;)
       {if(new_len[1] < (b[2] + more | 0))
         {new_len[1] = 2 * new_len[1] | 0;continue}
        if(max_string_length < new_len[1])
         if((b[2] + more | 0) <= max_string_length)
          new_len[1] = max_string_length;
         else
          failwith(_M_);
        var new_buffer=caml_create_bytes(new_len[1]);
        blit(b[1],0,new_buffer,0,b[2]);
        b[1] = new_buffer;
        b[3] = new_len[1];
        return 0}}
    function add_string(b,s)
     {var len=caml_ml_string_length(s),new_position=b[2] + len | 0;
      if(b[3] < new_position)resize(b,len);
      blit$0(s,0,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    var default_float_precision=-6;
    function buffer_create(init_size)
     {return [0,0,caml_create_bytes(init_size)]}
    function buffer_check_size(buf,overhead)
     {var
       len=caml_ml_bytes_length(buf[2]),
       min_len=buf[1] + overhead | 0,
       _mP_=len < min_len?1:0;
      if(_mP_)
       {var
         new_len=max(len * 2 | 0,min_len),
         new_str=caml_create_bytes(new_len);
        blit(buf[2],0,new_str,0,len);
        buf[2] = new_str;
        var _mQ_=0}
      else
       var _mQ_=_mP_;
      return _mQ_}
    function buffer_add_char(buf,c)
     {buffer_check_size(buf,1);
      caml_bytes_set(buf[2],buf[1],c);
      buf[1] = buf[1] + 1 | 0;
      return 0}
    function buffer_add_string(buf,s)
     {var str_len=caml_ml_string_length(s);
      buffer_check_size(buf,str_len);
      blit$0(s,0,buf[2],buf[1],str_len);
      buf[1] = buf[1] + str_len | 0;
      return 0}
    function buffer_contents(buf){return sub_string(buf[2],0,buf[1])}
    function string_of_formatting_lit(formatting_lit)
     {if(typeof formatting_lit === "number")
       switch(formatting_lit)
        {case 0:return _N_;
         case 1:return _O_;
         case 2:return _P_;
         case 3:return _Q_;
         case 4:return _R_;
         case 5:return _S_;
         default:return _T_}
      else
       switch(formatting_lit[0])
        {case 0:var str=formatting_lit[1];return str;
         case 1:var str$0=formatting_lit[1];return str$0;
         default:var c=formatting_lit[1];return _a_(_U_,make(1,c))}}
    function bprint_fmtty(buf,fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:
           var fmtty$1=fmtty$0[1];
           buffer_add_string(buf,_V_);
           var fmtty$0=fmtty$1;
           continue;
          case 1:
           var fmtty$2=fmtty$0[1];
           buffer_add_string(buf,_W_);
           var fmtty$0=fmtty$2;
           continue;
          case 2:
           var fmtty$3=fmtty$0[1];
           buffer_add_string(buf,_X_);
           var fmtty$0=fmtty$3;
           continue;
          case 3:
           var fmtty$4=fmtty$0[1];
           buffer_add_string(buf,_Y_);
           var fmtty$0=fmtty$4;
           continue;
          case 4:
           var fmtty$5=fmtty$0[1];
           buffer_add_string(buf,_Z_);
           var fmtty$0=fmtty$5;
           continue;
          case 5:
           var fmtty$6=fmtty$0[1];
           buffer_add_string(buf,___);
           var fmtty$0=fmtty$6;
           continue;
          case 6:
           var fmtty$7=fmtty$0[1];
           buffer_add_string(buf,_$_);
           var fmtty$0=fmtty$7;
           continue;
          case 7:
           var fmtty$8=fmtty$0[1];
           buffer_add_string(buf,_aa_);
           var fmtty$0=fmtty$8;
           continue;
          case 8:
           var fmtty$9=fmtty$0[2],sub_fmtty=fmtty$0[1];
           buffer_add_string(buf,_ab_);
           bprint_fmtty(buf,sub_fmtty);
           buffer_add_string(buf,_ac_);
           var fmtty$0=fmtty$9;
           continue;
          case 9:
           var fmtty$10=fmtty$0[3],sub_fmtty$0=fmtty$0[1];
           buffer_add_string(buf,_ad_);
           bprint_fmtty(buf,sub_fmtty$0);
           buffer_add_string(buf,_ae_);
           var fmtty$0=fmtty$10;
           continue;
          case 10:
           var fmtty$11=fmtty$0[1];
           buffer_add_string(buf,_af_);
           var fmtty$0=fmtty$11;
           continue;
          case 11:
           var fmtty$12=fmtty$0[1];
           buffer_add_string(buf,_ag_);
           var fmtty$0=fmtty$12;
           continue;
          case 12:
           var fmtty$13=fmtty$0[1];
           buffer_add_string(buf,_ah_);
           var fmtty$0=fmtty$13;
           continue;
          case 13:
           var fmtty$14=fmtty$0[1];
           buffer_add_string(buf,_ai_);
           var fmtty$0=fmtty$14;
           continue;
          default:
           var fmtty$15=fmtty$0[1];
           buffer_add_string(buf,_aj_);
           var fmtty$0=fmtty$15;
           continue}}
    function symm(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,symm(rest)];
         case 1:var rest$0=param[1];return [1,symm(rest$0)];
         case 2:var rest$1=param[1];return [2,symm(rest$1)];
         case 3:var rest$2=param[1];return [3,symm(rest$2)];
         case 4:var rest$3=param[1];return [4,symm(rest$3)];
         case 5:var rest$4=param[1];return [5,symm(rest$4)];
         case 6:var rest$5=param[1];return [6,symm(rest$5)];
         case 7:var rest$6=param[1];return [7,symm(rest$6)];
         case 8:var rest$7=param[2],ty=param[1];return [8,ty,symm(rest$7)];
         case 9:
          var rest$8=param[3],ty2=param[2],ty1=param[1];
          return [9,ty2,ty1,symm(rest$8)];
         case 10:var rest$9=param[1];return [10,symm(rest$9)];
         case 11:var rest$10=param[1];return [11,symm(rest$10)];
         case 12:var rest$11=param[1];return [12,symm(rest$11)];
         case 13:var rest$12=param[1];return [13,symm(rest$12)];
         default:var rest$13=param[1];return [14,symm(rest$13)]}}
    function fmtty_rel_det(param)
     {if(typeof param === "number")
       {var
         _mr_=function(param){return 0},
         _ms_=function(param){return 0},
         _mt_=function(param){return 0};
        return [0,function(param){return 0},_mt_,_ms_,_mr_]}
      else
       switch(param[0])
        {case 0:
          var
           rest=param[1],
           match=fmtty_rel_det(rest),
           de=match[4],
           ed=match[3],
           af=match[2],
           fa=match[1],
           _mu_=function(param){caml_call1(af,0);return 0};
          return [0,function(param){caml_call1(fa,0);return 0},_mu_,ed,de];
         case 1:
          var
           rest$0=param[1],
           match$0=fmtty_rel_det(rest$0),
           de$0=match$0[4],
           ed$0=match$0[3],
           af$0=match$0[2],
           fa$0=match$0[1],
           _mv_=function(param){caml_call1(af$0,0);return 0};
          return [0,
                  function(param){caml_call1(fa$0,0);return 0},
                  _mv_,
                  ed$0,
                  de$0];
         case 2:
          var
           rest$1=param[1],
           match$1=fmtty_rel_det(rest$1),
           de$1=match$1[4],
           ed$1=match$1[3],
           af$1=match$1[2],
           fa$1=match$1[1],
           _mw_=function(param){caml_call1(af$1,0);return 0};
          return [0,
                  function(param){caml_call1(fa$1,0);return 0},
                  _mw_,
                  ed$1,
                  de$1];
         case 3:
          var
           rest$2=param[1],
           match$2=fmtty_rel_det(rest$2),
           de$2=match$2[4],
           ed$2=match$2[3],
           af$2=match$2[2],
           fa$2=match$2[1],
           _mx_=function(param){caml_call1(af$2,0);return 0};
          return [0,
                  function(param){caml_call1(fa$2,0);return 0},
                  _mx_,
                  ed$2,
                  de$2];
         case 4:
          var
           rest$3=param[1],
           match$3=fmtty_rel_det(rest$3),
           de$3=match$3[4],
           ed$3=match$3[3],
           af$3=match$3[2],
           fa$3=match$3[1],
           _my_=function(param){caml_call1(af$3,0);return 0};
          return [0,
                  function(param){caml_call1(fa$3,0);return 0},
                  _my_,
                  ed$3,
                  de$3];
         case 5:
          var
           rest$4=param[1],
           match$4=fmtty_rel_det(rest$4),
           de$4=match$4[4],
           ed$4=match$4[3],
           af$4=match$4[2],
           fa$4=match$4[1],
           _mz_=function(param){caml_call1(af$4,0);return 0};
          return [0,
                  function(param){caml_call1(fa$4,0);return 0},
                  _mz_,
                  ed$4,
                  de$4];
         case 6:
          var
           rest$5=param[1],
           match$5=fmtty_rel_det(rest$5),
           de$5=match$5[4],
           ed$5=match$5[3],
           af$5=match$5[2],
           fa$5=match$5[1],
           _mA_=function(param){caml_call1(af$5,0);return 0};
          return [0,
                  function(param){caml_call1(fa$5,0);return 0},
                  _mA_,
                  ed$5,
                  de$5];
         case 7:
          var
           rest$6=param[1],
           match$6=fmtty_rel_det(rest$6),
           de$6=match$6[4],
           ed$6=match$6[3],
           af$6=match$6[2],
           fa$6=match$6[1],
           _mB_=function(param){caml_call1(af$6,0);return 0};
          return [0,
                  function(param){caml_call1(fa$6,0);return 0},
                  _mB_,
                  ed$6,
                  de$6];
         case 8:
          var
           rest$7=param[2],
           match$7=fmtty_rel_det(rest$7),
           de$7=match$7[4],
           ed$7=match$7[3],
           af$7=match$7[2],
           fa$7=match$7[1],
           _mC_=function(param){caml_call1(af$7,0);return 0};
          return [0,
                  function(param){caml_call1(fa$7,0);return 0},
                  _mC_,
                  ed$7,
                  de$7];
         case 9:
          var
           rest$8=param[3],
           ty2=param[2],
           ty1=param[1],
           match$8=fmtty_rel_det(rest$8),
           de$8=match$8[4],
           ed$8=match$8[3],
           af$8=match$8[2],
           fa$8=match$8[1],
           ty=trans(symm(ty1),ty2),
           match$9=fmtty_rel_det(ty),
           jd=match$9[4],
           dj=match$9[3],
           ga=match$9[2],
           ag=match$9[1],
           _mD_=function(param){caml_call1(jd,0);caml_call1(de$8,0);return 0},
           _mE_=function(param){caml_call1(ed$8,0);caml_call1(dj,0);return 0},
           _mF_=function(param){caml_call1(ga,0);caml_call1(af$8,0);return 0};
          return [0,
                  function(param)
                   {caml_call1(fa$8,0);caml_call1(ag,0);return 0},
                  _mF_,
                  _mE_,
                  _mD_];
         case 10:
          var
           rest$9=param[1],
           match$10=fmtty_rel_det(rest$9),
           de$9=match$10[4],
           ed$9=match$10[3],
           af$9=match$10[2],
           fa$9=match$10[1],
           _mG_=function(param){caml_call1(af$9,0);return 0};
          return [0,
                  function(param){caml_call1(fa$9,0);return 0},
                  _mG_,
                  ed$9,
                  de$9];
         case 11:
          var
           rest$10=param[1],
           match$11=fmtty_rel_det(rest$10),
           de$10=match$11[4],
           ed$10=match$11[3],
           af$10=match$11[2],
           fa$10=match$11[1],
           _mH_=function(param){caml_call1(af$10,0);return 0};
          return [0,
                  function(param){caml_call1(fa$10,0);return 0},
                  _mH_,
                  ed$10,
                  de$10];
         case 12:
          var
           rest$11=param[1],
           match$12=fmtty_rel_det(rest$11),
           de$11=match$12[4],
           ed$11=match$12[3],
           af$11=match$12[2],
           fa$11=match$12[1],
           _mI_=function(param){caml_call1(af$11,0);return 0};
          return [0,
                  function(param){caml_call1(fa$11,0);return 0},
                  _mI_,
                  ed$11,
                  de$11];
         case 13:
          var
           rest$12=param[1],
           match$13=fmtty_rel_det(rest$12),
           de$12=match$13[4],
           ed$12=match$13[3],
           af$12=match$13[2],
           fa$12=match$13[1],
           _mJ_=function(param){caml_call1(de$12,0);return 0},
           _mK_=function(param){caml_call1(ed$12,0);return 0},
           _mL_=function(param){caml_call1(af$12,0);return 0};
          return [0,
                  function(param){caml_call1(fa$12,0);return 0},
                  _mL_,
                  _mK_,
                  _mJ_];
         default:
          var
           rest$13=param[1],
           match$14=fmtty_rel_det(rest$13),
           de$13=match$14[4],
           ed$13=match$14[3],
           af$13=match$14[2],
           fa$13=match$14[1],
           _mM_=function(param){caml_call1(de$13,0);return 0},
           _mN_=function(param){caml_call1(ed$13,0);return 0},
           _mO_=function(param){caml_call1(af$13,0);return 0};
          return [0,
                  function(param){caml_call1(fa$13,0);return 0},
                  _mO_,
                  _mN_,
                  _mM_]}}
    function trans(ty1,match)
     {if(typeof ty1 === "number")
       if(typeof match === "number")
        return 0;
       else
        switch(match[0])
         {case 10:var switch$0=0;break;
          case 11:var switch$0=1;break;
          case 12:var switch$0=2;break;
          case 13:var switch$0=3;break;
          case 14:var switch$0=4;break;
          case 8:var switch$0=5;break;
          case 9:var switch$0=6;break;
          default:throw [0,Assert_failure,_ak_]}
      else
       switch(ty1[0])
        {case 0:
          var _l__=ty1[1];
          if(typeof match === "number")
           var switch$1=1;
          else
           switch(match[0])
            {case 0:var rest2=match[1];return [0,trans(_l__,rest2)];
             case 8:var switch$0=5,switch$1=0;break;
             case 9:var switch$0=6,switch$1=0;break;
             case 10:var switch$0=0,switch$1=0;break;
             case 11:var switch$0=1,switch$1=0;break;
             case 12:var switch$0=2,switch$1=0;break;
             case 13:var switch$0=3,switch$1=0;break;
             case 14:var switch$0=4,switch$1=0;break;
             default:var switch$1=1}
          if(switch$1)var switch$0=7;
          break;
         case 1:
          var _l$_=ty1[1];
          if(typeof match === "number")
           var switch$2=1;
          else
           switch(match[0])
            {case 1:var rest2$0=match[1];return [1,trans(_l$_,rest2$0)];
             case 8:var switch$0=5,switch$2=0;break;
             case 9:var switch$0=6,switch$2=0;break;
             case 10:var switch$0=0,switch$2=0;break;
             case 11:var switch$0=1,switch$2=0;break;
             case 12:var switch$0=2,switch$2=0;break;
             case 13:var switch$0=3,switch$2=0;break;
             case 14:var switch$0=4,switch$2=0;break;
             default:var switch$2=1}
          if(switch$2)var switch$0=7;
          break;
         case 2:
          var _ma_=ty1[1];
          if(typeof match === "number")
           var switch$3=1;
          else
           switch(match[0])
            {case 2:var rest2$1=match[1];return [2,trans(_ma_,rest2$1)];
             case 8:var switch$0=5,switch$3=0;break;
             case 9:var switch$0=6,switch$3=0;break;
             case 10:var switch$0=0,switch$3=0;break;
             case 11:var switch$0=1,switch$3=0;break;
             case 12:var switch$0=2,switch$3=0;break;
             case 13:var switch$0=3,switch$3=0;break;
             case 14:var switch$0=4,switch$3=0;break;
             default:var switch$3=1}
          if(switch$3)var switch$0=7;
          break;
         case 3:
          var _mb_=ty1[1];
          if(typeof match === "number")
           var switch$4=1;
          else
           switch(match[0])
            {case 3:var rest2$2=match[1];return [3,trans(_mb_,rest2$2)];
             case 8:var switch$0=5,switch$4=0;break;
             case 9:var switch$0=6,switch$4=0;break;
             case 10:var switch$0=0,switch$4=0;break;
             case 11:var switch$0=1,switch$4=0;break;
             case 12:var switch$0=2,switch$4=0;break;
             case 13:var switch$0=3,switch$4=0;break;
             case 14:var switch$0=4,switch$4=0;break;
             default:var switch$4=1}
          if(switch$4)var switch$0=7;
          break;
         case 4:
          var _mc_=ty1[1];
          if(typeof match === "number")
           var switch$5=1;
          else
           switch(match[0])
            {case 4:var rest2$3=match[1];return [4,trans(_mc_,rest2$3)];
             case 8:var switch$0=5,switch$5=0;break;
             case 9:var switch$0=6,switch$5=0;break;
             case 10:var switch$0=0,switch$5=0;break;
             case 11:var switch$0=1,switch$5=0;break;
             case 12:var switch$0=2,switch$5=0;break;
             case 13:var switch$0=3,switch$5=0;break;
             case 14:var switch$0=4,switch$5=0;break;
             default:var switch$5=1}
          if(switch$5)var switch$0=7;
          break;
         case 5:
          var _md_=ty1[1];
          if(typeof match === "number")
           var switch$6=1;
          else
           switch(match[0])
            {case 5:var rest2$4=match[1];return [5,trans(_md_,rest2$4)];
             case 8:var switch$0=5,switch$6=0;break;
             case 9:var switch$0=6,switch$6=0;break;
             case 10:var switch$0=0,switch$6=0;break;
             case 11:var switch$0=1,switch$6=0;break;
             case 12:var switch$0=2,switch$6=0;break;
             case 13:var switch$0=3,switch$6=0;break;
             case 14:var switch$0=4,switch$6=0;break;
             default:var switch$6=1}
          if(switch$6)var switch$0=7;
          break;
         case 6:
          var _me_=ty1[1];
          if(typeof match === "number")
           var switch$7=1;
          else
           switch(match[0])
            {case 6:var rest2$5=match[1];return [6,trans(_me_,rest2$5)];
             case 8:var switch$0=5,switch$7=0;break;
             case 9:var switch$0=6,switch$7=0;break;
             case 10:var switch$0=0,switch$7=0;break;
             case 11:var switch$0=1,switch$7=0;break;
             case 12:var switch$0=2,switch$7=0;break;
             case 13:var switch$0=3,switch$7=0;break;
             case 14:var switch$0=4,switch$7=0;break;
             default:var switch$7=1}
          if(switch$7)var switch$0=7;
          break;
         case 7:
          var _mf_=ty1[1];
          if(typeof match === "number")
           var switch$8=1;
          else
           switch(match[0])
            {case 7:var rest2$6=match[1];return [7,trans(_mf_,rest2$6)];
             case 8:var switch$0=5,switch$8=0;break;
             case 9:var switch$0=6,switch$8=0;break;
             case 10:var switch$0=0,switch$8=0;break;
             case 11:var switch$0=1,switch$8=0;break;
             case 12:var switch$0=2,switch$8=0;break;
             case 13:var switch$0=3,switch$8=0;break;
             case 14:var switch$0=4,switch$8=0;break;
             default:var switch$8=1}
          if(switch$8)var switch$0=7;
          break;
         case 8:
          var _mg_=ty1[2],_mh_=ty1[1];
          if(typeof match === "number")
           var switch$9=1;
          else
           switch(match[0])
            {case 8:
              var rest2$7=match[2],ty2=match[1],_mi_=trans(_mg_,rest2$7);
              return [8,trans(_mh_,ty2),_mi_];
             case 10:var switch$0=0,switch$9=0;break;
             case 11:var switch$0=1,switch$9=0;break;
             case 12:var switch$0=2,switch$9=0;break;
             case 13:var switch$0=3,switch$9=0;break;
             case 14:var switch$0=4,switch$9=0;break;
             default:var switch$9=1}
          if(switch$9)throw [0,Assert_failure,_at_];
          break;
         case 9:
          var _mj_=ty1[3],_mk_=ty1[2],_ml_=ty1[1];
          if(typeof match === "number")
           var switch$10=1;
          else
           switch(match[0])
            {case 8:var switch$0=5,switch$10=0;break;
             case 9:
              var
               rest2$8=match[3],
               ty22=match[2],
               ty21=match[1],
               ty=trans(symm(_mk_),ty21),
               match$0=fmtty_rel_det(ty),
               f4=match$0[4],
               f2=match$0[2];
              caml_call1(f2,0);
              caml_call1(f4,0);
              return [9,_ml_,ty22,trans(_mj_,rest2$8)];
             case 10:var switch$0=0,switch$10=0;break;
             case 11:var switch$0=1,switch$10=0;break;
             case 12:var switch$0=2,switch$10=0;break;
             case 13:var switch$0=3,switch$10=0;break;
             case 14:var switch$0=4,switch$10=0;break;
             default:var switch$10=1}
          if(switch$10)throw [0,Assert_failure,_au_];
          break;
         case 10:
          var _mm_=ty1[1];
          if(typeof match !== "number" && 10 === match[0])
           {var rest2$9=match[1];return [10,trans(_mm_,rest2$9)]}
          throw [0,Assert_failure,_av_];
         case 11:
          var _mn_=ty1[1];
          if(typeof match === "number")
           var switch$11=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$11=0;break;
             case 11:var rest2$10=match[1];return [11,trans(_mn_,rest2$10)];
             default:var switch$11=1}
          if(switch$11)throw [0,Assert_failure,_aw_];
          break;
         case 12:
          var _mo_=ty1[1];
          if(typeof match === "number")
           var switch$12=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$12=0;break;
             case 11:var switch$0=1,switch$12=0;break;
             case 12:var rest2$11=match[1];return [12,trans(_mo_,rest2$11)];
             default:var switch$12=1}
          if(switch$12)throw [0,Assert_failure,_ax_];
          break;
         case 13:
          var _mp_=ty1[1];
          if(typeof match === "number")
           var switch$13=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$13=0;break;
             case 11:var switch$0=1,switch$13=0;break;
             case 12:var switch$0=2,switch$13=0;break;
             case 13:var rest2$12=match[1];return [13,trans(_mp_,rest2$12)];
             default:var switch$13=1}
          if(switch$13)throw [0,Assert_failure,_ay_];
          break;
         default:
          var _mq_=ty1[1];
          if(typeof match === "number")
           var switch$14=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$14=0;break;
             case 11:var switch$0=1,switch$14=0;break;
             case 12:var switch$0=2,switch$14=0;break;
             case 13:var switch$0=3,switch$14=0;break;
             case 14:var rest2$13=match[1];return [14,trans(_mq_,rest2$13)];
             default:var switch$14=1}
          if(switch$14)throw [0,Assert_failure,_az_]}
      switch(switch$0)
       {case 0:throw [0,Assert_failure,_an_];
        case 1:throw [0,Assert_failure,_ao_];
        case 2:throw [0,Assert_failure,_ap_];
        case 3:throw [0,Assert_failure,_aq_];
        case 4:throw [0,Assert_failure,_ar_];
        case 5:throw [0,Assert_failure,_al_];
        case 6:throw [0,Assert_failure,_am_];
        default:throw [0,Assert_failure,_as_]}}
    var Type_mismatch=[248,_aA_,caml_fresh_oo_id(0)];
    function type_padding(pad,match)
     {if(typeof pad === "number")
       return [0,0,match];
      else
       {if(0 === pad[0])
         {var w=pad[2],padty=pad[1];return [0,[0,padty,w],match]}
        if(typeof match !== "number" && 2 === match[0])
         {var rest=match[1],padty$0=pad[1];return [0,[1,padty$0],rest]}
        throw Type_mismatch}}
    function type_padprec(pad,prec,fmtty)
     {var match=type_padding(pad,fmtty);
      if(typeof prec === "number")
       {if(0 === prec)
         {var rest=match[2],pad$0=match[1];return [0,pad$0,0,rest]}
        var _l9_=match[2];
        if(typeof _l9_ !== "number" && 2 === _l9_[0])
         {var rest$0=_l9_[1],pad$1=match[1];return [0,pad$1,1,rest$0]}
        throw Type_mismatch}
      var rest$1=match[2],pad$2=match[1],p=prec[1];
      return [0,pad$2,[0,p],rest$1]}
    function type_ignored_param_one(ign,fmt,fmtty)
     {var match=type_format_gen(fmt,fmtty),fmtty$0=match[2],fmt$0=match[1];
      return [0,[23,ign,fmt$0],fmtty$0]}
    function type_format_gen(fmt,fmtty)
     {if(typeof fmt === "number")
       return [0,0,fmtty];
      else
       switch(fmt[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             fmt_rest=fmt[1],
             match=type_format_gen(fmt_rest,fmtty_rest),
             fmtty$0=match[2],
             fmt$0=match[1];
            return [0,[0,fmt$0],fmtty$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest$0=fmtty[1],
             fmt_rest$0=fmt[1],
             match$0=type_format_gen(fmt_rest$0,fmtty_rest$0),
             fmtty$1=match$0[2],
             fmt$1=match$0[1];
            return [0,[1,fmt$1],fmtty$1]}
          break;
         case 2:
          var
           fmt_rest$1=fmt[2],
           pad=fmt[1],
           _lE_=type_padding(pad,fmtty),
           _lF_=_lE_[2],
           _lG_=_lE_[1];
          if(typeof _lF_ !== "number" && 1 === _lF_[0])
           {var
             fmtty_rest$1=_lF_[1],
             match$1=type_format_gen(fmt_rest$1,fmtty_rest$1),
             fmtty$2=match$1[2],
             fmt$2=match$1[1];
            return [0,[2,_lG_,fmt$2],fmtty$2]}
          throw Type_mismatch;
         case 3:
          var
           fmt_rest$2=fmt[2],
           pad$0=fmt[1],
           _lH_=type_padding(pad$0,fmtty),
           _lI_=_lH_[2],
           _lJ_=_lH_[1];
          if(typeof _lI_ !== "number" && 1 === _lI_[0])
           {var
             fmtty_rest$2=_lI_[1],
             match$2=type_format_gen(fmt_rest$2,fmtty_rest$2),
             fmtty$3=match$2[2],
             fmt$3=match$2[1];
            return [0,[3,_lJ_,fmt$3],fmtty$3]}
          throw Type_mismatch;
         case 4:
          var
           fmt_rest$3=fmt[4],
           prec=fmt[3],
           pad$1=fmt[2],
           iconv=fmt[1],
           _lK_=type_padprec(pad$1,prec,fmtty),
           _lL_=_lK_[3],
           _lM_=_lK_[2],
           _lN_=_lK_[1];
          if(typeof _lL_ !== "number" && 2 === _lL_[0])
           {var
             fmtty_rest$3=_lL_[1],
             match$3=type_format_gen(fmt_rest$3,fmtty_rest$3),
             fmtty$4=match$3[2],
             fmt$4=match$3[1];
            return [0,[4,iconv,_lN_,_lM_,fmt$4],fmtty$4]}
          throw Type_mismatch;
         case 5:
          var
           fmt_rest$4=fmt[4],
           prec$0=fmt[3],
           pad$2=fmt[2],
           iconv$0=fmt[1],
           _lO_=type_padprec(pad$2,prec$0,fmtty),
           _lP_=_lO_[3],
           _lQ_=_lO_[2],
           _lR_=_lO_[1];
          if(typeof _lP_ !== "number" && 3 === _lP_[0])
           {var
             fmtty_rest$4=_lP_[1],
             match$4=type_format_gen(fmt_rest$4,fmtty_rest$4),
             fmtty$5=match$4[2],
             fmt$5=match$4[1];
            return [0,[5,iconv$0,_lR_,_lQ_,fmt$5],fmtty$5]}
          throw Type_mismatch;
         case 6:
          var
           fmt_rest$5=fmt[4],
           prec$1=fmt[3],
           pad$3=fmt[2],
           iconv$1=fmt[1],
           _lS_=type_padprec(pad$3,prec$1,fmtty),
           _lT_=_lS_[3],
           _lU_=_lS_[2],
           _lV_=_lS_[1];
          if(typeof _lT_ !== "number" && 4 === _lT_[0])
           {var
             fmtty_rest$5=_lT_[1],
             match$5=type_format_gen(fmt_rest$5,fmtty_rest$5),
             fmtty$6=match$5[2],
             fmt$6=match$5[1];
            return [0,[6,iconv$1,_lV_,_lU_,fmt$6],fmtty$6]}
          throw Type_mismatch;
         case 7:
          var
           fmt_rest$6=fmt[4],
           prec$2=fmt[3],
           pad$4=fmt[2],
           iconv$2=fmt[1],
           _lW_=type_padprec(pad$4,prec$2,fmtty),
           _lX_=_lW_[3],
           _lY_=_lW_[2],
           _lZ_=_lW_[1];
          if(typeof _lX_ !== "number" && 5 === _lX_[0])
           {var
             fmtty_rest$6=_lX_[1],
             match$6=type_format_gen(fmt_rest$6,fmtty_rest$6),
             fmtty$7=match$6[2],
             fmt$7=match$6[1];
            return [0,[7,iconv$2,_lZ_,_lY_,fmt$7],fmtty$7]}
          throw Type_mismatch;
         case 8:
          var
           fmt_rest$7=fmt[4],
           prec$3=fmt[3],
           pad$5=fmt[2],
           fconv=fmt[1],
           _l0_=type_padprec(pad$5,prec$3,fmtty),
           _l1_=_l0_[3],
           _l2_=_l0_[2],
           _l3_=_l0_[1];
          if(typeof _l1_ !== "number" && 6 === _l1_[0])
           {var
             fmtty_rest$7=_l1_[1],
             match$7=type_format_gen(fmt_rest$7,fmtty_rest$7),
             fmtty$8=match$7[2],
             fmt$8=match$7[1];
            return [0,[8,fconv,_l3_,_l2_,fmt$8],fmtty$8]}
          throw Type_mismatch;
         case 9:
          var
           fmt_rest$8=fmt[2],
           pad$6=fmt[1],
           _l4_=type_padding(pad$6,fmtty),
           _l5_=_l4_[2],
           _l6_=_l4_[1];
          if(typeof _l5_ !== "number" && 7 === _l5_[0])
           {var
             fmtty_rest$8=_l5_[1],
             match$8=type_format_gen(fmt_rest$8,fmtty_rest$8),
             fmtty$9=match$8[2],
             fmt$9=match$8[1];
            return [0,[9,_l6_,fmt$9],fmtty$9]}
          throw Type_mismatch;
         case 10:
          var
           fmt_rest$9=fmt[1],
           match$9=type_format_gen(fmt_rest$9,fmtty),
           fmtty$10=match$9[2],
           fmt$10=match$9[1];
          return [0,[10,fmt$10],fmtty$10];
         case 11:
          var
           fmt_rest$10=fmt[2],
           str=fmt[1],
           match$10=type_format_gen(fmt_rest$10,fmtty),
           fmtty$11=match$10[2],
           fmt$11=match$10[1];
          return [0,[11,str,fmt$11],fmtty$11];
         case 12:
          var
           fmt_rest$11=fmt[2],
           chr=fmt[1],
           match$11=type_format_gen(fmt_rest$11,fmtty),
           fmtty$12=match$11[2],
           fmt$12=match$11[1];
          return [0,[12,chr,fmt$12],fmtty$12];
         case 13:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[2],
             sub_fmtty=fmtty[1],
             fmt_rest$12=fmt[3],
             sub_fmtty$0=fmt[2],
             pad_opt=fmt[1];
            if(caml_notequal([0,sub_fmtty$0],[0,sub_fmtty]))
             throw Type_mismatch;
            var
             match$12=type_format_gen(fmt_rest$12,fmtty_rest$9),
             fmtty$13=match$12[2],
             fmt$13=match$12[1];
            return [0,[13,pad_opt,sub_fmtty,fmt$13],fmtty$13]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           {var
             fmtty_rest$10=fmtty[3],
             sub_fmtty1=fmtty[1],
             fmt_rest$13=fmt[3],
             sub_fmtty$1=fmt[2],
             pad_opt$0=fmt[1],
             _l7_=[0,erase_rel(sub_fmtty1)];
            if(caml_notequal([0,erase_rel(sub_fmtty$1)],_l7_))
             throw Type_mismatch;
            var
             match$13=type_format_gen(fmt_rest$13,erase_rel(fmtty_rest$10)),
             fmtty$14=match$13[2],
             fmt$14=match$13[1];
            return [0,[14,pad_opt$0,sub_fmtty1,fmt$14],fmtty$14]}
          break;
         case 15:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           {var
             fmtty_rest$11=fmtty[1],
             fmt_rest$14=fmt[1],
             match$14=type_format_gen(fmt_rest$14,fmtty_rest$11),
             fmtty$15=match$14[2],
             fmt$15=match$14[1];
            return [0,[15,fmt$15],fmtty$15]}
          break;
         case 16:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           {var
             fmtty_rest$12=fmtty[1],
             fmt_rest$15=fmt[1],
             match$15=type_format_gen(fmt_rest$15,fmtty_rest$12),
             fmtty$16=match$15[2],
             fmt$16=match$15[1];
            return [0,[16,fmt$16],fmtty$16]}
          break;
         case 17:
          var
           fmt_rest$16=fmt[2],
           formatting_lit=fmt[1],
           match$16=type_format_gen(fmt_rest$16,fmtty),
           fmtty$17=match$16[2],
           fmt$17=match$16[1];
          return [0,[17,formatting_lit,fmt$17],fmtty$17];
         case 18:
          var fmt_rest$17=fmt[2],formatting_gen=fmt[1];
          if(0 === formatting_gen[0])
           {var
             match$20=formatting_gen[1],
             str$0=match$20[2],
             fmt1=match$20[1],
             match$21=type_format_gen(fmt1,fmtty),
             fmtty2=match$21[2],
             fmt2=match$21[1],
             match$22=type_format_gen(fmt_rest$17,fmtty2),
             fmtty3=match$22[2],
             fmt3=match$22[1];
            return [0,[18,[0,[0,fmt2,str$0]],fmt3],fmtty3]}
          var
           match$23=formatting_gen[1],
           str$1=match$23[2],
           fmt1$0=match$23[1],
           match$24=type_format_gen(fmt1$0,fmtty),
           fmtty2$0=match$24[2],
           fmt2$0=match$24[1],
           match$25=type_format_gen(fmt_rest$17,fmtty2$0),
           fmtty3$0=match$25[2],
           fmt3$0=match$25[1];
          return [0,[18,[1,[0,fmt2$0,str$1]],fmt3$0],fmtty3$0];
         case 19:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           {var
             fmtty_rest$13=fmtty[1],
             fmt_rest$18=fmt[1],
             match$17=type_format_gen(fmt_rest$18,fmtty_rest$13),
             fmtty$18=match$17[2],
             fmt$18=match$17[1];
            return [0,[19,fmt$18],fmtty$18]}
          break;
         case 20:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           {var
             fmtty_rest$14=fmtty[1],
             fmt_rest$19=fmt[3],
             char_set=fmt[2],
             width_opt=fmt[1],
             match$18=type_format_gen(fmt_rest$19,fmtty_rest$14),
             fmtty$19=match$18[2],
             fmt$19=match$18[1];
            return [0,[20,width_opt,char_set,fmt$19],fmtty$19]}
          break;
         case 21:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           {var
             fmtty_rest$15=fmtty[1],
             fmt_rest$20=fmt[2],
             counter=fmt[1],
             match$19=type_format_gen(fmt_rest$20,fmtty_rest$15),
             fmtty$20=match$19[2],
             fmt$20=match$19[1];
            return [0,[21,counter,fmt$20],fmtty$20]}
          break;
         case 23:
          var rest=fmt[2],ign=fmt[1];
          if(typeof ign === "number")
           switch(ign)
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:
              if(typeof fmtty !== "number" && 14 === fmtty[0])
               {var
                 fmtty_rest$16=fmtty[1],
                 match$26=type_format_gen(rest,fmtty_rest$16),
                 fmtty$21=match$26[2],
                 fmt$21=match$26[1];
                return [0,[23,2,fmt$21],fmtty$21]}
              throw Type_mismatch;
             default:return type_ignored_param_one(ign,rest,fmtty)}
          else
           switch(ign[0])
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:return type_ignored_param_one(ign,rest,fmtty);
             case 3:return type_ignored_param_one(ign,rest,fmtty);
             case 4:return type_ignored_param_one(ign,rest,fmtty);
             case 5:return type_ignored_param_one(ign,rest,fmtty);
             case 6:return type_ignored_param_one(ign,rest,fmtty);
             case 7:return type_ignored_param_one(ign,rest,fmtty);
             case 8:
              var sub_fmtty$2=ign[2],pad_opt$1=ign[1];
              return type_ignored_param_one
                      ([8,pad_opt$1,sub_fmtty$2],rest,fmtty);
             case 9:
              var
               sub_fmtty$3=ign[2],
               pad_opt$2=ign[1],
               _l8_=type_ignored_format_substitution(sub_fmtty$3,rest,fmtty),
               match$27=_l8_[2],
               fmtty$22=match$27[2],
               fmt$22=match$27[1],
               sub_fmtty$4=_l8_[1];
              return [0,[23,[9,pad_opt$2,sub_fmtty$4],fmt$22],fmtty$22];
             case 10:return type_ignored_param_one(ign,rest,fmtty);
             default:return type_ignored_param_one(ign,rest,fmtty)}
         }
      throw Type_mismatch}
    function type_ignored_format_substitution(sub_fmtty,fmt,match)
     {if(typeof sub_fmtty === "number")
       return [0,0,type_format_gen(fmt,match)];
      else
       switch(sub_fmtty[0])
        {case 0:
          if(typeof match !== "number" && 0 === match[0])
           {var
             fmtty_rest=match[1],
             sub_fmtty_rest=sub_fmtty[1],
             match$0=
              type_ignored_format_substitution(sub_fmtty_rest,fmt,fmtty_rest),
             fmt$0=match$0[2],
             sub_fmtty_rest$0=match$0[1];
            return [0,[0,sub_fmtty_rest$0],fmt$0]}
          break;
         case 1:
          if(typeof match !== "number" && 1 === match[0])
           {var
             fmtty_rest$0=match[1],
             sub_fmtty_rest$1=sub_fmtty[1],
             match$1=
              type_ignored_format_substitution
               (sub_fmtty_rest$1,fmt,fmtty_rest$0),
             fmt$1=match$1[2],
             sub_fmtty_rest$2=match$1[1];
            return [0,[1,sub_fmtty_rest$2],fmt$1]}
          break;
         case 2:
          if(typeof match !== "number" && 2 === match[0])
           {var
             fmtty_rest$1=match[1],
             sub_fmtty_rest$3=sub_fmtty[1],
             match$2=
              type_ignored_format_substitution
               (sub_fmtty_rest$3,fmt,fmtty_rest$1),
             fmt$2=match$2[2],
             sub_fmtty_rest$4=match$2[1];
            return [0,[2,sub_fmtty_rest$4],fmt$2]}
          break;
         case 3:
          if(typeof match !== "number" && 3 === match[0])
           {var
             fmtty_rest$2=match[1],
             sub_fmtty_rest$5=sub_fmtty[1],
             match$3=
              type_ignored_format_substitution
               (sub_fmtty_rest$5,fmt,fmtty_rest$2),
             fmt$3=match$3[2],
             sub_fmtty_rest$6=match$3[1];
            return [0,[3,sub_fmtty_rest$6],fmt$3]}
          break;
         case 4:
          if(typeof match !== "number" && 4 === match[0])
           {var
             fmtty_rest$3=match[1],
             sub_fmtty_rest$7=sub_fmtty[1],
             match$4=
              type_ignored_format_substitution
               (sub_fmtty_rest$7,fmt,fmtty_rest$3),
             fmt$4=match$4[2],
             sub_fmtty_rest$8=match$4[1];
            return [0,[4,sub_fmtty_rest$8],fmt$4]}
          break;
         case 5:
          if(typeof match !== "number" && 5 === match[0])
           {var
             fmtty_rest$4=match[1],
             sub_fmtty_rest$9=sub_fmtty[1],
             match$5=
              type_ignored_format_substitution
               (sub_fmtty_rest$9,fmt,fmtty_rest$4),
             fmt$5=match$5[2],
             sub_fmtty_rest$10=match$5[1];
            return [0,[5,sub_fmtty_rest$10],fmt$5]}
          break;
         case 6:
          if(typeof match !== "number" && 6 === match[0])
           {var
             fmtty_rest$5=match[1],
             sub_fmtty_rest$11=sub_fmtty[1],
             match$6=
              type_ignored_format_substitution
               (sub_fmtty_rest$11,fmt,fmtty_rest$5),
             fmt$6=match$6[2],
             sub_fmtty_rest$12=match$6[1];
            return [0,[6,sub_fmtty_rest$12],fmt$6]}
          break;
         case 7:
          if(typeof match !== "number" && 7 === match[0])
           {var
             fmtty_rest$6=match[1],
             sub_fmtty_rest$13=sub_fmtty[1],
             match$7=
              type_ignored_format_substitution
               (sub_fmtty_rest$13,fmt,fmtty_rest$6),
             fmt$7=match$7[2],
             sub_fmtty_rest$14=match$7[1];
            return [0,[7,sub_fmtty_rest$14],fmt$7]}
          break;
         case 8:
          if(typeof match !== "number" && 8 === match[0])
           {var
             fmtty_rest$7=match[2],
             sub2_fmtty=match[1],
             sub_fmtty_rest$15=sub_fmtty[2],
             sub2_fmtty$0=sub_fmtty[1];
            if(caml_notequal([0,sub2_fmtty$0],[0,sub2_fmtty]))
             throw Type_mismatch;
            var
             match$8=
              type_ignored_format_substitution
               (sub_fmtty_rest$15,fmt,fmtty_rest$7),
             fmt$8=match$8[2],
             sub_fmtty_rest$16=match$8[1];
            return [0,[8,sub2_fmtty,sub_fmtty_rest$16],fmt$8]}
          break;
         case 9:
          if(typeof match !== "number" && 9 === match[0])
           {var
             fmtty_rest$8=match[3],
             sub2_fmtty$1=match[2],
             sub1_fmtty=match[1],
             sub_fmtty_rest$17=sub_fmtty[3],
             sub2_fmtty$2=sub_fmtty[2],
             sub1_fmtty$0=sub_fmtty[1],
             _lC_=[0,erase_rel(sub1_fmtty)];
            if(caml_notequal([0,erase_rel(sub1_fmtty$0)],_lC_))
             throw Type_mismatch;
            var _lD_=[0,erase_rel(sub2_fmtty$1)];
            if(caml_notequal([0,erase_rel(sub2_fmtty$2)],_lD_))
             throw Type_mismatch;
            var
             sub_fmtty$0=trans(symm(sub1_fmtty),sub2_fmtty$1),
             match$9=fmtty_rel_det(sub_fmtty$0),
             f4=match$9[4],
             f2=match$9[2];
            caml_call1(f2,0);
            caml_call1(f4,0);
            var
             match$10=
              type_ignored_format_substitution
               (erase_rel(sub_fmtty_rest$17),fmt,fmtty_rest$8),
             fmt$9=match$10[2],
             sub_fmtty_rest$18=match$10[1];
            return [0,
                    [9,sub1_fmtty,sub2_fmtty$1,symm(sub_fmtty_rest$18)],
                    fmt$9]}
          break;
         case 10:
          if(typeof match !== "number" && 10 === match[0])
           {var
             fmtty_rest$9=match[1],
             sub_fmtty_rest$19=sub_fmtty[1],
             match$11=
              type_ignored_format_substitution
               (sub_fmtty_rest$19,fmt,fmtty_rest$9),
             fmt$10=match$11[2],
             sub_fmtty_rest$20=match$11[1];
            return [0,[10,sub_fmtty_rest$20],fmt$10]}
          break;
         case 11:
          if(typeof match !== "number" && 11 === match[0])
           {var
             fmtty_rest$10=match[1],
             sub_fmtty_rest$21=sub_fmtty[1],
             match$12=
              type_ignored_format_substitution
               (sub_fmtty_rest$21,fmt,fmtty_rest$10),
             fmt$11=match$12[2],
             sub_fmtty_rest$22=match$12[1];
            return [0,[11,sub_fmtty_rest$22],fmt$11]}
          break;
         case 13:
          if(typeof match !== "number" && 13 === match[0])
           {var
             fmtty_rest$11=match[1],
             sub_fmtty_rest$23=sub_fmtty[1],
             match$13=
              type_ignored_format_substitution
               (sub_fmtty_rest$23,fmt,fmtty_rest$11),
             fmt$12=match$13[2],
             sub_fmtty_rest$24=match$13[1];
            return [0,[13,sub_fmtty_rest$24],fmt$12]}
          break;
         case 14:
          if(typeof match !== "number" && 14 === match[0])
           {var
             fmtty_rest$12=match[1],
             sub_fmtty_rest$25=sub_fmtty[1],
             match$14=
              type_ignored_format_substitution
               (sub_fmtty_rest$25,fmt,fmtty_rest$12),
             fmt$13=match$14[2],
             sub_fmtty_rest$26=match$14[1];
            return [0,[14,sub_fmtty_rest$26],fmt$13]}
          break
         }
      throw Type_mismatch}
    function recast(fmt$0,fmtty)
     {var fmtty$0=erase_rel(symm(fmtty)),_lB_=type_format_gen(fmt$0,fmtty$0);
      if(typeof _lB_[2] === "number"){var fmt=_lB_[1];return fmt}
      throw Type_mismatch}
    function fix_padding(padty,width,str)
     {var
       len=caml_ml_string_length(str),
       padty$0=0 <= width?padty:0,
       width$0=abs(width);
      if(width$0 <= len)return str;
      var _lA_=2 === padty$0?48:32,res=make(width$0,_lA_);
      switch(padty$0)
       {case 0:blit$0(str,0,res,0,len);break;
        case 1:blit$0(str,0,res,width$0 - len | 0,len);break;
        default:
         if(0 < len)
          {if(43 === caml_string_get(str,0))
            var switch$1=1;
           else
            if(45 === caml_string_get(str,0))
             var switch$1=1;
            else
             if(32 === caml_string_get(str,0))
              var switch$1=1;
             else
              var switch$0=0,switch$1=0;
           if(switch$1)
            {caml_bytes_set(res,0,caml_string_get(str,0));
             blit$0(str,1,res,(width$0 - len | 0) + 1 | 0,len - 1 | 0);
             var switch$0=1}}
         else
          var switch$0=0;
         if(! switch$0)
          {if(1 < len)
            if(48 === caml_string_get(str,0))
             {if(120 === caml_string_get(str,1))
               var switch$3=1;
              else
               if(88 === caml_string_get(str,1))
                var switch$3=1;
               else
                var switch$2=0,switch$3=0;
              if(switch$3)
               {caml_bytes_set(res,1,caml_string_get(str,1));
                blit$0(str,2,res,(width$0 - len | 0) + 2 | 0,len - 2 | 0);
                var switch$2=1}}
            else
             var switch$2=0;
           else
            var switch$2=0;
           if(! switch$2)blit$0(str,0,res,width$0 - len | 0,len)}}
      return res}
    function fix_int_precision(prec,str)
     {var
       prec$0=abs(prec),
       len=caml_ml_string_length(str),
       c=caml_string_get(str,0);
      if(58 <= c)
       var switch$0=71 <= c?5 < (c - 97 | 0) >>> 0?1:0:65 <= c?0:1;
      else
       {if(32 === c)
         var switch$1=1;
        else
         if(43 <= c)
          {var switcher=c - 43 | 0;
           switch(switcher)
            {case 5:
              if(len < (prec$0 + 2 | 0))
               if(1 < len)
                {var
                  switch$2=
                   120 === caml_string_get(str,1)
                    ?0
                    :88 === caml_string_get(str,1)?0:1;
                 if(! switch$2)
                  {var res$1=make(prec$0 + 2 | 0,48);
                   caml_bytes_set(res$1,1,caml_string_get(str,1));
                   blit$0(str,2,res$1,(prec$0 - len | 0) + 4 | 0,len - 2 | 0);
                   return res$1}}
              var switch$0=0,switch$1=0;
              break;
             case 0:
             case 2:var switch$1=1;break;
             case 1:
             case 3:
             case 4:var switch$0=1,switch$1=0;break;
             default:var switch$0=0,switch$1=0}}
         else
          var switch$0=1,switch$1=0;
        if(switch$1)
         {if(len < (prec$0 + 1 | 0))
           {var res$0=make(prec$0 + 1 | 0,48);
            caml_bytes_set(res$0,0,c);
            blit$0(str,1,res$0,(prec$0 - len | 0) + 2 | 0,len - 1 | 0);
            return res$0}
          var switch$0=1}}
      if(! switch$0)
       if(len < prec$0)
        {var res=make(prec$0,48);
         blit$0(str,0,res,prec$0 - len | 0,len);
         return res}
      return str}
    function string_to_caml_string(str)
     {var i$1=0;
      for(;;)
       {if(caml_ml_string_length(str) <= i$1)
         var _lz_=0;
        else
         {var match$0=caml_string_unsafe_get(str,i$1);
          if(32 <= match$0)
           {var _ly_=match$0 - 34 | 0;
            if(58 < _ly_ >>> 0)
             if(93 <= _ly_)var switch$0=0,switch$1=0;else var switch$1=1;
            else
             if(56 < (_ly_ - 1 | 0) >>> 0)
              var switch$0=1,switch$1=0;
             else
              var switch$1=1;
            if(switch$1){var i$2=i$1 + 1 | 0,i$1=i$2;continue}}
          else
           var switch$0=11 <= match$0?13 === match$0?1:0:8 <= match$0?1:0;
          var _lz_=switch$0?1:1}
        if(_lz_)
         {var n=[0,0],_lr_=caml_ml_bytes_length(str) - 1 | 0,_lq_=0;
          if(! (_lr_ < 0))
           {var i$0=_lq_;
            for(;;)
             {var match=caml_string_unsafe_get(str,i$0);
              if(32 <= match)
               {var _lv_=match - 34 | 0;
                if(58 < _lv_ >>> 0)
                 if(93 <= _lv_)var switch$2=0,switch$3=0;else var switch$3=1;
                else
                 if(56 < (_lv_ - 1 | 0) >>> 0)
                  var switch$2=1,switch$3=0;
                 else
                  var switch$3=1;
                if(switch$3)var _lw_=1,switch$2=2}
              else
               var switch$2=11 <= match?13 === match?1:0:8 <= match?1:0;
              switch(switch$2)
               {case 0:var _lw_=4;break;case 1:var _lw_=2;break}
              n[1] = n[1] + _lw_ | 0;
              var _lx_=i$0 + 1 | 0;
              if(_lr_ !== i$0){var i$0=_lx_;continue}
              break}}
          if(n[1] === caml_ml_bytes_length(str))
           {var len=caml_ml_bytes_length(str),r=caml_create_bytes(len);
            caml_blit_bytes(str,0,r,0,len);
            var str$0=r}
          else
           {var s=caml_create_bytes(n[1]);
            n[1] = 0;
            var _lt_=caml_ml_bytes_length(str) - 1 | 0,_ls_=0;
            if(! (_lt_ < 0))
             {var i=_ls_;
              for(;;)
               {var c=caml_string_unsafe_get(str,i);
                if(35 <= c)
                 var switch$4=92 === c?1:127 <= c?0:2;
                else
                 if(32 <= c)
                  var switch$4=34 <= c?1:2;
                 else
                  if(14 <= c)
                   var switch$4=0;
                  else
                   switch(c)
                    {case 8:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],98);
                      var switch$4=3;
                      break;
                     case 9:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],116);
                      var switch$4=3;
                      break;
                     case 10:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],110);
                      var switch$4=3;
                      break;
                     case 13:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],114);
                      var switch$4=3;
                      break;
                     default:var switch$4=0}
                switch(switch$4)
                 {case 0:
                   caml_string_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_string_unsafe_set(s,n[1],48 + (c / 100 | 0) | 0);
                   n[1]++;
                   caml_string_unsafe_set
                    (s,n[1],48 + ((c / 10 | 0) % 10 | 0) | 0);
                   n[1]++;
                   caml_string_unsafe_set(s,n[1],48 + (c % 10 | 0) | 0);
                   break;
                  case 1:
                   caml_string_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_string_unsafe_set(s,n[1],c);
                   break;
                  case 2:caml_string_unsafe_set(s,n[1],c);break
                  }
                n[1]++;
                var _lu_=i + 1 | 0;
                if(_lt_ !== i){var i=_lu_;continue}
                break}}
            var str$0=s}}
        else
         var str$0=str;
        var l=caml_ml_string_length(str$0),res=make(l + 2 | 0,34);
        caml_blit_string(str$0,0,res,1,l);
        return res}}
    function convert_int(iconv,n)
     {switch(iconv)
       {case 0:var _lp_=_aB_;break;
        case 1:var _lp_=_aC_;break;
        case 2:var _lp_=_aD_;break;
        case 3:var _lp_=_aE_;break;
        case 4:var _lp_=_aF_;break;
        case 5:var _lp_=_aG_;break;
        case 6:var _lp_=_aH_;break;
        case 7:var _lp_=_aI_;break;
        case 8:var _lp_=_aJ_;break;
        case 9:var _lp_=_aK_;break;
        case 10:var _lp_=_aL_;break;
        case 11:var _lp_=_aM_;break;
        default:var _lp_=_aN_}
      return caml_format_int(_lp_,n)}
    function convert_int32(iconv,n)
     {switch(iconv)
       {case 0:var _lo_=_a1_;break;
        case 1:var _lo_=_a2_;break;
        case 2:var _lo_=_a3_;break;
        case 3:var _lo_=_a4_;break;
        case 4:var _lo_=_a5_;break;
        case 5:var _lo_=_a6_;break;
        case 6:var _lo_=_a7_;break;
        case 7:var _lo_=_a8_;break;
        case 8:var _lo_=_a9_;break;
        case 9:var _lo_=_a__;break;
        case 10:var _lo_=_a$_;break;
        case 11:var _lo_=_ba_;break;
        default:var _lo_=_bb_}
      return caml_format_int(_lo_,n)}
    function convert_nativeint(iconv,n)
     {switch(iconv)
       {case 0:var _ln_=_bc_;break;
        case 1:var _ln_=_bd_;break;
        case 2:var _ln_=_be_;break;
        case 3:var _ln_=_bf_;break;
        case 4:var _ln_=_bg_;break;
        case 5:var _ln_=_bh_;break;
        case 6:var _ln_=_bi_;break;
        case 7:var _ln_=_bj_;break;
        case 8:var _ln_=_bk_;break;
        case 9:var _ln_=_bl_;break;
        case 10:var _ln_=_bm_;break;
        case 11:var _ln_=_bn_;break;
        default:var _ln_=_bo_}
      return caml_format_int(_ln_,n)}
    function convert_int64(iconv,n)
     {switch(iconv)
       {case 0:var _lm_=_aO_;break;
        case 1:var _lm_=_aP_;break;
        case 2:var _lm_=_aQ_;break;
        case 3:var _lm_=_aR_;break;
        case 4:var _lm_=_aS_;break;
        case 5:var _lm_=_aT_;break;
        case 6:var _lm_=_aU_;break;
        case 7:var _lm_=_aV_;break;
        case 8:var _lm_=_aW_;break;
        case 9:var _lm_=_aX_;break;
        case 10:var _lm_=_aY_;break;
        case 11:var _lm_=_aZ_;break;
        default:var _lm_=_a0_}
      return caml_int64_format(_lm_,n)}
    function convert_float(fconv,prec$0,x)
     {if(16 <= fconv)
       {if(17 <= fconv)
         switch(fconv - 17 | 0)
          {case 2:var switch$0=0;break;
           case 0:
           case 3:var sign=43,switch$0=1;break;
           default:var sign=32,switch$0=1}
        else
         var switch$0=0;
        if(! switch$0)var sign=45;
        var s=caml_hexstring_of_float(x,prec$0,sign);
        if(19 <= fconv)
         {var l=caml_ml_bytes_length(s);
          if(0 === l)return s;
          var r=caml_create_bytes(l),_lg_=l - 1 | 0,_lf_=0;
          if(! (_lg_ < 0))
           {var i=_lf_;
            for(;;)
             {var c=caml_string_unsafe_get(s,i);
              if(97 <= c)
               if(122 < c)var switch$1=0;else var _lh_=c - 32 | 0,switch$1=1;
              else
               var switch$1=0;
              if(! switch$1)var _lh_=c;
              caml_string_unsafe_set(r,i,_lh_);
              var _li_=i + 1 | 0;
              if(_lg_ !== i){var i=_li_;continue}
              break}}
          return r}
        return s}
      if(15 === fconv)
       var _lj_=_bp_;
      else
       {var prec=abs(prec$0);
        switch(fconv)
         {case 15:var symb=70;break;
          case 0:
          case 1:
          case 2:var symb=102;break;
          case 3:
          case 4:
          case 5:var symb=101;break;
          case 6:
          case 7:
          case 8:var symb=69;break;
          case 9:
          case 10:
          case 11:var symb=103;break;
          case 12:
          case 13:
          case 14:var symb=71;break;
          case 16:
          case 17:
          case 18:var symb=104;break;
          default:var symb=72}
        var buf=buffer_create(16);
        buffer_add_char(buf,37);
        switch(fconv)
         {case 1:
          case 4:
          case 7:
          case 10:
          case 13:
          case 17:
          case 20:buffer_add_char(buf,43);break;
          case 2:
          case 5:
          case 8:
          case 11:
          case 14:
          case 18:
          case 21:buffer_add_char(buf,32);break
          }
        buffer_add_char(buf,46);
        buffer_add_string(buf,caml_new_string("" + prec));
        buffer_add_char(buf,symb);
        var _lj_=buffer_contents(buf)}
      var str=caml_format_float(_lj_,x);
      if(15 === fconv)
       {var len=caml_ml_string_length(str),match$0=caml_classify_float(x);
        if(3 === match$0)return x < 0?_bq_:_br_;
        if(4 <= match$0)return _bs_;
        var i$0=0;
        for(;;)
         {if(i$0 === len)
           var _ll_=0;
          else
           {var
             match=caml_string_get(str,i$0),
             _lk_=match - 46 | 0,
             switch$2=
              23 < _lk_ >>> 0?55 === _lk_?1:0:21 < (_lk_ - 1 | 0) >>> 0?1:0;
            if(! switch$2){var i$1=i$0 + 1 | 0,i$0=i$1;continue}
            var _ll_=1}
          return _ll_?str:_a_(str,_bt_)}}
      return str}
    function make_int_padding_precision(k,o,acc,fmt,pad,match,trans,iconv)
     {if(typeof pad === "number")
       {if(typeof match === "number")
         return 0 === match
                 ?function(x)
                   {var str=caml_call2(trans,iconv,x);
                    return make_printf(k,o,[4,acc,str],fmt)}
                 :function(p,x)
                   {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
                    return make_printf(k,o,[4,acc,str],fmt)};
        var p=match[1];
        return function(x)
         {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
          return make_printf(k,o,[4,acc,str],fmt)}}
      else
       {if(0 === pad[0])
         {var _lc_=pad[2],_ld_=pad[1];
          if(typeof match === "number")
           return 0 === match
                   ?function(x)
                     {var str=fix_padding(_ld_,_lc_,caml_call2(trans,iconv,x));
                      return make_printf(k,o,[4,acc,str],fmt)}
                   :function(p,x)
                     {var
                       str=
                        fix_padding
                         (_ld_,_lc_,fix_int_precision(p,caml_call2(trans,iconv,x)));
                      return make_printf(k,o,[4,acc,str],fmt)};
          var p$0=match[1];
          return function(x)
           {var
             str=
              fix_padding
               (_ld_,_lc_,fix_int_precision(p$0,caml_call2(trans,iconv,x)));
            return make_printf(k,o,[4,acc,str],fmt)}}
        var _le_=pad[1];
        if(typeof match === "number")
         return 0 === match
                 ?function(w,x)
                   {var str=fix_padding(_le_,w,caml_call2(trans,iconv,x));
                    return make_printf(k,o,[4,acc,str],fmt)}
                 :function(w,p,x)
                   {var
                     str=
                      fix_padding
                       (_le_,w,fix_int_precision(p,caml_call2(trans,iconv,x)));
                    return make_printf(k,o,[4,acc,str],fmt)};
        var p$1=match[1];
        return function(w,x)
         {var
           str=
            fix_padding
             (_le_,w,fix_int_precision(p$1,caml_call2(trans,iconv,x)));
          return make_printf(k,o,[4,acc,str],fmt)}}}
    function make_padding(k,o,acc,fmt,pad,trans)
     {if(typeof pad === "number")
       return function(x)
        {var new_acc=[4,acc,caml_call1(trans,x)];
         return make_printf(k,o,new_acc,fmt)};
      else
       {if(0 === pad[0])
         {var width=pad[2],padty=pad[1];
          return function(x)
           {var new_acc=[4,acc,fix_padding(padty,width,caml_call1(trans,x))];
            return make_printf(k,o,new_acc,fmt)}}
        var padty$0=pad[1];
        return function(w,x)
         {var new_acc=[4,acc,fix_padding(padty$0,w,caml_call1(trans,x))];
          return make_printf(k,o,new_acc,fmt)}}}
    function make_printf$0(counter,k,o,acc,fmt)
     {var k$0=k,acc$0=acc,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call2(k$0,o,acc$0);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,o,new_acc,rest)};
          case 1:
           var rest$0=fmt$0[1];
           return function(c)
            {if(40 <= c)
              if(92 === c)
               var str=_i_,switch$0=2;
              else
               var switch$0=127 <= c?0:1;
             else
              if(32 <= c)
               if(39 <= c)var str=_j_,switch$0=2;else var switch$0=1;
              else
               if(14 <= c)
                var switch$0=0;
               else
                switch(c)
                 {case 8:var str=_k_,switch$0=2;break;
                  case 9:var str=_l_,switch$0=2;break;
                  case 10:var str=_m_,switch$0=2;break;
                  case 13:var str=_n_,switch$0=2;break;
                  default:var switch$0=0}
             switch(switch$0)
              {case 0:
                var s=caml_create_bytes(4);
                caml_string_unsafe_set(s,0,92);
                caml_string_unsafe_set(s,1,48 + (c / 100 | 0) | 0);
                caml_string_unsafe_set(s,2,48 + ((c / 10 | 0) % 10 | 0) | 0);
                caml_string_unsafe_set(s,3,48 + (c % 10 | 0) | 0);
                var str=s;
                break;
               case 1:
                var s$0=caml_create_bytes(1);
                caml_string_unsafe_set(s$0,0,c);
                var str=s$0;
                break
               }
             var l=caml_ml_string_length(str),res=make(l + 2 | 0,39);
             caml_blit_string(str,0,res,1,l);
             var new_acc=[4,acc$0,res];
             return make_printf(k$0,o,new_acc,rest$0)};
          case 2:
           var rest$1=fmt$0[2],pad=fmt$0[1];
           return make_padding
                   (k$0,o,acc$0,rest$1,pad,function(str){return str});
          case 3:
           var rest$2=fmt$0[2],pad$0=fmt$0[1];
           return make_padding(k$0,o,acc$0,rest$2,pad$0,string_to_caml_string);
          case 4:
           var rest$3=fmt$0[4],prec=fmt$0[3],pad$1=fmt$0[2],iconv=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$3,pad$1,prec,convert_int,iconv);
          case 5:
           var
            rest$4=fmt$0[4],
            prec$0=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$0=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$4,pad$2,prec$0,convert_int32,iconv$0);
          case 6:
           var
            rest$5=fmt$0[4],
            prec$1=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$1=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$5,pad$3,prec$1,convert_nativeint,iconv$1);
          case 7:
           var
            rest$6=fmt$0[4],
            prec$2=fmt$0[3],
            pad$4=fmt$0[2],
            iconv$2=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$6,pad$4,prec$2,convert_int64,iconv$2);
          case 8:
           var rest$7=fmt$0[4],prec$3=fmt$0[3],pad$5=fmt$0[2],fconv=fmt$0[1];
           if(typeof pad$5 === "number")
            {if(typeof prec$3 === "number")
              return 0 === prec$3
                      ?function(x)
                        {var str=convert_float(fconv,default_float_precision,x);
                         return make_printf(k$0,o,[4,acc$0,str],rest$7)}
                      :function(p,x)
                        {var str=convert_float(fconv,p,x);
                         return make_printf(k$0,o,[4,acc$0,str],rest$7)};
             var p=prec$3[1];
             return function(x)
              {var str=convert_float(fconv,p,x);
               return make_printf(k$0,o,[4,acc$0,str],rest$7)}}
           else
            {if(0 === pad$5[0])
              {var _k$_=pad$5[2],_la_=pad$5[1];
               if(typeof prec$3 === "number")
                return 0 === prec$3
                        ?function(x)
                          {var
                            str=convert_float(fconv,default_float_precision,x),
                            str$0=fix_padding(_la_,_k$_,str);
                           return make_printf(k$0,o,[4,acc$0,str$0],rest$7)}
                        :function(p,x)
                          {var str=fix_padding(_la_,_k$_,convert_float(fconv,p,x));
                           return make_printf(k$0,o,[4,acc$0,str],rest$7)};
               var p$0=prec$3[1];
               return function(x)
                {var str=fix_padding(_la_,_k$_,convert_float(fconv,p$0,x));
                 return make_printf(k$0,o,[4,acc$0,str],rest$7)}}
             var _lb_=pad$5[1];
             if(typeof prec$3 === "number")
              return 0 === prec$3
                      ?function(w,x)
                        {var
                          str=convert_float(fconv,default_float_precision,x),
                          str$0=fix_padding(_lb_,w,str);
                         return make_printf(k$0,o,[4,acc$0,str$0],rest$7)}
                      :function(w,p,x)
                        {var str=fix_padding(_lb_,w,convert_float(fconv,p,x));
                         return make_printf(k$0,o,[4,acc$0,str],rest$7)};
             var p$1=prec$3[1];
             return function(w,x)
              {var str=fix_padding(_lb_,w,convert_float(fconv,p$1,x));
               return make_printf(k$0,o,[4,acc$0,str],rest$7)}}
          case 9:
           var rest$8=fmt$0[2],pad$6=fmt$0[1];
           return make_padding(k$0,o,acc$0,rest$8,pad$6,string_of_bool);
          case 10:
           var fmt$1=fmt$0[1],acc$1=[7,acc$0],acc$0=acc$1,fmt$0=fmt$1;
           continue;
          case 11:
           var
            fmt$2=fmt$0[2],
            str=fmt$0[1],
            acc$2=[2,acc$0,str],
            acc$0=acc$2,
            fmt$0=fmt$2;
           continue;
          case 12:
           var
            fmt$3=fmt$0[2],
            chr=fmt$0[1],
            acc$3=[3,acc$0,chr],
            acc$0=acc$3,
            fmt$0=fmt$3;
           continue;
          case 13:
           var rest$9=fmt$0[3],sub_fmtty=fmt$0[2],buf=buffer_create(16);
           bprint_fmtty(buf,sub_fmtty);
           var ty=buffer_contents(buf);
           return function(str)
            {return make_printf(k$0,o,[4,acc$0,ty],rest$9)};
          case 14:
           var rest$10=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var fmt=param[1];
             return make_printf
                     (k$0,o,acc$0,concat_fmt(recast(fmt,fmtty),rest$10))};
          case 15:
           var rest$11=fmt$0[1];
           return function(f,x)
            {return make_printf
                     (k$0,
                      o,
                      [6,acc$0,function(o){return caml_call2(f,o,x)}],
                      rest$11)};
          case 16:
           var rest$12=fmt$0[1];
           return function(f){return make_printf(k$0,o,[6,acc$0,f],rest$12)};
          case 17:
           var
            fmt$4=fmt$0[2],
            fmting_lit=fmt$0[1],
            acc$4=[0,acc$0,fmting_lit],
            acc$0=acc$4,
            fmt$0=fmt$4;
           continue;
          case 18:
           var _k9_=fmt$0[1];
           if(0 === _k9_[0])
            {var
              rest$13=fmt$0[2],
              match=_k9_[1],
              fmt$5=match[1],
              k$3=
               function(acc,k,rest)
                {function k$0(koc,kacc)
                  {return make_printf(k,koc,[1,acc,[0,kacc]],rest)}
                 return k$0},
              k$1=k$3(acc$0,k$0,rest$13),
              k$0=k$1,
              acc$0=0,
              fmt$0=fmt$5;
             continue}
           var
            rest$14=fmt$0[2],
            match$0=_k9_[1],
            fmt$6=match$0[1],
            k$4=
             function(acc,k,rest)
              {function k$0(koc,kacc)
                {return make_printf(k,koc,[1,acc,[1,kacc]],rest)}
               return k$0},
            k$2=k$4(acc$0,k$0,rest$14),
            k$0=k$2,
            acc$0=0,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_bu_];
          case 20:
           var rest$15=fmt$0[3],new_acc=[8,acc$0,_bv_];
           return function(param){return make_printf(k$0,o,new_acc,rest$15)};
          case 21:
           var rest$16=fmt$0[2];
           return function(n)
            {var new_acc=[4,acc$0,caml_format_int(_bw_,n)];
             return make_printf(k$0,o,new_acc,rest$16)};
          case 22:
           var rest$17=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];
             return make_printf(k$0,o,new_acc,rest$17)};
          case 23:
           var rest$18=fmt$0[2],ign=fmt$0[1];
           if(counter < 50)
            {var counter$1=counter + 1 | 0;
             return make_ignored_param$0(counter$1,k$0,o,acc$0,ign,rest$18)}
           return caml_trampoline_return
                   (make_ignored_param$0,[0,k$0,o,acc$0,ign,rest$18]);
          default:
           var
            rest$19=fmt$0[3],
            f=fmt$0[2],
            arity=fmt$0[1],
            _k__=caml_call1(f,0);
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return make_custom$0(counter$0,k$0,o,acc$0,rest$19,arity,_k__)}
           return caml_trampoline_return
                   (make_custom$0,[0,k$0,o,acc$0,rest$19,arity,_k__])}}
    function make_ignored_param$0(counter,k,o,acc,ign,fmt)
     {if(typeof ign === "number")
       switch(ign)
        {case 0:
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return make_invalid_arg(counter$0,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt]);
         case 1:
          if(counter < 50)
           {var counter$1=counter + 1 | 0;
            return make_invalid_arg(counter$1,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt]);
         case 2:throw [0,Assert_failure,_bx_];
         default:
          if(counter < 50)
           {var counter$2=counter + 1 | 0;
            return make_invalid_arg(counter$2,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt])}
      else
       switch(ign[0])
        {case 0:
          if(counter < 50)
           {var counter$3=counter + 1 | 0;
            return make_invalid_arg(counter$3,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt]);
         case 1:
          if(counter < 50)
           {var counter$4=counter + 1 | 0;
            return make_invalid_arg(counter$4,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt]);
         case 2:
          if(counter < 50)
           {var counter$5=counter + 1 | 0;
            return make_invalid_arg(counter$5,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt]);
         case 3:
          if(counter < 50)
           {var counter$6=counter + 1 | 0;
            return make_invalid_arg(counter$6,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt]);
         case 4:
          if(counter < 50)
           {var counter$7=counter + 1 | 0;
            return make_invalid_arg(counter$7,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt]);
         case 5:
          if(counter < 50)
           {var counter$8=counter + 1 | 0;
            return make_invalid_arg(counter$8,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt]);
         case 6:
          if(counter < 50)
           {var counter$9=counter + 1 | 0;
            return make_invalid_arg(counter$9,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt]);
         case 7:
          if(counter < 50)
           {var counter$10=counter + 1 | 0;
            return make_invalid_arg(counter$10,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt]);
         case 8:
          if(counter < 50)
           {var counter$11=counter + 1 | 0;
            return make_invalid_arg(counter$11,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt]);
         case 9:
          var fmtty=ign[2];
          if(counter < 50)
           {var counter$14=counter + 1 | 0;
            return make_from_fmtty$0(counter$14,k,o,acc,fmtty,fmt)}
          return caml_trampoline_return
                  (make_from_fmtty$0,[0,k,o,acc,fmtty,fmt]);
         case 10:
          if(counter < 50)
           {var counter$12=counter + 1 | 0;
            return make_invalid_arg(counter$12,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt]);
         default:
          if(counter < 50)
           {var counter$13=counter + 1 | 0;
            return make_invalid_arg(counter$13,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt])}}
    function make_from_fmtty$0(counter,k,o,acc,fmtty,fmt)
     {if(typeof fmtty === "number")
       {if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return make_invalid_arg(counter$0,k,o,acc,fmt)}
        return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt])}
      else
       switch(fmtty[0])
        {case 0:
          var rest=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest,fmt)};
         case 1:
          var rest$0=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$0,fmt)};
         case 2:
          var rest$1=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$1,fmt)};
         case 3:
          var rest$2=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$2,fmt)};
         case 4:
          var rest$3=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$3,fmt)};
         case 5:
          var rest$4=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$4,fmt)};
         case 6:
          var rest$5=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$5,fmt)};
         case 7:
          var rest$6=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$6,fmt)};
         case 8:
          var rest$7=fmtty[2];
          return function(param){return make_from_fmtty(k,o,acc,rest$7,fmt)};
         case 9:
          var
           rest$8=fmtty[3],
           ty2=fmtty[2],
           ty1=fmtty[1],
           ty=trans(symm(ty1),ty2);
          return function(param)
           {return make_from_fmtty(k,o,acc,concat_fmtty(ty,rest$8),fmt)};
         case 10:
          var rest$9=fmtty[1];
          return function(param,_k8_)
           {return make_from_fmtty(k,o,acc,rest$9,fmt)};
         case 11:
          var rest$10=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$10,fmt)};
         case 12:
          var rest$11=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$11,fmt)};
         case 13:throw [0,Assert_failure,_by_];
         default:throw [0,Assert_failure,_bz_]}}
    function make_invalid_arg(counter,k,o,acc,fmt)
     {var _k7_=[8,acc,_bA_];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,o,_k7_,fmt)}
      return caml_trampoline_return(make_printf$0,[0,k,o,_k7_,fmt])}
    function make_custom$0(counter,k,o,acc,rest,arity,f)
     {if(arity)
       {var arity$0=arity[1];
        return function(x)
         {return make_custom(k,o,acc,rest,arity$0,caml_call1(f,x))}}
      var _k6_=[4,acc,f];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,o,_k6_,rest)}
      return caml_trampoline_return(make_printf$0,[0,k,o,_k6_,rest])}
    function make_printf(k,o,acc,fmt)
     {return caml_trampoline(make_printf$0(0,k,o,acc,fmt))}
    function make_ignored_param(k,o,acc,ign,fmt)
     {return caml_trampoline(make_ignored_param$0(0,k,o,acc,ign,fmt))}
    function make_from_fmtty(k,o,acc,fmtty,fmt)
     {return caml_trampoline(make_from_fmtty$0(0,k,o,acc,fmtty,fmt))}
    function make_custom(k,o,acc,rest,arity,f)
     {return caml_trampoline(make_custom$0(0,k,o,acc,rest,arity,f))}
    function fn_of_padding_precision(k,o,fmt,pad,prec)
     {if(typeof pad === "number")
       {if(typeof prec === "number")
         {if(0 === prec)
           {var _kC_=make_iprintf(k,o,fmt);return function(_kU_){return _kC_}}
          var _kD_=make_iprintf(k,o,fmt),_kE_=function(_kT_){return _kD_};
          return function(_kS_){return _kE_}}
        var _kF_=make_iprintf(k,o,fmt);
        return function(_kR_){return _kF_}}
      else
       {if(0 === pad[0])
         {if(typeof prec === "number")
           {if(0 === prec)
             {var _kG_=make_iprintf(k,o,fmt);
              return function(_k5_){return _kG_}}
            var _kH_=make_iprintf(k,o,fmt),_kI_=function(_k4_){return _kH_};
            return function(_k3_){return _kI_}}
          var _kJ_=make_iprintf(k,o,fmt);
          return function(_k2_){return _kJ_}}
        if(typeof prec === "number")
         {if(0 === prec)
           {var _kK_=make_iprintf(k,o,fmt),_kL_=function(_k1_){return _kK_};
            return function(_k0_){return _kL_}}
          var
           _kM_=make_iprintf(k,o,fmt),
           _kN_=function(_kZ_){return _kM_},
           _kO_=function(_kY_){return _kN_};
          return function(_kX_){return _kO_}}
        var _kP_=make_iprintf(k,o,fmt),_kQ_=function(_kW_){return _kP_};
        return function(_kV_){return _kQ_}}}
    function make_iprintf$0(counter,k,o,fmt)
     {var k$0=k,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call1(k$0,o);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1],_jT_=make_iprintf(k$0,o,rest);
           return function(_kB_){return _jT_};
          case 1:
           var rest$0=fmt$0[1],_jU_=make_iprintf(k$0,o,rest$0);
           return function(_kA_){return _jU_};
          case 2:
           var _jV_=fmt$0[1];
           if(typeof _jV_ === "number")
            {var rest$1=fmt$0[2],_jW_=make_iprintf(k$0,o,rest$1);
             return function(_kw_){return _jW_}}
           else
            {if(0 === _jV_[0])
              {var rest$2=fmt$0[2],_jX_=make_iprintf(k$0,o,rest$2);
               return function(_kz_){return _jX_}}
             var
              rest$3=fmt$0[2],
              _jY_=make_iprintf(k$0,o,rest$3),
              _jZ_=function(_ky_){return _jY_};
             return function(_kx_){return _jZ_}}
          case 3:
           var _j0_=fmt$0[1];
           if(typeof _j0_ === "number")
            {var rest$4=fmt$0[2],_j1_=make_iprintf(k$0,o,rest$4);
             return function(_ks_){return _j1_}}
           else
            {if(0 === _j0_[0])
              {var rest$5=fmt$0[2],_j2_=make_iprintf(k$0,o,rest$5);
               return function(_kv_){return _j2_}}
             var
              rest$6=fmt$0[2],
              _j3_=make_iprintf(k$0,o,rest$6),
              _j4_=function(_ku_){return _j3_};
             return function(_kt_){return _j4_}}
          case 4:
           var rest$7=fmt$0[4],prec=fmt$0[3],pad=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$7,pad,prec);
          case 5:
           var rest$8=fmt$0[4],prec$0=fmt$0[3],pad$0=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$8,pad$0,prec$0);
          case 6:
           var rest$9=fmt$0[4],prec$1=fmt$0[3],pad$1=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$9,pad$1,prec$1);
          case 7:
           var rest$10=fmt$0[4],prec$2=fmt$0[3],pad$2=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$10,pad$2,prec$2);
          case 8:
           var rest$11=fmt$0[4],prec$3=fmt$0[3],pad$3=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$11,pad$3,prec$3);
          case 9:
           var _j5_=fmt$0[1];
           if(typeof _j5_ === "number")
            {var rest$12=fmt$0[2],_j6_=make_iprintf(k$0,o,rest$12);
             return function(_ko_){return _j6_}}
           else
            {if(0 === _j5_[0])
              {var rest$13=fmt$0[2],_j7_=make_iprintf(k$0,o,rest$13);
               return function(_kr_){return _j7_}}
             var
              rest$14=fmt$0[2],
              _j8_=make_iprintf(k$0,o,rest$14),
              _j9_=function(_kq_){return _j8_};
             return function(_kp_){return _j9_}}
          case 10:var fmt$1=fmt$0[1],fmt$0=fmt$1;continue;
          case 11:var fmt$2=fmt$0[2],fmt$0=fmt$2;continue;
          case 12:var fmt$3=fmt$0[2],fmt$0=fmt$3;continue;
          case 13:
           var rest$15=fmt$0[3],_j__=make_iprintf(k$0,o,rest$15);
           return function(_kn_){return _j__};
          case 14:
           var rest$16=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var fmt=param[1];
             return make_iprintf(k$0,o,concat_fmt(recast(fmt,fmtty),rest$16))};
          case 15:
           var
            rest$17=fmt$0[1],
            _j$_=make_iprintf(k$0,o,rest$17),
            _ka_=function(_km_){return _j$_};
           return function(_kl_){return _ka_};
          case 16:
           var rest$18=fmt$0[1],_kb_=make_iprintf(k$0,o,rest$18);
           return function(_kk_){return _kb_};
          case 17:var fmt$4=fmt$0[2],fmt$0=fmt$4;continue;
          case 18:
           var _kc_=fmt$0[1];
           if(0 === _kc_[0])
            {var
              rest$19=fmt$0[2],
              match=_kc_[1],
              fmt$5=match[1],
              k$3=
               function(k,rest)
                {function k$0(koc){return make_iprintf(k,koc,rest)}return k$0},
              k$1=k$3(k$0,rest$19),
              k$0=k$1,
              fmt$0=fmt$5;
             continue}
           var
            rest$20=fmt$0[2],
            match$0=_kc_[1],
            fmt$6=match$0[1],
            k$4=
             function(k,rest)
              {function k$0(koc){return make_iprintf(k,koc,rest)}return k$0},
            k$2=k$4(k$0,rest$20),
            k$0=k$2,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_bB_];
          case 20:
           var rest$21=fmt$0[3],_kd_=make_iprintf(k$0,o,rest$21);
           return function(_kj_){return _kd_};
          case 21:
           var rest$22=fmt$0[2],_ke_=make_iprintf(k$0,o,rest$22);
           return function(_ki_){return _ke_};
          case 22:
           var rest$23=fmt$0[1],_kf_=make_iprintf(k$0,o,rest$23);
           return function(_kh_){return _kf_};
          case 23:
           var rest$24=fmt$0[2],ign=fmt$0[1],_kg_=0;
           return make_ignored_param
                   (function(x,param){return caml_call1(k$0,x)},
                    o,
                    _kg_,
                    ign,
                    rest$24);
          default:
           var rest$25=fmt$0[3],arity=fmt$0[1];
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return fn_of_custom_arity$0(counter$0,k$0,o,rest$25,arity)}
           return caml_trampoline_return
                   (fn_of_custom_arity$0,[0,k$0,o,rest$25,arity])}}
    function fn_of_custom_arity$0(counter,k,o,fmt,param)
     {if(param)
       {var arity=param[1],_jR_=fn_of_custom_arity(k,o,fmt,arity);
        return function(_jS_){return _jR_}}
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_iprintf$0(counter$0,k,o,fmt)}
      return caml_trampoline_return(make_iprintf$0,[0,k,o,fmt])}
    function make_iprintf(k,o,fmt)
     {return caml_trampoline(make_iprintf$0(0,k,o,fmt))}
    function fn_of_custom_arity(k,o,fmt,param)
     {return caml_trampoline(fn_of_custom_arity$0(0,k,o,fmt,param))}
    function output_acc(o,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           output_acc(o,p);
           return output_string(o,s);
          case 1:
           var _jP_=acc$0[2],_jQ_=acc$0[1];
           if(0 === _jP_[0])
            {var acc$1=_jP_[1];
             output_acc(o,_jQ_);
             output_string(o,_bC_);
             var acc$0=acc$1;
             continue}
           var acc$2=_jP_[1];
           output_acc(o,_jQ_);
           output_string(o,_bD_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           output_acc(o,p$2);
           return caml_call1(f,o);
          case 7:var p$3=acc$0[1];output_acc(o,p$3);return caml_ml_flush(o);
          case 8:
           var msg=acc$0[2],p$4=acc$0[1];
           output_acc(o,p$4);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           output_acc(o,p$0);
           return output_string(o,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
           output_acc(o,p$1);
           return caml_ml_output_char(o,c)}}
    function strput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           strput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _jN_=acc$0[2],_jO_=acc$0[1];
           if(0 === _jN_[0])
            {var acc$1=_jN_[1];
             strput_acc(b,_jO_);
             add_string(b,_bE_);
             var acc$0=acc$1;
             continue}
           var acc$2=_jN_[1];
           strput_acc(b,_jO_);
           add_string(b,_bF_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           strput_acc(b,p$2);
           return add_string(b,caml_call1(f,0));
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           strput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           strput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
           strput_acc(b,p$1);
           var pos=b[2];
           if(b[3] <= pos)resize(b,1);
           caml_string_unsafe_set(b[1],pos,c);
           b[2] = pos + 1 | 0;
           return 0}}
    function fprintf(oc,fmt$0)
     {var fmt=fmt$0[1],_jM_=0;
      return make_printf
              (function(o,acc){output_acc(o,acc);return 0},oc,_jM_,fmt)}
    function printf(fmt){return fprintf(stdout,fmt)}
    function ksprintf(k,param)
     {var fmt=param[1];
      function k$0(param,acc)
       {var
         n$0=64,
         n=max_string_length < 64?max_string_length:n$0,
         s=caml_create_bytes(n),
         buf=[0,s,0,n,s];
        strput_acc(buf,acc);
        return caml_call1(k,sub_string(buf[1],0,buf[2]))}
      return make_printf(k$0,0,0,fmt)}
    function sprintf(fmt){return ksprintf(function(s){return s},fmt)}
    var printers=[0,0];
    function field(x,i$1)
     {var a=x[i$1 + 1];
      if(1 - (typeof a === "number"))
       {if(caml_obj_tag(a) === 252)return caml_call1(sprintf(_bG_),a);
        if(caml_obj_tag(a) === 253)
         {var s=caml_format_float(_e_,a),l=caml_ml_string_length(s),i=0;
          for(;;)
           {if(l <= i)return _a_(s,_d_);
            var
             match=caml_string_get(s,i),
             switch$0=48 <= match?58 <= match?0:1:45 === match?1:0;
            if(switch$0){var i$0=i + 1 | 0,i=i$0;continue}
            return s}}
        return _bH_}
      return caml_call1(sprintf(_bI_),a)}
    function other_fields(x,i)
     {if(x.length - 1 <= i)return _bJ_;
      var _jK_=other_fields(x,i + 1 | 0),_jL_=field(x,i);
      return caml_call2(sprintf(_bK_),_jL_,_jK_)}
    function fields(x)
     {var match=x.length - 1;
      if(2 < match >>> 0)
       {var _jH_=other_fields(x,2),_jI_=field(x,1);
        return caml_call2(sprintf(_bL_),_jI_,_jH_)}
      switch(match)
       {case 0:return _bM_;
        case 1:return _bN_;
        default:var _jJ_=field(x,1);return caml_call1(sprintf(_bO_),_jJ_)}}
    function to_string(x)
     {function conv(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var tl=param$0[2],hd=param$0[1];
            try {var _jF_=caml_call1(hd,x),_jE_=_jF_}catch(_jG_){var _jE_=0}
            if(_jE_){var s=_jE_[1];return s}
            var param$0=tl;
            continue}
          if(x === Out_of_memory)return _bP_;
          if(x === Stack_overflow)return _bQ_;
          if(x[1] === Match_failure)
           {var match=x[2],char$0=match[3],line=match[2],file=match[1];
            return caml_call5
                    (sprintf(locfmt),file,line,char$0,char$0 + 5 | 0,_bR_)}
          if(x[1] === Assert_failure)
           {var
             match$0=x[2],
             char$1=match$0[3],
             line$0=match$0[2],
             file$0=match$0[1];
            return caml_call5
                    (sprintf(locfmt),file$0,line$0,char$1,char$1 + 6 | 0,_bS_)}
          if(x[1] === Undefined_recursive_module)
           {var
             match$1=x[2],
             char$2=match$1[3],
             line$1=match$1[2],
             file$1=match$1[1];
            return caml_call5
                    (sprintf(locfmt),file$1,line$1,char$2,char$2 + 6 | 0,_bT_)}
          if(0 === caml_obj_tag(x))
           {var constructor=x[1][1];return _a_(constructor,fields(x))}
          return x[1]}}
      return conv(printers[1])}
    function print_backtrace(outchan)
     {var
       raw_backtrace=caml_get_exception_raw_backtrace(0),
       a=caml_convert_raw_backtrace(raw_backtrace),
       backtrace=[0,a];
      if(backtrace)
       {var _jC_=a.length - 1 - 1 | 0,_jB_=0;
        if(! (_jC_ < 0))
         {var i=_jB_;
          for(;;)
           {var
             slot=caml_check_bound(a,i)[i + 1],
             info$0=
              function(i)
               {function info(is_raise)
                 {return is_raise?0 === i?_bU_:_bV_:0 === i?_bW_:_bX_}
                return info},
             info=info$0(i);
            if(0 === slot[0])
             var
              _ju_=slot[5],
              _jv_=slot[4],
              _jw_=slot[3],
              _jx_=slot[6]?_bY_:_b0_,
              _jy_=slot[2],
              _jz_=info(slot[1]),
              match=
               [0,caml_call6(sprintf(_bZ_),_jz_,_jy_,_jx_,_jw_,_jv_,_ju_)];
            else
             if(slot[1])
              var match=0;
             else
              var _jA_=info(0),match=[0,caml_call1(sprintf(_b1_),_jA_)];
            if(match){var str=match[1];caml_call1(fprintf(outchan,_b2_),str)}
            var _jD_=i + 1 | 0;
            if(_jC_ !== i){var i=_jD_;continue}
            break}}
        return 0}
      return fprintf(outchan,_b3_)}
    function register_printer(fn){printers[1] = [0,fn,printers[1]];return 0}
    function full_init(s,seed)
     {var seed$0=0 === seed.length - 1?[0,0]:seed,l=seed$0.length - 1,i$0=0;
      for(;;)
       {caml_check_bound(s[1],i$0)[i$0 + 1] = i$0;
        var _jt_=i$0 + 1 | 0;
        if(54 !== i$0){var i$0=_jt_;continue}
        var accu=[0,_b4_],_jp_=54 + max(55,l) | 0,_jo_=0;
        if(! (_jp_ < 0))
         {var i=_jo_;
          for(;;)
           {var
             j=i % 55 | 0,
             k=caml_mod(i,l),
             x=caml_check_bound(seed$0,k)[k + 1],
             str=_a_(accu[1],caml_new_string("" + x));
            accu[1] = caml_md5_string(str,0,caml_ml_string_length(str));
            var
             _jq_=accu[1],
             _jk_=caml_string_get(_jq_,3) << 24,
             _jl_=caml_string_get(_jq_,2) << 16,
             _jm_=caml_string_get(_jq_,1) << 8,
             _jn_=((caml_string_get(_jq_,0) + _jm_ | 0) + _jl_ | 0) + _jk_ | 0,
             _jr_=(caml_check_bound(s[1],j)[j + 1] ^ _jn_) & 1073741823;
            caml_check_bound(s[1],j)[j + 1] = _jr_;
            var _js_=i + 1 | 0;
            if(_jp_ !== i){var i=_js_;continue}
            break}}
        s[2] = 0;
        return 0}}
    function make$0(seed)
     {var result=[0,caml_make_vect(55,0),0];
      full_init(result,seed);
      return result}
    function bits(s)
     {s[2] = (s[2] + 1 | 0) % 55 | 0;
      var
       _jh_=s[2],
       curval=caml_check_bound(s[1],_jh_)[_jh_ + 1],
       _ji_=(s[2] + 24 | 0) % 55 | 0,
       newval=
        caml_check_bound(s[1],_ji_)[_ji_ + 1]
        +
        (curval ^ (curval >>> 25 | 0) & 31)
        |
        0,
       newval30=newval & 1073741823,
       _jj_=s[2];
      caml_check_bound(s[1],_jj_)[_jj_ + 1] = newval30;
      return newval30}
    function int$0(s,bound)
     {if(! (1073741823 < bound))
       if(0 < bound)
        for(;;)
         {var r=bits(s),v=caml_mod(r,bound);
          if(((1073741823 - bound | 0) + 1 | 0) < (r - v | 0))continue;
          return v}
      return invalid_arg(_b5_)}
    var default$0=[0,_b6_.slice(),0];
    function int$1(bound){return int$0(default$0,bound)}
    function self_init(param)
     {var seed=caml_sys_random_seed(0);return full_init(default$0,seed)}
    function ongoing_traversal(h)
     {var _jf_=h.length - 1 < 4?1:0,_jg_=_jf_ || (h[4] < 0?1:0);return _jg_}
    function flip_ongoing_traversal(h){h[4] = - h[4] | 0;return 0}
    try
     {var _fp_=caml_sys_getenv(_fo_),params=_fp_}
    catch(_jd_)
     {_jd_ = caml_wrap_exception(_jd_);
      if(_jd_ !== Not_found)throw _jd_;
      try
       {var _fn_=caml_sys_getenv(_fm_),_b8_=_fn_}
      catch(_je_)
       {_je_ = caml_wrap_exception(_je_);
        if(_je_ !== Not_found)throw _je_;
        var _b8_=_b7_}
      var params=_b8_}
    var
     randomized_default=contains(params,82),
     prng=[246,function(_jc_){return make$0(caml_sys_random_seed(0))}];
    function create$0(opt,initial_size)
     {if(opt)var sth=opt[1],random=sth;else var random=randomized_default;
      var x=16;
      for(;;)
       {if(! (initial_size <= x))
         if(! (max_array_length < (x * 2 | 0)))
          {var x$0=x * 2 | 0,x=x$0;continue}
        if(random)
         var
          _ja_=caml_obj_tag(prng),
          _jb_=250 === _ja_?prng[1]:246 === _ja_?force_lazy_block(prng):prng,
          seed=bits(_jb_);
        else
         var seed=0;
        return [0,0,caml_make_vect(x,0),seed,x]}}
    function resize$0(indexfun,h)
     {var
       odata=h[2],
       osize=odata.length - 1,
       nsize=osize * 2 | 0,
       _i3_=nsize < max_array_length?1:0;
      if(_i3_)
       {var
         ndata=caml_make_vect(nsize,0),
         ndata_tail=caml_make_vect(nsize,0),
         inplace=1 - ongoing_traversal(h);
        h[2] = ndata;
        var _i5_=osize - 1 | 0,_i4_=0;
        if(! (_i5_ < 0))
         {var i$0=_i4_;
          a:
          for(;;)
           {var cell$1=caml_check_bound(odata,i$0)[i$0 + 1],cell=cell$1;
            for(;;)
             {if(cell)
               {var
                 key=cell[1],
                 data=cell[2],
                 next=cell[3],
                 cell$0=inplace?cell:[0,key,data,0],
                 nidx=caml_call2(indexfun,h,key),
                 match=caml_check_bound(ndata_tail,nidx)[nidx + 1];
                if(match)
                 match[3] = cell$0;
                else
                 caml_check_bound(ndata,nidx)[nidx + 1] = cell$0;
                caml_check_bound(ndata_tail,nidx)[nidx + 1] = cell$0;
                var cell=next;
                continue}
              var _i$_=i$0 + 1 | 0;
              if(_i5_ !== i$0){var i$0=_i$_;continue a}
              break}
            break}}
        if(inplace)
         {var _i7_=nsize - 1 | 0,_i6_=0;
          if(! (_i7_ < 0))
           {var i=_i6_;
            for(;;)
             {var match$0=caml_check_bound(ndata_tail,i)[i + 1];
              if(match$0)match$0[3] = 0;
              var _i__=i + 1 | 0;
              if(_i7_ !== i){var i=_i__;continue}
              break}}
          var _i8_=0}
        else
         var _i8_=inplace;
        var _i9_=_i8_}
      else
       var _i9_=_i3_;
      return _i9_}
    function key_index(h,key)
     {return 3 <= h.length - 1
              ?caml_hash(10,100,h[3],key) & (h[2].length - 1 - 1 | 0)
              :caml_mod(caml_hash_univ_param(10,100,key),h[2].length - 1)}
    function add$0(h,key,data)
     {var
       i=key_index(h,key),
       bucket=[0,key,data,caml_check_bound(h[2],i)[i + 1]];
      caml_check_bound(h[2],i)[i + 1] = bucket;
      h[1] = h[1] + 1 | 0;
      var _i2_=h[2].length - 1 << 1 < h[1]?1:0;
      return _i2_?resize$0(key_index,h):_i2_}
    function find(h,key)
     {var _i1_=key_index(h,key),match=caml_check_bound(h[2],_i1_)[_i1_ + 1];
      if(match)
       {var k1=match[1],d1=match[2],next1=match[3];
        if(0 === caml_compare(key,k1))return d1;
        if(next1)
         {var k2=next1[1],d2=next1[2],next2=next1[3];
          if(0 === caml_compare(key,k2))return d2;
          if(next2)
           {var k3=next2[1],d3=next2[2],next3=next2[3];
            if(0 === caml_compare(key,k3))return d3;
            var param=next3;
            for(;;)
             {if(param)
               {var k=param[1],data=param[2],next=param[3];
                if(0 === caml_compare(key,k))return data;
                var param=next;
                continue}
              throw Not_found}}
          throw Not_found}
        throw Not_found}
      throw Not_found}
    function find_all(h,key)
     {function find_in_bucket(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var k=param$0[1],data=param$0[2],next=param$0[3];
            if(0 === caml_compare(k,key))return [0,data,find_in_bucket(next)];
            var param$0=next;
            continue}
          return 0}}
      var _i0_=key_index(h,key);
      return find_in_bucket(caml_check_bound(h[2],_i0_)[_i0_ + 1])}
    function replace(h,key,data)
     {var
       i=key_index(h,key),
       param$0=caml_check_bound(h[2],i)[i + 1],
       param=param$0;
      for(;;)
       {if(param)
         {var k=param[1],next=param[3];
          if(0 !== caml_compare(k,key)){var param=next;continue}
          param[1] = key;
          param[2] = data;
          var _iX_=0}
        else
         var _iX_=1;
        if(_iX_)
         {caml_check_bound(h[2],i)[i + 1] = [0,key,data,param$0];
          h[1] = h[1] + 1 | 0;
          var _iY_=h[2].length - 1 << 1 < h[1]?1:0;
          if(_iY_)return resize$0(key_index,h);
          var _iZ_=_iY_}
        else
         var _iZ_=_iX_;
        return _iZ_}}
    function fold(f,h,init)
     {function do_bucket(b,accu)
       {var b$0=b,accu$0=accu;
        for(;;)
         {if(b$0)
           {var
             key=b$0[1],
             data=b$0[2],
             b$1=b$0[3],
             accu$1=caml_call3(f,key,data,accu$0),
             b$0=b$1,
             accu$0=accu$1;
            continue}
          return accu$0}}
      var old_trav=ongoing_traversal(h);
      if(1 - old_trav)flip_ongoing_traversal(h);
      try
       {var d=h[2],accu=[0,init],_iT_=d.length - 1 - 1 | 0,_iS_=0;
        if(! (_iT_ < 0))
         {var i=_iS_;
          for(;;)
           {var _iV_=accu[1];
            accu[1] = do_bucket(caml_check_bound(d,i)[i + 1],_iV_);
            var _iW_=i + 1 | 0;
            if(_iT_ !== i){var i=_iW_;continue}
            break}}
        if(1 - old_trav)flip_ongoing_traversal(h);
        var _iU_=accu[1];
        return _iU_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(old_trav)throw exn;
        flip_ongoing_traversal(h);
        throw exn}}
    function register_exception(name,exn)
     {var slot=caml_obj_tag(exn) === 248?exn:exn[1];
      return caml_register_named_value(name,slot)}
    try
     {caml_sys_getenv(_fl_)}
    catch(_iR_)
     {_iR_ = caml_wrap_exception(_iR_);if(_iR_ !== Not_found)throw _iR_}
    try
     {caml_sys_getenv(_fk_)}
    catch(_iQ_)
     {_iQ_ = caml_wrap_exception(_iQ_);if(_iQ_ !== Not_found)throw _iQ_}
    var
     switch$0=
      caml_string_notequal(os_type,_b9_)
       ?caml_string_notequal(os_type,_b__)?1:0
       :0;
    caml_fresh_oo_id(0);
    function create$1(param)
     {var seq=[];caml_update_dummy(seq,[0,seq,seq]);return seq}
    var compare$0=caml_compare,Storage_map=_J_([0,compare$0]);
    function state_of_result(param)
     {if(0 === param[0]){var x=param[1];return [0,x]}
      var exn=param[1];
      return [1,exn]}
    function underlying(p)
     {var _iP_=p[1];
      switch(_iP_[0])
       {case 0:return p;
        case 1:return p;
        case 2:return p;
        default:
         var p$0=_iP_[1],p$1=underlying(p$0);
         if(1 - (p$1 === p$0?1:0))p[1] = [3,p$1];
         return p$1}}
    function set_promise_state(p,state){p[1] = state;return p}
    var current_storage=[0,Storage_map[1]];
    function concat_regular_callbacks(l1,l2)
     {return typeof l1 === "number"?l2:typeof l2 === "number"?l1:[0,l1,l2]}
    function clean_up_callback_cells(callbacks)
     {if(typeof callbacks !== "number")
       switch(callbacks[0])
        {case 0:
          var
           l2=callbacks[2],
           l1=callbacks[1],
           l1$0=clean_up_callback_cells(l1),
           l2$0=clean_up_callback_cells(l2);
          return concat_regular_callbacks(l1$0,l2$0);
         case 2:if(! callbacks[1][1])return 0;break
         }
      return callbacks}
    function add_regular_callback_list_node(callbacks,node)
     {var
       _iO_=callbacks[1],
       node$0=typeof _iO_ === "number"?node:[0,node,_iO_];
      callbacks[1] = node$0;
      return 0}
    function add_implicitly_removed_callback(callbacks,f)
     {return add_regular_callback_list_node(callbacks,[1,f])}
    var
     async_exception_hook=
      [0,
       function(exn)
        {prerr_string(_cb_);
         prerr_string(to_string(exn));
         caml_ml_output_char(stderr,10);
         print_backtrace(stderr);
         caml_ml_flush(stderr);
         return exit(2)}];
    function handle_with_async_exception_hook(f,v)
     {try
       {var _iN_=caml_call1(f,v);return _iN_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        return caml_call1(async_exception_hook[1],exn)}}
    var Canceled=[248,_cc_,caml_fresh_oo_id(0)];
    function run_callbacks(callbacks,result)
     {if(1 === result[0])
       var _iL_=result[1] === Canceled?1:0,is_canceled=_iL_;
      else
       var is_canceled=0;
      if(is_canceled)
       {var
         _iJ_=callbacks[2],
         iter_callback_list$2=
          function(counter,fs,rest)
           {var fs$0=fs,rest$0=rest;
            for(;;)
             if(typeof fs$0 === "number")
              {if(counter < 50)
                {var counter$0=counter + 1 | 0;
                 return iter_list$0(counter$0,rest$0)}
               return caml_trampoline_return(iter_list$0,[0,rest$0])}
             else
              switch(fs$0[0])
               {case 0:
                 var
                  fs$1=fs$0[2],
                  fs$2=fs$0[1],
                  rest$1=[0,fs$1,rest$0],
                  fs$0=fs$2,
                  rest$0=rest$1;
                 continue;
                case 1:
                 var f=fs$0[2],storage=fs$0[1];
                 current_storage[1] = storage;
                 handle_with_async_exception_hook(f,0);
                 if(counter < 50)
                  {var counter$1=counter + 1 | 0;
                   return iter_list$0(counter$1,rest$0)}
                 return caml_trampoline_return(iter_list$0,[0,rest$0]);
                default:
                 var node=fs$0[1];
                 if(node[4])
                  {node[4] = 0;node[1][2] = node[2];node[2][1] = node[1]}
                 if(counter < 50)
                  {var counter$2=counter + 1 | 0;
                   return iter_list$0(counter$2,rest$0)}
                 return caml_trampoline_return(iter_list$0,[0,rest$0])}},
         iter_list$0=
          function(counter,rest)
           {if(rest)
             {var rest$0=rest[2],fs=rest[1];
              if(counter < 50)
               {var counter$0=counter + 1 | 0;
                return iter_callback_list$2(counter$0,fs,rest$0)}
              return caml_trampoline_return
                      (iter_callback_list$2,[0,fs,rest$0])}
            return 0},
         iter_callback_list=
          function(fs,rest)
           {return caml_trampoline(iter_callback_list$2(0,fs,rest))};
        iter_callback_list(_iJ_,0)}
      var _iK_=callbacks[1];
      function iter_callback_list$1(counter,fs,rest)
       {var fs$0=fs,rest$0=rest;
        for(;;)
         if(typeof fs$0 === "number")
          {if(counter < 50)
            {var counter$0=counter + 1 | 0;return iter_list(counter$0,rest$0)}
           return caml_trampoline_return(iter_list,[0,rest$0])}
         else
          switch(fs$0[0])
           {case 0:
             var
              fs$1=fs$0[2],
              fs$2=fs$0[1],
              rest$1=[0,fs$1,rest$0],
              fs$0=fs$2,
              rest$0=rest$1;
             continue;
            case 1:
             var f=fs$0[1];
             caml_call1(f,result);
             if(counter < 50)
              {var counter$1=counter + 1 | 0;
               return iter_list(counter$1,rest$0)}
             return caml_trampoline_return(iter_list,[0,rest$0]);
            default:
             var _iM_=fs$0[1][1];
             if(_iM_)
              {var f$0=_iM_[1];
               caml_call1(f$0,result);
               if(counter < 50)
                {var counter$2=counter + 1 | 0;
                 return iter_list(counter$2,rest$0)}
               return caml_trampoline_return(iter_list,[0,rest$0])}
             if(counter < 50)
              {var counter$3=counter + 1 | 0;
               return iter_list(counter$3,rest$0)}
             return caml_trampoline_return(iter_list,[0,rest$0])}}
      function iter_list(counter,rest)
       {if(rest)
         {var rest$0=rest[2],fs=rest[1];
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return iter_callback_list$1(counter$0,fs,rest$0)}
          return caml_trampoline_return(iter_callback_list$1,[0,fs,rest$0])}
        return 0}
      function iter_callback_list$0(fs,rest)
       {return caml_trampoline(iter_callback_list$1(0,fs,rest))}
      return iter_callback_list$0(_iK_,0)}
    var
     current_callback_nesting_depth=[0,0],
     deferred_callbacks=create(0),
     default_maximum_callback_nesting_depth=42;
    function run_in_resolution_loop(f)
     {current_callback_nesting_depth[1]
      =
      current_callback_nesting_depth[1]
      +
      1
      |
      0;
      var storage_snapshot=current_storage[1],result$0=caml_call1(f,0);
      if(1 === current_callback_nesting_depth[1])
       for(;;)
        {if(! is_empty(deferred_callbacks))
          {var
            match=take(deferred_callbacks),
            result=match[2],
            callbacks=match[1];
           run_callbacks(callbacks,result);
           continue}
         break}
      current_callback_nesting_depth[1]
      =
      current_callback_nesting_depth[1]
      -
      1
      |
      0;
      current_storage[1] = storage_snapshot;
      return result$0}
    function resolve
     (allow_deferring$0,maximum_callback_nesting_depth$0,p,result)
     {var match=p[1],callbacks=match[1],p$0=set_promise_state(p,result);
      if(allow_deferring$0)
       var sth=allow_deferring$0[1],allow_deferring=sth;
      else
       var allow_deferring=1;
      if(maximum_callback_nesting_depth$0)
       var
        sth$0=maximum_callback_nesting_depth$0[1],
        maximum_callback_nesting_depth=sth$0;
      else
       var
        maximum_callback_nesting_depth=
         default_maximum_callback_nesting_depth;
      var
       should_defer=
        allow_deferring
         ?maximum_callback_nesting_depth <= current_callback_nesting_depth[1]
           ?1
           :0
         :allow_deferring;
      if(should_defer)
       add([0,callbacks,result],deferred_callbacks);
      else
       run_in_resolution_loop
        (function(param){return run_callbacks(callbacks,result)});
      return p$0}
    function run_callback_or_defer_it(opt,f,if_deferred)
     {if(opt)
       var sth=opt[1],run_immediately_and_ensure_tail_call=sth;
      else
       var run_immediately_and_ensure_tail_call=0;
      if(run_immediately_and_ensure_tail_call)return caml_call1(f,0);
      var should_defer=42 <= current_callback_nesting_depth[1]?1:0;
      if(should_defer)
       {var
         match=caml_call1(if_deferred,0),
         deferred_result=match[3],
         deferred_callback=match[2],
         immediate_result=match[1],
         deferred_record=[0,[1,deferred_callback],0,0,0];
        add([0,deferred_record,deferred_result],deferred_callbacks);
        return immediate_result}
      return run_in_resolution_loop(function(param){return caml_call1(f,0)})}
    function wakeup(r,v)
     {var result$0=[0,v],p=underlying(r),_iI_=p[1];
      switch(_iI_[0])
       {case 1:
         return _iI_[1] === Canceled
                 ?0
                 :caml_call1(ksprintf(invalid_arg,_ce_),api_function_name);
        case 2:
         var result=state_of_result(result$0);
         resolve(_cf_,0,p,result);
         return 0;
        default:
         return caml_call1(ksprintf(invalid_arg,_cd_),api_function_name)}}
    function wakeup_later_general(api_function_name,match,result)
     {var p=underlying(match),_iH_=p[1];
      switch(_iH_[0])
       {case 1:
         return _iH_[1] === Canceled
                 ?0
                 :caml_call1(ksprintf(invalid_arg,_ch_),api_function_name);
        case 2:
         var result$0=state_of_result(result);
         resolve(0,_ci_,p,result$0);
         return 0;
        default:
         return caml_call1(ksprintf(invalid_arg,_cg_),api_function_name)}}
    function wakeup_later_exn(r,exn)
     {return wakeup_later_general(_ck_,r,[1,exn])}
    function return$0(v){return [0,[0,v]]}
    function fail(exn){return [0,[1,exn]]}
    var return_unit=return$0(0),return_none=return$0(0);
    function new_pending(how_to_cancel)
     {var state=[2,[0,0,0,how_to_cancel,0]];return [0,state]}
    function task(param){var p=new_pending(1);return [0,p,p]}
    function make_into_proxy(outer_promise,user_provided_promise)
     {var p=underlying(user_provided_promise);
      if(p === outer_promise)return p;
      var _iG_=p[1];
      switch(_iG_[0])
       {case 1:return resolve(_cm_,0,outer_promise,p[1]);
        case 2:
         var
          p_callbacks=_iG_[1],
          match=outer_promise[1],
          outer_callbacks=match[1],
          regular_callbacks=
           concat_regular_callbacks(outer_callbacks[1],p_callbacks[1]),
          cleanups_deferred=outer_callbacks[4] + p_callbacks[4] | 0;
         if(42 < cleanups_deferred)
          var
           regular_callbacks$0=clean_up_callback_cells(regular_callbacks),
           cleanups_deferred$0=0;
         else
          var
           regular_callbacks$0=regular_callbacks,
           cleanups_deferred$0=cleanups_deferred;
         var
          _iE_=p_callbacks[2],
          _iF_=outer_callbacks[2],
          cancel_callbacks=
           typeof _iF_ === "number"
            ?_iE_
            :typeof _iE_ === "number"?_iF_:[0,_iF_,_iE_];
         outer_callbacks[1] = regular_callbacks$0;
         outer_callbacks[2] = cancel_callbacks;
         outer_callbacks[4] = cleanups_deferred$0;
         outer_callbacks[3] = p_callbacks[3];
         set_promise_state(p,[3,outer_promise]);
         return outer_promise;
        default:return resolve(_cl_,0,outer_promise,p[1])}}
    function bind(match,f)
     {var p=underlying(match);
      function create_result_promise_and_callback_if_deferred(param)
       {var match=new_pending([0,p]),saved_storage=current_storage[1];
        function callback(p_result)
         {if(1 === p_result[0])
           {var p$1=underlying(match);resolve(_cn_,0,p$1,p_result);return 0}
          var v=p_result[1];
          current_storage[1] = saved_storage;
          try
           {var _iD_=caml_call1(f,v),p=_iD_}
          catch(exn){exn = caml_wrap_exception(exn);var p=fail(exn)}
          var p$0=underlying(match);
          make_into_proxy(p$0,p);
          return 0}
        return [0,match,callback]}
      var _iB_=p[1];
      switch(_iB_[0])
       {case 1:return [0,_iB_];
        case 2:
         var
          p_callbacks=_iB_[1],
          match$0=create_result_promise_and_callback_if_deferred(0),
          callback=match$0[2],
          p$0=match$0[1];
         add_implicitly_removed_callback(p_callbacks,callback);
         return p$0;
        default:
         var
          v=_iB_[1],
          _iC_=
           function(param)
            {var
              match=create_result_promise_and_callback_if_deferred(0),
              callback=match[2],
              p$0=match[1];
             return [0,p$0,callback,p[1]]};
         return run_callback_or_defer_it
                 (_co_,function(param){return caml_call1(f,v)},_iC_)}}
    function backtrace_bind(add_loc,match,f)
     {var p=underlying(match);
      function create_result_promise_and_callback_if_deferred(param)
       {var match=new_pending([0,p]),saved_storage=current_storage[1];
        function callback(p_result)
         {if(1 === p_result[0])
           {var exn=p_result[1],p$1=underlying(match);
            resolve(_cp_,0,p$1,[1,caml_call1(add_loc,exn)]);
            return 0}
          var v=p_result[1];
          current_storage[1] = saved_storage;
          try
           {var _iA_=caml_call1(f,v),p=_iA_}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            var p=fail(caml_call1(add_loc,exn))}
          var p$0=underlying(match);
          make_into_proxy(p$0,p);
          return 0}
        return [0,match,callback]}
      var _iy_=p[1];
      switch(_iy_[0])
       {case 1:var exn=_iy_[1];return [0,[1,caml_call1(add_loc,exn)]];
        case 2:
         var
          p_callbacks=_iy_[1],
          match$0=create_result_promise_and_callback_if_deferred(0),
          callback=match$0[2],
          p$0=match$0[1];
         add_implicitly_removed_callback(p_callbacks,callback);
         return p$0;
        default:
         var
          v=_iy_[1],
          _iz_=
           function(param)
            {var
              match=create_result_promise_and_callback_if_deferred(0),
              callback=match[2],
              p$0=match[1];
             return [0,p$0,callback,p[1]]};
         return run_callback_or_defer_it
                 (_cq_,function(param){return caml_call1(f,v)},_iz_)}}
    function backtrace_catch(add_loc,f,h)
     {try
       {var _iw_=caml_call1(f,0),p=_iw_}
      catch(exn){exn = caml_wrap_exception(exn);var p=fail(exn)}
      var p$0=underlying(p);
      function create_result_promise_and_callback_if_deferred(param)
       {var match=new_pending([0,p$0]),saved_storage=current_storage[1];
        function callback(p_result)
         {if(1 === p_result[0])
           {var exn=p_result[1];
            current_storage[1] = saved_storage;
            try
             {var _ix_=caml_call1(h,exn),p$0=_ix_}
            catch(exn)
             {exn = caml_wrap_exception(exn);
              var p$0=fail(caml_call1(add_loc,exn))}
            var p$1=underlying(match);
            make_into_proxy(p$1,p$0);
            return 0}
          var p=underlying(match);
          resolve(_cr_,0,p,p_result);
          return 0}
        return [0,match,callback]}
      var _iu_=p$0[1];
      switch(_iu_[0])
       {case 1:
         var
          exn=_iu_[1],
          _iv_=
           function(param)
            {var
              match=create_result_promise_and_callback_if_deferred(0),
              callback=match[2],
              p=match[1];
             return [0,p,callback,p$0[1]]};
         return run_callback_or_defer_it
                 (_cs_,
                  function(param)
                   {return caml_call1(h,caml_call1(add_loc,exn))},
                  _iv_);
        case 2:
         var
          p_callbacks=_iu_[1],
          match=create_result_promise_and_callback_if_deferred(0),
          callback=match[2],
          p$1=match[1];
         add_implicitly_removed_callback(p_callbacks,callback);
         return p$1;
        default:return p$0}}
    function try_bind(f$0,f,h)
     {try
       {var _ir_=caml_call1(f$0,0),p=_ir_}
      catch(exn){exn = caml_wrap_exception(exn);var p=fail(exn)}
      var p$0=underlying(p);
      function create_result_promise_and_callback_if_deferred(param)
       {var match=new_pending([0,p$0]),saved_storage=current_storage[1];
        function callback(p_result)
         {if(1 === p_result[0])
           {var exn=p_result[1];
            current_storage[1] = saved_storage;
            try
             {var _it_=caml_call1(h,exn),p$1=_it_}
            catch(exn){exn = caml_wrap_exception(exn);var p$1=fail(exn)}
            var p$2=underlying(match);
            make_into_proxy(p$2,p$1);
            return 0}
          var v=p_result[1];
          current_storage[1] = saved_storage;
          try
           {var _is_=caml_call1(f,v),p=_is_}
          catch(exn){exn = caml_wrap_exception(exn);var p=fail(exn)}
          var p$0=underlying(match);
          make_into_proxy(p$0,p);
          return 0}
        return [0,match,callback]}
      var _io_=p$0[1];
      switch(_io_[0])
       {case 1:
         var
          exn=_io_[1],
          _iq_=
           function(param)
            {var
              match=create_result_promise_and_callback_if_deferred(0),
              callback=match[2],
              p=match[1];
             return [0,p,callback,p$0[1]]};
         return run_callback_or_defer_it
                 (_cu_,function(param){return caml_call1(h,exn)},_iq_);
        case 2:
         var
          p_callbacks=_io_[1],
          match=create_result_promise_and_callback_if_deferred(0),
          callback=match[2],
          p$1=match[1];
         add_implicitly_removed_callback(p_callbacks,callback);
         return p$1;
        default:
         var
          v=_io_[1],
          _ip_=
           function(param)
            {var
              match=create_result_promise_and_callback_if_deferred(0),
              callback=match[2],
              p=match[1];
             return [0,p,callback,p$0[1]]};
         return run_callback_or_defer_it
                 (_ct_,function(param){return caml_call1(f,v)},_ip_)}}
    function join(ps)
     {var
       p=new_pending([1,ps]),
       number_pending_in_ps=[0,0],
       join_result=[0,_cx_];
      function callback(new_result)
       {if(1 === new_result[0])
         if(1 !== join_result[1][0])join_result[1] = new_result;
        number_pending_in_ps[1] = number_pending_in_ps[1] - 1 | 0;
        var _il_=0 === number_pending_in_ps[1]?1:0;
        if(_il_)
         {var p$0=underlying(p),_im_=join_result[1];
          resolve(_cy_,0,underlying(p$0),_im_);
          var _in_=0}
        else
         var _in_=_il_;
        return _in_}
      var ps$0=ps;
      for(;;)
       {if(ps$0)
         {var ps$1=ps$0[2],p$0=ps$0[1],_ik_=underlying(p$0)[1];
          switch(_ik_[0])
           {case 1:
             if(1 !== join_result[1][0])join_result[1] = _ik_;
             var ps$0=ps$1;
             continue;
            case 2:
             var p_callbacks=_ik_[1];
             number_pending_in_ps[1] = number_pending_in_ps[1] + 1 | 0;
             add_implicitly_removed_callback(p_callbacks,callback);
             var ps$0=ps$1;
             continue;
            default:var ps$0=ps$1;continue}}
        return 0 === number_pending_in_ps[1]?[0,join_result[1]]:p}}
    function nth_resolved(ps,n)
     {var ps$0=ps,n$0=n;
      for(;;)
       {if(ps$0)
         {var ps$1=ps$0[2],p=ps$0[1];
          switch(underlying(p)[1][0])
           {case 1:
             if(0 < n$0){var n$2=n$0 - 1 | 0,ps$0=ps$1,n$0=n$2;continue}
             return p;
            case 2:var ps$0=ps$1;continue;
            default:
             if(0 < n$0){var n$1=n$0 - 1 | 0,ps$0=ps$1,n$0=n$1;continue}
             return p}}
        throw [0,Assert_failure,_cz_]}}
    var
     prng$0=[246,function(_ij_){return make$0([0])}],
     pause_hook=[0,function(_ii_){return 0}],
     s1=create$1(0),
     _cB_=[0,0];
    function wakeup_paused(param)
     {if(s1[2] === s1){_cB_[1] = 0;return 0}
      var seq=create$1(0);
      seq[1][2] = s1[2];
      s1[2][1] = seq[1];
      seq[1] = s1[1];
      s1[1][2] = seq;
      s1[1] = s1;
      s1[2] = s1;
      _cB_[1] = 0;
      var curr=seq[2];
      for(;;)
       {var _ih_=curr !== seq?1:0;
        if(_ih_)
         {if(curr[4])wakeup(curr[3],0);
          var curr$0=curr[2],curr=curr$0;
          continue}
        return _ih_}}
    function register_pause_notifier(f){pause_hook[1] = f;return 0}
    var
     window=joo_global_object,
     undefined$0=undefined,
     array_constructor=window.Array,
     Error$0=[248,_cC_,caml_fresh_oo_id(0)];
    register_exception(_cD_,[0,Error$0,{}]);
    (function(exn){throw exn});
    register_printer
     (function(param)
       {if(param[1] === Error$0)
         {var e=param[2];return [0,caml_js_to_string(e.toString())]}
        return 0});
    register_printer
     (function(e)
       {return e instanceof array_constructor
                ?0
                :[0,caml_js_to_string(e.toString())]});
    caml_fresh_oo_id(0);
    var html_element=window.HTMLElement;
    html_element === undefined$0;
    var json=caml_json(0),overflow_limit=2147483e3;
    function reviver(this$0,key,value)
     {return typeof value == typeof "foo"?caml_js_to_byte_string(value):value}
    var input_reviver=caml_js_wrap_meth_callback(reviver);
    function unsafe_input(s){return json.parse(s,input_reviver)}
    var mlString_constr=dummy_string.constructor;
    function output_reviver(key,value)
     {return value instanceof mlString_constr
              ?caml_bytes_of_string(value)
              :value}
    function output(obj){return json.stringify(obj,output_reviver)}
    var console=caml_js_get_console(0);
    function sleep(d)
     {var match=task(0),w=match[2],t=match[1],d$0=d * 1e3;
      function callback(_ig_){return wakeup(w,_ig_)}
      var id=[0,0];
      function loop(step,param)
       {if(2147483e3 < step)
         var step$0=overflow_limit,remain=step - 2147483e3;
        else
         var step$0=step,remain=0;
        var cb=remain == 0?callback:function(_if_){return loop(remain,_if_)};
        id[1] = [0,window.setTimeout(caml_js_wrap_callback(cb),step$0)];
        return 0}
      loop(d$0,0);
      function f(param)
       {var _ie_=id[1];
        if(_ie_){var x=_ie_[1];id[1] = 0;return window.clearTimeout(x)}
        return 0}
      var p=underlying(t),_ic_=p[1];
      switch(_ic_[0])
       {case 1:
         if(_ic_[1] === Canceled)
          {var
            _id_=
             function(param)
              {return [0,
                       0,
                       function(param)
                        {return handle_with_async_exception_hook(f,0)},
                       _cv_]};
           run_callback_or_defer_it
            (_cw_,
             function(param){return handle_with_async_exception_hook(f,0)},
             _id_)}
         break;
        case 2:
         var
          callbacks=_ic_[1],
          node=[1,current_storage[1],f],
          node$0=typeof callbacks[2] === "number"?node:[0,node,callbacks[2]];
         callbacks[2] = node$0;
         break
        }
      return t}
    function wakeup$0(param)
     {return 1 === param
              ?(window.setTimeout(caml_js_wrap_callback(wakeup_paused),0),0)
              :0}
    register_pause_notifier(wakeup$0);
    function prerr_string$0(s){return console.log(s.toString())}
    async_exception_hook[1]
    =
    function(exn)
     {prerr_string$0(_cE_);
      prerr_string$0(to_string(exn));
      return print_backtrace(stderr)};
    var
     OMQ_Exception=[248,_cF_,caml_fresh_oo_id(0)],
     LocalSocketSet=_A_([0,compare]),
     RemoteSocketMap=_J_([0,compare]),
     pcl_jsapi_start_comm_layer_jsfun=pcl_jsapi_start_comm_layer,
     pcl_jsapi_bind_address_jsfun=pcl_jsapi_bind_address,
     pcl_jsapi_connect_to_address_jsfun=pcl_jsapi_connect_to_address,
     pcl_jsapi_send_msg_jsfun=pcl_jsapi_send_msg,
     pcl_jsapi_util_rand_str$0=pcl_jsapi_util_rand_str;
    function unsafe_wrap_string_arg_fun(f)
     {function f_safe(js_str){return caml_call1(f,caml_js_to_string(js_str))}
      return caml_js_wrap_callback(f_safe)}
    function unsafe_wrap_2string_bool_args_fun(f)
     {function f_safe(js_str1,js_str2,js_bool)
       {return caml_call3
                (f,
                 caml_js_to_string(js_str1),
                 caml_js_to_string(js_str2),
                 js_bool | 0)}
      return caml_js_wrap_callback(f_safe)}
    function unsafe_wrap_3_string_args_fun(f)
     {function f_safe(js_str1,js_str2,js_str3)
       {return caml_call3
                (f,
                 caml_js_to_string(js_str1),
                 caml_js_to_string(js_str2),
                 caml_js_to_string(js_str3))}
      return caml_js_wrap_callback(f_safe)}
    function pcl_util_rand_str(len)
     {var res=pcl_jsapi_util_rand_str$0(len);return caml_js_to_string(res)}
    function resolve_promise(resolver,value)
     {return wakeup_later_general(_cj_,resolver,[0,value])}
    function safe_resolve_promise(resolver,value)
     {try
       {resolve_promise(resolver,value);var _ia_=1;return _ia_}
      catch(_ib_)
       {_ib_ = caml_wrap_exception(_ib_);
        if(_ib_[1] === Invalid_argument)return 0;
        throw _ib_}}
    function safe_reject_promise(resolver,exc)
     {try
       {wakeup_later_exn(resolver,exc);var _h__=1;return _h__}
      catch(_h$_)
       {_h$_ = caml_wrap_exception(_h$_);
        if(_h$_[1] === Invalid_argument)return 0;
        throw _h$_}}
    function make_exn_fail_callback(opt,resolver,reason)
     {if(opt)var sth=opt[1],context=sth;else var context=_cH_;
      var explanation=_a_(context,_a_(_cG_,reason));
      safe_reject_promise(resolver,[0,OMQ_Exception,explanation]);
      return 0}
    function json_stringify(obj){return caml_js_to_string(output(obj))}
    function json_parse(str){return unsafe_input(str.toString())}
    function promise_send_msg(local,remote,msg$0)
     {var match=task(0),resolver=match[2],promise=match[1];
      function ok_callback$0(param){safe_resolve_promise(resolver,0);return 0}
      var _h8_=[0,_a_(_cL_,remote)];
      function fail_callback$0(_h9_)
       {return make_exn_fail_callback(_h8_,resolver,_h9_)}
      var
       from_socket=local.toString(),
       to_socket=remote.toString(),
       msg=msg$0.toString(),
       ok_callback=caml_js_wrap_callback(ok_callback$0),
       fail_callback=unsafe_wrap_string_arg_fun(fail_callback$0);
      pcl_jsapi_send_msg_jsfun
       (from_socket,to_socket,msg,ok_callback,fail_callback);
      return promise}
    var OmqSocketIdMap=_J_([0,compare]);
    function last_op_from_sckt_state(param)
     {switch(param[0])
       {case 0:var lop=param[1];return lop;
        case 1:var lop$0=param[1];return lop$0;
        default:var lop$1=param[1];return lop$1}}
    function ensure_not_blocked_and_open(sckt)
     {if(sckt[2])
       switch(sckt[3][0])
        {case 0:return 0;
         case 1:throw [0,OMQ_Exception,_cM_];
         default:throw [0,OMQ_Exception,_cN_]}
      throw [0,OMQ_Exception,_cO_]}
    function pack_to_raw_msg(id,param)
     {var msg=param[1];return caml_js_to_string(output([0,id,[0,msg]]))}
    function make_with_timeout_blocking_promise
     (sckt,
      no_timeout_promise,
      timeout_ms,
      blocked_state,
      unblocked_state,
      timeout_during)
     {sckt[3] = blocked_state;
      var
       on_timeout_exc=[0,OMQ_Exception,_a_(_cP_,timeout_during)],
       timeout_sec=timeout_ms / 1e3,
       some_promise=
        bind(no_timeout_promise,function(res){return return$0([0,res])});
      function _hY_(param){return return_none}
      var timeout=bind(sleep(timeout_sec),_hY_);
      function _hZ_(exn){return fail(exn)}
      function _h0_(param)
       {if(param){var res=param[1];return return$0(res)}
        sckt[3] = unblocked_state;
        return fail(on_timeout_exc)}
      return try_bind
              (function(param)
                {var ps=[0,some_promise,[0,timeout,0]],accu=0,l=ps;
                 for(;;)
                  {if(l)
                    {var l$0=l[2],a=l[1];
                     switch(underlying(a)[1][0])
                      {case 1:var accu$0=accu + 1 | 0;break;
                       case 2:var accu$0=accu;break;
                       default:var accu$0=accu + 1 | 0}
                     var accu=accu$0,l=l$0;
                     continue}
                   if(0 === accu)
                    {var
                      match=new_pending([1,ps]),
                      cell=[],
                      self_removing_callback_wrapper=
                       function _h7_(_h6_){return _h7_.fun(_h6_)};
                     caml_update_dummy
                      (cell,[0,[0,self_removing_callback_wrapper]]);
                     caml_update_dummy
                      (self_removing_callback_wrapper,
                       function(result)
                        {cell[1] = 0;
                         iter
                          (function(p)
                            {var _h4_=underlying(p)[1];
                             switch(_h4_[0])
                              {case 1:return 0;
                               case 2:
                                var callbacks=_h4_[1],_h5_=callbacks[1];
                                if(typeof _h5_ !== "number" && 2 === _h5_[0])
                                 {callbacks[1] = 0;return 0}
                                var cleanups_deferred=callbacks[4] + 1 | 0;
                                return 42 < cleanups_deferred
                                        ?(callbacks[4]
                                          =
                                          0,
                                          callbacks[1]
                                          =
                                          clean_up_callback_cells(callbacks[1]),
                                          0)
                                        :(callbacks[4] = cleanups_deferred,0);
                               default:return 0}},
                           ps);
                         var p=underlying(match);
                         resolve(_cA_,0,p,result);
                         return 0});
                     var node=[2,cell];
                     iter
                      (function(p)
                        {var _h3_=underlying(p)[1];
                         switch(_h3_[0])
                          {case 1:throw [0,Assert_failure,_ca_];
                           case 2:
                            var callbacks=_h3_[1];
                            return add_regular_callback_list_node(callbacks,node);
                           default:throw [0,Assert_failure,_b$_]}},
                       ps);
                     return match}
                   if(1 === accu)return nth_resolved(ps,0);
                   var
                    _h1_=caml_obj_tag(prng$0),
                    _h2_=
                     250 === _h1_
                      ?prng$0[1]
                      :246 === _h1_?force_lazy_block(prng$0):prng$0;
                   return nth_resolved(ps,int$0(_h2_,accu))}},
               _h0_,
               _hZ_)}
    function on_msg_to_sckt(sckt,remote,local,msg$0)
     {if(1 - caml_call2(LocalSocketSet[3],local,sckt[5]))print_string(_cQ_);
      var
       _hW_=unsafe_input(msg$0.toString()),
       match=_hW_[2],
       str_msg=match[1],
       from_omq_id=_hW_[1],
       msg=[0,str_msg],
       _hX_=sckt[3];
      if(2 === _hX_[0])
       {var resolver=_hX_[2];
        sckt[7]
        =
        caml_call3(OmqSocketIdMap[4],from_omq_id,[0,local,remote],sckt[7]);
        sckt[3] = [0,[1,remote,local]];
        return resolve_promise(resolver,[0,from_omq_id,msg])}
      var match$0=sckt[12][1] < sckt[11]?1:0;
      return 0 === match$0
              ?print_string(_cR_)
              :add([0,remote,local,from_omq_id,msg],sckt[12])}
    function on_connection_to(sckt,local,remote,connected)
     {if(0 === connected)
       {print_string(_cS_);
        return caml_call2(RemoteSocketMap[3],remote,sckt[6])
                ?(sckt[6] = caml_call2(RemoteSocketMap[7],remote,sckt[6]),0)
                :print_string(_cT_)}
      caml_call1(printf(_cU_),remote);
      if(1 - caml_call2(LocalSocketSet[3],local,sckt[5]))print_string(_cV_);
      sckt[6] = caml_call3(RemoteSocketMap[4],remote,local,sckt[6]);
      var _hU_=sckt[3];
      if(1 === _hU_[0])
       {var
         match=_hU_[2],
         resolver=match[2],
         msg=match[1],
         ppx_lwt_0=promise_send_msg(local,remote,msg),
         _hV_=
          function(param)
           {sckt[3] = [0,[0,local,remote]];
            resolve_promise(resolver,0);
            return return_unit},
         p=
          backtrace_bind
           (function(exn)
             {try
               {throw exn}
              catch(exn){exn = caml_wrap_exception(exn);return exn}},
            ppx_lwt_0,
            _hV_),
         _hT_=underlying(p)[1];
        switch(_hT_[0])
         {case 1:var exn=_hT_[1];throw exn;
          case 2:
           var
            p_callbacks=_hT_[1],
            callback=
             function(result)
              {if(1 === result[0])
                {var exn=result[1];
                 return caml_call1(async_exception_hook[1],exn)}
               return 0};
           return add_implicitly_removed_callback(p_callbacks,callback);
          default:return 0}}
      return 0}
    function connect_to_remote(sckt,remote)
     {ensure_not_blocked_and_open(sckt);
      function on_connection_to_callback(_hQ_,_hR_,_hS_)
       {return on_connection_to(sckt,_hQ_,_hR_,_hS_)}
      function on_msg_callback$0(_hN_,_hO_,_hP_)
       {return on_msg_to_sckt(sckt,_hN_,_hO_,_hP_)}
      var match=task(0),resolver=match[2],promise=match[1];
      function ok_callback$0(local_socket)
       {safe_resolve_promise(resolver,local_socket);return 0}
      var _hJ_=[0,_a_(_cK_,remote)];
      function fail_callback$0(_hM_)
       {return make_exn_fail_callback(_hJ_,resolver,_hM_)}
      var
       address=remote.toString(),
       on_msg_callback=unsafe_wrap_3_string_args_fun(on_msg_callback$0),
       on_connection_callback=
        unsafe_wrap_2string_bool_args_fun(on_connection_to_callback),
       ok_callback=unsafe_wrap_string_arg_fun(ok_callback$0),
       fail_callback=unsafe_wrap_string_arg_fun(fail_callback$0);
      pcl_jsapi_connect_to_address_jsfun
       (address,
        on_msg_callback,
        on_connection_callback,
        ok_callback,
        fail_callback);
      function _hK_(local)
       {var _hL_=sckt[4];
        caml_call3(printf(_cY_),_hL_,remote,local);
        sckt[5] = caml_call2(LocalSocketSet[4],local,sckt[5]);
        return return$0(local)}
      return backtrace_bind
              (function(exn)
                {try
                  {throw exn}
                 catch(exn){exn = caml_wrap_exception(exn);return exn}},
               promise,
               _hK_)}
    function round_robin_send_msg(opt,sckt,msg)
     {if(opt)var sth=opt[1],block=sth;else var block=1;
      var cncts=sckt[6],match=caml_call1(RemoteSocketMap[2],cncts);
      if(0 === match)
       {var
         rand_ind=[0,int$1(caml_call1(RemoteSocketMap[18],cncts))],
         remote=[0,caml_call1(RemoteSocketMap[24],cncts)[1]],
         local=[0,caml_call2(RemoteSocketMap[27],remote[1],cncts)],
         _hI_=
          function(r,l)
           {if(0 === rand_ind[1]){remote[1] = r;local[1] = l}
            rand_ind[1] = rand_ind[1] - 1 | 0;
            return 0};
        caml_call2(RemoteSocketMap[12],_hI_,cncts);
        sckt[3] = [0,[0,local[1],remote[1]]];
        return promise_send_msg(local[1],remote[1],msg)}
      if(block)
       {var
         match$0=task(0),
         resolver=match$0[2],
         no_timeout_promise=match$0[1],
         blocked_state=[1,last_op_from_sckt_state(sckt[3]),[0,msg,resolver]],
         unblocked_state=[0,last_op_from_sckt_state(sckt[3])],
         timeout_ms=sckt[8];
        return make_with_timeout_blocking_promise
                (sckt,
                 no_timeout_promise,
                 timeout_ms,
                 blocked_state,
                 unblocked_state,
                 timeout_during)}
      return fail([0,OMQ_Exception,_cZ_])}
    function recv_msg_with_id_any_sckt(sckt)
     {if(is_empty(sckt[12]))
       {var
         match=task(0),
         resolver=match[2],
         no_timeout_promise=match[1],
         blocked_state=[2,last_op_from_sckt_state(sckt[3]),resolver],
         unblocked_state=[0,last_op_from_sckt_state(sckt[3])],
         timeout_ms=sckt[9];
        return make_with_timeout_blocking_promise
                (sckt,
                 no_timeout_promise,
                 timeout_ms,
                 blocked_state,
                 unblocked_state,
                 timeout_during$0)}
      var
       match$0=take(sckt[12]),
       msg=match$0[4],
       id=match$0[3],
       local=match$0[2],
       remote=match$0[1];
      sckt[3] = [0,[1,remote,local]];
      sckt[7] = caml_call3(OmqSocketIdMap[4],id,[0,local,remote],sckt[7]);
      return return$0([0,id,msg])}
    function recv_msg(sckt)
     {ensure_not_blocked_and_open(sckt);
      var ppx_lwt_0=recv_msg_with_id_any_sckt(sckt);
      function _hH_(param){var msg=param[2];return return$0(msg)}
      return backtrace_bind
              (function(exn)
                {try
                  {throw exn}
                 catch(exn){exn = caml_wrap_exception(exn);return exn}},
               ppx_lwt_0,
               _hH_)}
    function set_send_high_water_mark(sckt,hwm)
     {ensure_not_blocked_and_open(sckt);sckt[10] = hwm;return 0}
    function get_identity(sckt)
     {ensure_not_blocked_and_open(sckt);return sckt[4]}
    function internal_close(sckt)
     {if(sckt[2]){sckt[2] = 0;return 0}throw [0,OMQ_Exception,_c6_]}
    var exists_singleton_context=[0,0];
    function ensure_is_open(ctx)
     {var _hG_=1 - ctx[5];if(_hG_)throw [0,OMQ_Exception,_c7_];return _hG_}
    function filter(sckt)
     {var accu=0;
      return function(param$0)
       {var accu$0=accu,param=param$0;
        for(;;)
         {if(param)
           {var l=param[2],x=param[1],_hF_=get_identity(x);
            if(caml_string_notequal(get_identity(sckt),_hF_))
             {var accu$1=[0,x,accu$0],accu$0=accu$1,param=l;continue}
            var param=l;
            continue}
          return rev_append(accu$0,0)}}}
    function create_req_socket(ctx)
     {var
       _hB_=create(0),
       _hC_=OmqSocketIdMap[1],
       _hD_=RemoteSocketMap[1],
       _hE_=LocalSocketSet[1],
       sckt=
        [0,
         4093246,
         1,
         _c3_,
         pcl_util_rand_str(20),
         _hE_,
         _hD_,
         _hC_,
         max_int,
         max_int,
         1e4,
         1e4,
         _hB_];
      ensure_is_open(ctx);
      ctx[2] = [0,sckt,ctx[2]];
      return sckt}
    function create_dealer_socket(ctx)
     {var
       _hx_=create(0),
       _hy_=OmqSocketIdMap[1],
       _hz_=RemoteSocketMap[1],
       _hA_=LocalSocketSet[1],
       sckt=
        [0,
         370890265,
         1,
         _c4_,
         pcl_util_rand_str(20),
         _hA_,
         _hz_,
         _hy_,
         max_int,
         max_int,
         1e4,
         1e4,
         _hx_];
      ensure_is_open(ctx);
      ctx[3] = [0,sckt,ctx[3]];
      return sckt}
    function close_req_socket(ctx,sckt)
     {ensure_is_open(ctx);
      var _hw_=ctx[2];
      ctx[2] = caml_call1(filter(sckt),_hw_);
      return internal_close(sckt)}
    function close_router_socket(ctx,sckt)
     {ensure_is_open(ctx);
      var _hv_=ctx[4];
      ctx[4] = caml_call1(filter(sckt),_hv_);
      return internal_close(sckt)}
    var
     jsl_jsapi_get_sysargs$0=jsl_jsapi_get_sysargs,
     jsl_jsapi_get_job_name$0=jsl_jsapi_get_job_name;
    function jsl_get_sysargs(param)
     {var
       res=jsl_jsapi_get_sysargs$0(),
       a=caml_js_to_array(res),
       l=a.length - 1;
      if(0 === l)return [0];
      var r=caml_make_vect(l,caml_js_to_string(a[1])),_ht_=l - 1 | 0,_hs_=1;
      if(! (_ht_ < 1))
       {var i=_hs_;
        for(;;)
         {r[i + 1] = caml_js_to_string(a[i + 1]);
          var _hu_=i + 1 | 0;
          if(_ht_ !== i){var i=_hu_;continue}
          break}}
      return r}
    var Unix_error=[248,_c9_,caml_fresh_oo_id(0)];
    register_exception(_da_,[0,Unix_error,0,_c$_,_c__]);
    register_printer
     (function(param)
       {if(param[1] === Unix_error)
         {var s=param[4],s$0=param[3],e=param[2];
          if(typeof e === "number")
           {var _hr_=e;
            if(34 <= _hr_)
             switch(_hr_)
              {case 34:var msg=_dK_;break;
               case 35:var msg=_dL_;break;
               case 36:var msg=_dM_;break;
               case 37:var msg=_dN_;break;
               case 38:var msg=_dO_;break;
               case 39:var msg=_dP_;break;
               case 40:var msg=_dQ_;break;
               case 41:var msg=_dR_;break;
               case 42:var msg=_dS_;break;
               case 43:var msg=_dT_;break;
               case 44:var msg=_dU_;break;
               case 45:var msg=_dV_;break;
               case 46:var msg=_dW_;break;
               case 47:var msg=_dX_;break;
               case 48:var msg=_dY_;break;
               case 49:var msg=_dZ_;break;
               case 50:var msg=_d0_;break;
               case 51:var msg=_d1_;break;
               case 52:var msg=_d2_;break;
               case 53:var msg=_d3_;break;
               case 54:var msg=_d4_;break;
               case 55:var msg=_d5_;break;
               case 56:var msg=_d6_;break;
               case 57:var msg=_d7_;break;
               case 58:var msg=_d8_;break;
               case 59:var msg=_d9_;break;
               case 60:var msg=_d__;break;
               case 61:var msg=_d$_;break;
               case 62:var msg=_ea_;break;
               case 63:var msg=_eb_;break;
               case 64:var msg=_ec_;break;
               case 65:var msg=_ed_;break;
               case 66:var msg=_ee_;break;
               default:var msg=_ef_}
            else
             switch(_hr_)
              {case 0:var msg=_db_;break;
               case 1:var msg=_dd_;break;
               case 2:var msg=_de_;break;
               case 3:var msg=_df_;break;
               case 4:var msg=_dg_;break;
               case 5:var msg=_dh_;break;
               case 6:var msg=_di_;break;
               case 7:var msg=_dj_;break;
               case 8:var msg=_dk_;break;
               case 9:var msg=_dl_;break;
               case 10:var msg=_dm_;break;
               case 11:var msg=_dn_;break;
               case 12:var msg=_do_;break;
               case 13:var msg=_dp_;break;
               case 14:var msg=_dq_;break;
               case 15:var msg=_dr_;break;
               case 16:var msg=_ds_;break;
               case 17:var msg=_dt_;break;
               case 18:var msg=_du_;break;
               case 19:var msg=_dv_;break;
               case 20:var msg=_dw_;break;
               case 21:var msg=_dx_;break;
               case 22:var msg=_dy_;break;
               case 23:var msg=_dz_;break;
               case 24:var msg=_dA_;break;
               case 25:var msg=_dB_;break;
               case 26:var msg=_dC_;break;
               case 27:var msg=_dD_;break;
               case 28:var msg=_dE_;break;
               case 29:var msg=_dF_;break;
               case 30:var msg=_dG_;break;
               case 31:var msg=_dH_;break;
               case 32:var msg=_dI_;break;
               default:var msg=_dJ_}}
          else
           var x=e[1],msg=caml_call1(sprintf(_eg_),x);
          return [0,caml_call3(sprintf(_dc_),msg,s$0,s)]}
        return 0});
    unix_inet_addr_of_string(_eh_);
    unix_inet_addr_of_string(_ei_);
    try
     {unix_inet_addr_of_string(_fj_)}
    catch(_hq_)
     {_hq_ = caml_wrap_exception(_hq_);if(_hq_[1] !== Failure)throw _hq_}
    try
     {unix_inet_addr_of_string(_fi_)}
    catch(_hp_)
     {_hp_ = caml_wrap_exception(_hp_);if(_hp_[1] !== Failure)throw _hp_}
    create$0(0,7);
    function level_to_int(param)
     {switch(param)
       {case 0:return 0;
        case 1:return 1;
        case 2:return 2;
        case 3:return 3;
        default:return 4}}
    var level=[0,1],output$0=[0,stderr];
    function set_level(x){level[1] = x;return 0}
    function set_output(x){output$0[1] = x;return 0}
    function shall_paint(c,s)
     {var _hn_=_a_(s,_ep_);
      switch(c)
       {case 0:var _ho_=_ej_;break;
        case 1:var _ho_=_ek_;break;
        case 2:var _ho_=_el_;break;
        case 3:var _ho_=_em_;break;
        case 4:var _ho_=_en_;break;
        default:var _ho_=_eo_}
      return _a_(_ho_,_hn_)}
    function log(lvl,fmt$0)
     {var _ha_=level_to_int(level[1]),match=_ha_ <= level_to_int(lvl)?1:0;
      if(0 === match)
       {var _hk_=output$0[1],k=function(_hm_){return 0},fmt=fmt$0[1];
        return make_iprintf(k,_hk_,fmt)}
      var ts=unix_gettimeofday(0),tm=unix_localtime(ts);
      switch(lvl)
       {case 0:var _hb_=shall_paint(5,_eq_);break;
        case 1:var _hb_=shall_paint(1,_er_);break;
        case 2:var _hb_=shall_paint(2,_es_);break;
        case 3:var _hb_=shall_paint(0,_et_);break;
        default:var _hb_=shall_paint(4,_eu_)}
      var
       _hc_=1e3 * caml_modf_float(ts)[1] | 0,
       _hd_=tm[1],
       _he_=tm[2],
       _hf_=tm[3],
       _hg_=tm[4],
       _hh_=tm[5] + 1 | 0,
       _hi_=tm[6] + 1900 | 0,
       _hj_=caml_call8(sprintf(_ev_),_hi_,_hh_,_hg_,_hf_,_he_,_hd_,_hc_,_hb_),
       _hl_=_f_(_ex_,_f_(fmt$0,_ew_));
      return caml_call1(fprintf(output$0[1],_hl_),_hj_)}
    function info(fmt){return log(1,fmt)}
    function debug(fmt){return log(0,fmt)}
    function warn(fmt){return log(2,fmt)}
    set_level(0);
    set_output(stdout);
    debug(_ey_);
    var
     include=_J_([0,compare]),
     empty=include[1],
     add$1=include[4],
     iter$1=include[12],
     cardinal=include[18],
     bindings=include[19],
     find$0=include[27],
     hwm=1e4;
    function to_msg(b,t,p){var m=[0,b,t,p];return [0,json_stringify(m)]}
    function of_msg(msg){var m=json_parse(msg[1]);return m}
    self_init(0);
    function recv_with_id(sckt)
     {ensure_not_blocked_and_open(sckt);
      var ppx_lwt_0=recv_msg_with_id_any_sckt(sckt);
      function _g$_(param)
       {var msg=param[2],id=param[1];return return$0([0,id,of_msg(msg)])}
      return backtrace_bind
              (function(exn)
                {try
                  {throw exn}
                 catch(exn){exn = caml_wrap_exception(exn);return exn}},
               ppx_lwt_0,
               _g$_)}
    function send(opt$0,sckt,msg_typ,par)
     {if(opt$0)var sth=opt$0[1],bar=sth;else var bar=0;
      function _g7_(exn)
       {ensure_not_blocked_and_open(sckt);
        var _g__=sckt[10];
        caml_call2(log(3,fmt),bar,_g__);
        return return$0(0)}
      function _g8_(param)
       {var msg$0=to_msg(bar,msg_typ,par);
        if(opt)var sth=opt[1],block=sth;else var block=1;
        ensure_not_blocked_and_open(sckt);
        var msg=pack_to_raw_msg(sckt[4],msg$0),_g9_=sckt[1];
        if(4093246 === _g9_)
         {var match=last_op_from_sckt_state(sckt[3]);
          if(typeof match !== "number" && 0 === match[0])
           return fail([0,OMQ_Exception,_c0_]);
          return round_robin_send_msg([0,block],sckt,msg)}
        if(370890265 <= _g9_)return round_robin_send_msg([0,block],sckt,msg);
        var match$0=last_op_from_sckt_state(sckt[3]);
        if(typeof match$0 === "number")
         return fail([0,OMQ_Exception,_c1_]);
        else
         {if(0 === match$0[0])return fail([0,OMQ_Exception,_c2_]);
          var
           local=match$0[2],
           remote=match$0[1],
           match$1=caml_call2(RemoteSocketMap[3],remote,sckt[6]);
          return 0 === match$1
                  ?return$0(0)
                  :(sckt[3]
                    =
                    [0,[0,local,remote]],
                    promise_send_msg(local,remote,msg))}}
      return backtrace_catch
              (function(exn)
                {try
                  {throw exn}
                 catch(exn){exn = caml_wrap_exception(exn);return exn}},
               _g8_,
               _g7_)}
    function bind_available_addr(addr,sock,ztx)
     {addr[1] = _a_(_ez_,pcl_util_rand_str(10));
      function _gT_(exn){return bind_available_addr(addr,sock,ztx)}
      function _gU_(param)
       {var _gX_=addr[1];
        ensure_not_blocked_and_open(sock);
        function on_connection_to_callback(_g4_,_g5_,_g6_)
         {return on_connection_to(sock,_g4_,_g5_,_g6_)}
        function on_msg_callback$0(_g1_,_g2_,_g3_)
         {return on_msg_to_sckt(sock,_g1_,_g2_,_g3_)}
        var match=task(0),resolver=match[2],promise=match[1];
        function ok_callback$0(param)
         {safe_resolve_promise(resolver,0);return 0}
        var _gV_=[0,_a_(_cJ_,_gX_)];
        function fail_callback$0(_g0_)
         {return make_exn_fail_callback(_gV_,resolver,_g0_)}
        var
         address=_gX_.toString(),
         on_msg_callback=unsafe_wrap_3_string_args_fun(on_msg_callback$0),
         on_connection_callback=
          unsafe_wrap_2string_bool_args_fun(on_connection_to_callback),
         ok_callback=caml_js_wrap_callback(ok_callback$0),
         fail_callback=unsafe_wrap_string_arg_fun(fail_callback$0);
        pcl_jsapi_bind_address_jsfun
         (address,
          on_msg_callback,
          on_connection_callback,
          ok_callback,
          fail_callback);
        function _gW_(param)
         {if(caml_call2(LocalSocketSet[3],_gX_,sock[5]))
           var _gZ_=caml_call1(printf(_cW_),_gX_);
          else
           {sock[5] = caml_call2(LocalSocketSet[4],_gX_,sock[5]);
            var _gY_=sock[4],_gZ_=caml_call2(printf(_cX_),_gX_,_gY_)}
          return return$0(_gZ_)}
        return backtrace_bind
                (function(exn)
                  {try
                    {throw exn}
                   catch(exn){exn = caml_wrap_exception(exn);return exn}},
                 promise,
                 _gW_)}
      return backtrace_catch
              (function(exn)
                {try
                  {throw exn}
                 catch(exn){exn = caml_wrap_exception(exn);return exn}},
               _gU_,
               _gT_)}
    function default_barrier(context)
     {var
       num_finish=length(find_all(context[1][12],context[1][8])),
       num_worker=caml_call1(cardinal,context[1][7]),
       match=num_finish === num_worker?1:0;
      if(0 === match)return [0,context[1][8],0];
      var
       _gQ_=caml_call1(bindings,context[1][7]),
       _gR_=map(function(_gS_){return _gS_[1]},_gQ_);
      return [0,context[1][8] + 1 | 0,_gR_]}
    function param_ssp(context)
     {var
       num_finish=length(find_all(context[1][12],context[1][8])),
       num_worker=caml_call1(cardinal,context[1][7]),
       match=num_finish === num_worker?1:0,
       t=0 === match?context[1][8]:context[1][8] + 1 | 0,
       _gM_=0,
       _gN_=context[1][11],
       l=
        fold
         (function(w,t$0,l)
           {var
             busy=find(context[1][10],w),
             _gO_=0 === busy?1:0,
             _gP_=_gO_?(t$0 - t | 0) < context[1][9]?1:0:_gO_;
            return 0 === _gP_?l:append(l,[0,w,0])},
          _gN_,
          _gM_);
      return [0,t,l]}
    function param_asp(context)
     {context[1][9] = max_int;return param_ssp(context)}
    var
     KeyValueTypeSpecifier=[0],
     PS=
      function(_ft_)
        {var context$0=[0,0];
         function default_push(worker_id,vars){return 0}
         var push=[0,default_push],context=[0,0],h=create$0(0,1e6);
         function default_schedule(param){return return$0(0)}
         var schedule=[0,default_schedule];
         function default_pull(updates)
          {return map(function(p){return return$0(p)},updates)}
         var pull=[0,default_pull];
         function default_stop(param){return 0}
         var stop=[0,default_stop],barrier=[0,default_barrier];
         function update_barrier_fun(f){barrier[1] = f;return 0}
         function get_context(param)
          {var _gL_=context[1];
           if(_gL_){var ctx=_gL_[1];return ctx}
           return failwith(_eC_)}
         function get(k)
          {var match=find(h,k),t=match[2],v=match[1];return [0,v,t]}
         function set(k$0,v,t)
          {var
            _gK_=key_index(h,k$0),
            param$0=caml_check_bound(h[2],_gK_)[_gK_ + 1],
            param=param$0;
           for(;;)
            {if(param)
              {var
                k=param[1],
                next=param[3],
                _gJ_=0 === caml_compare(k,k$0)?1:0;
               if(! _gJ_){var param=next;continue}
               var match=_gJ_}
             else
              var match=0;
             return 0 === match?add$0(h,k$0,[0,v,t]):replace(h,k$0,[0,v,t])}}
         function start(barrier$0,jid,url)
          {if(barrier$0)
            {switch(barrier$0[1])
              {case 0:var _fF_=param_asp;break;
               case 1:var _fF_=default_barrier;break;
               case 2:var _fF_=param_ssp;break;
               default:var _fF_=failwith(_e$_)}
             var barrier_str=_fF_}
           else
            var barrier_str=barrier[1];
           update_barrier_fun(barrier_str);
           if(exists_singleton_context[1])
            {caml_call1(printf(_c8_),err_msg);throw [0,OMQ_Exception,err_msg]}
           exists_singleton_context[1] = 1;
           var match=task(0),resolver=match[2],promise=match[1];
           function ok_callback$0(unique_id)
            {safe_resolve_promise(resolver,unique_id);return 0}
           var _fD_=[0,_a_(_cI_,signalling_server_url)];
           function fail_callback$0(_gI_)
            {return make_exn_fail_callback(_fD_,resolver,_gI_)}
           var
            server_url=signalling_server_url.toString(),
            ok_callback=unsafe_wrap_string_arg_fun(ok_callback$0),
            fail_callback=unsafe_wrap_string_arg_fun(fail_callback$0);
           pcl_jsapi_start_comm_layer_jsfun
            (server_url,ok_callback,fail_callback);
           function _fE_(my_id){return return$0([0,my_id,[0,0,0,0,0,1]])}
           var
            ppx_lwt_0=
             backtrace_bind
              (function(exn)
                {try
                  {throw exn}
                 catch(exn){exn = caml_wrap_exception(exn);return exn}},
               promise,
               _fE_);
           function _fG_(param)
            {var ztx=param[2],unique_id=param[1];
             caml_call1(info(_e7_),unique_id);
             var
              _fH_=create(0),
              _fI_=OmqSocketIdMap[1],
              _fJ_=RemoteSocketMap[1],
              _fK_=LocalSocketSet[1],
              router=
               [0,
                -27621687,
                1,
                _c5_,
                pcl_util_rand_str(20),
                _fK_,
                _fJ_,
                _fI_,
                max_int,
                max_int,
                1e4,
                1e4,
                _fH_];
             ensure_is_open(ztx);
             ztx[4] = [0,router,ztx[4]];
             var addr=[0,_eA_],ppx_lwt_0=bind_available_addr(addr,router,ztx);
             function _fL_(param)
              {ensure_not_blocked_and_open(router);
               router[11] = hwm;
               return return$0([0,addr[1],router])}
             var
              ppx_lwt_0$0=
               backtrace_bind
                (function(exn)
                  {try
                    {throw exn}
                   catch(exn){exn = caml_wrap_exception(exn);return exn}},
                 ppx_lwt_0,
                 _fL_);
             function _fM_(param)
              {var
                router=param[2],
                addr=param[1],
                req=create_req_socket(ztx),
                ppx_lwt_0=connect_to_remote(req,url);
               function _fN_(local)
                {caml_call2(info(_e8_),url,local);
                 function _fO_(param)
                  {var
                    _fQ_=create$0(0,1e3),
                    _fR_=create$0(0,1e3),
                    _fS_=create$0(0,1e3),
                    context$1=
                     [0,
                      ztx,
                      jid,
                      _eB_,
                      addr,
                      create_dealer_socket(ztx),
                      router,
                      empty,
                      0,
                      1,
                      _fS_,
                      _fR_,
                      _fQ_],
                    ppx_lwt_0=recv_msg(req);
                   function _fT_(m_pack)
                    {var m=of_msg(m_pack),_fX_=m[2];
                     if(5 === _fX_)
                      {context[1] = [0,context$1];
                       var
                        addrs=json_parse(caml_check_bound(m[3],0)[1]),
                        sockets_promises=
                         map
                          (function(x)
                            {var
                              req=create_req_socket(get_context(0)[1]),
                              ppx_lwt_0=connect_to_remote(req,x);
                             function _gq_(local)
                              {caml_call2(debug(_eK_),x,local);
                               var
                                res=jsl_jsapi_get_job_name$0(),
                                app=caml_js_to_string(res);
                               caml_call1(debug(_eL_),app);
                               var args=jsl_get_sysargs(0);
                               iter$0(function(a){return caml_call1(info(_eM_),a)},args);
                               var arg_str=json_stringify(jsl_get_sysargs(0));
                               caml_call1(debug(_eN_),arg_str);
                               debug(_eO_);
                               function _gr_(param){return return$0(req)}
                               var _gs_=send(0,req,7,[0,get_context(0)[4],app,arg_str]);
                               return backtrace_bind
                                       (function(exn)
                                         {try
                                           {throw exn}
                                          catch(exn){exn = caml_wrap_exception(exn);return exn}},
                                        _gs_,
                                        _gr_)}
                             return backtrace_bind
                                     (function(exn)
                                       {try
                                         {throw exn}
                                        catch(exn){exn = caml_wrap_exception(exn);return exn}},
                                      ppx_lwt_0,
                                      _gq_)},
                           addrs);
                       debug(_eP_);
                       var
                        close_sockets_threads=
                         map
                          (function(sp)
                            {function _gp_(s)
                              {return return$0(close_req_socket(get_context(0)[1],s))}
                             return backtrace_bind
                                     (function(exn)
                                       {try
                                         {throw exn}
                                        catch(exn){exn = caml_wrap_exception(exn);return exn}},
                                      sp,
                                      _gp_)},
                           sockets_promises),
                        ppx_lwt_0=join(close_sockets_threads),
                        _fU_=
                         function(param)
                          {debug(_eQ_);
                           function _fZ_(param)
                            {var _f__=get_context(0)[7];
                             caml_call2
                              (iter$1,
                               function(k,v)
                                {add$0(get_context(0)[10],k,0);
                                 add$0(get_context(0)[11],k,0);
                                 return add$0(get_context(0)[12],0,k)},
                               _f__);
                             var _f7_=get_context(0)[4];
                             caml_call1(debug(_eD_),_f7_);
                             var
                              schedule$0=schedule[1],
                              pull$0=pull[1],
                              barrier$0=barrier[1],
                              stop$0=stop[1];
                             function _f8_(exn)
                              {if(exn[1] === Failure)
                                {var e=exn[2];
                                 caml_call1(warn(_eE_),e);
                                 var
                                  s=[0],
                                  _gn_=
                                   function(param)
                                    {var _go_=get_context(0)[6];
                                     return return$0(close_router_socket(get_context(0)[1],_go_))},
                                  bindings$0=caml_call1(bindings,get_context(0)[7]),
                                  t=24,
                                  threads=
                                   map
                                    (function(param)
                                      {var v=param[2];return send([0,get_context(0)[8]],v,t,s)},
                                     bindings$0),
                                  ppx_lwt_0=join(threads),
                                  _gk_=function(param){return return$0(get_context(0)[8])},
                                  ppx_lwt_0$0=
                                   backtrace_bind
                                    (function(exn)
                                      {try
                                        {throw exn}
                                       catch(exn){exn = caml_wrap_exception(exn);return exn}},
                                     ppx_lwt_0,
                                     _gk_),
                                  _gl_=function(param){return sleep(1)},
                                  _gm_=
                                   backtrace_bind
                                    (function(exn)
                                      {try
                                        {throw exn}
                                       catch(exn){exn = caml_wrap_exception(exn);return exn}},
                                     ppx_lwt_0$0,
                                     _gl_);
                                 return backtrace_bind
                                         (function(exn)
                                           {try
                                             {throw exn}
                                            catch(exn){exn = caml_wrap_exception(exn);return exn}},
                                          _gm_,
                                          _gn_)}
                               return fail(exn)}
                             function _f9_(param)
                              {function ppx_lwt_loop(param)
                                {var
                                  ctx_ref=[0,get_context(0)],
                                  should_stop=caml_call1(stop$0,ctx_ref);
                                 context[1] = [0,ctx_ref[1]];
                                 if(should_stop)return return_unit;
                                 var
                                  ctx_ref$0=[0,get_context(0)],
                                  match=caml_call1(barrier$0,ctx_ref$0),
                                  passed=match[2],
                                  t=match[1];
                                 ctx_ref$0[1][8] = t;
                                 context[1] = [0,ctx_ref$0[1]];
                                 var ppx_lwt_0=caml_call1(schedule$0,passed);
                                 function _f$_(tasks)
                                  {var
                                    task_threads=
                                     map
                                      (function(param)
                                        {var
                                          task=param[2],
                                          worker=param[1],
                                          w=caml_call2(find$0,worker,get_context(0)[7]),
                                          s=json_stringify(task),
                                          t=find(get_context(0)[11],worker) + 1 | 0;
                                         replace(get_context(0)[10],worker,1);
                                         return send([0,t],w,29,[0,s])},
                                       tasks),
                                    ppx_lwt_0=join(task_threads);
                                   function _ga_(param)
                                    {if(0 < length(tasks))
                                      {var _gb_=length(tasks),_gc_=get_context(0)[8];
                                       caml_call2(debug(_eF_),_gc_,_gb_)}
                                     var ppx_lwt_0=recv_with_id(get_context(0)[6]);
                                     function _gd_(param)
                                      {var m=param[2],i=param[1],t=m[1],switcher=m[2] - 27 | 0;
                                       if(! (3 < switcher >>> 0))
                                        switch(switcher)
                                         {case 0:
                                           var _ge_=get_context(0)[4];
                                           caml_call1(debug(_eH_),_ge_);
                                           var
                                            k=json_parse(caml_check_bound(m[3],0)[1]),
                                            match$0=get(k),
                                            t$0=match$0[2],
                                            v=match$0[1],
                                            msg$0=to_msg(t$0,0,[0,json_stringify(v)]),
                                            _gf_=get_context(0)[6];
                                           ensure_not_blocked_and_open(_gf_);
                                           var
                                            msg=pack_to_raw_msg(_gf_[4],msg$0),
                                            connection=caml_call2(OmqSocketIdMap[28],i,_gf_[7]);
                                           if(connection)
                                            {var match=connection[1],remote=match[2],local=match[1];
                                             _gf_[3] = [0,[0,local,remote]];
                                             return promise_send_msg(local,remote,msg)}
                                           return return$0(0);
                                          case 1:
                                           var _gg_=get_context(0)[4];
                                           caml_call1(debug(_eI_),_gg_);
                                           var
                                            k$0=json_parse(caml_check_bound(m[3],0)[1]),
                                            v$0=json_parse(caml_check_bound(m[3],1)[2]);
                                           return return$0(set(k$0,v$0,t));
                                          case 2:break;
                                          default:
                                           var _gh_=get_context(0)[4];
                                           caml_call1(debug(_eJ_),_gh_);
                                           var
                                            updates_promises=
                                             caml_call1(pull$0,json_parse(caml_check_bound(m[3],0)[1])),
                                            updates_done=
                                             map
                                              (function(update_promise)
                                                {function _gj_(param)
                                                  {var v=param[2],k=param[1];return return$0(set(k,v,t))}
                                                 return backtrace_bind
                                                         (function(exn)
                                                           {try
                                                             {throw exn}
                                                            catch(exn){exn = caml_wrap_exception(exn);return exn}},
                                                          update_promise,
                                                          _gj_)},
                                               updates_promises),
                                            ppx_lwt_0=join(updates_done),
                                            _gi_=
                                             function(param)
                                              {var t$0=find(get_context(0)[11],i),match=t$0 < t?1:0;
                                               return 0 === match
                                                       ?return_unit
                                                       :(replace(get_context(0)[10],i,0),
                                                         replace(get_context(0)[11],i,t),
                                                         return$0(add$0(get_context(0)[12],t,i)))};
                                           return backtrace_bind
                                                   (function(exn)
                                                     {try
                                                       {throw exn}
                                                      catch(exn){exn = caml_wrap_exception(exn);return exn}},
                                                    ppx_lwt_0,
                                                    _gi_)}
                                       return return$0(warn(_eG_))}
                                     return backtrace_bind
                                             (function(exn)
                                               {try
                                                 {throw exn}
                                                catch(exn){exn = caml_wrap_exception(exn);return exn}},
                                              ppx_lwt_0,
                                              _gd_)}
                                   return backtrace_bind
                                           (function(exn)
                                             {try
                                               {throw exn}
                                              catch(exn){exn = caml_wrap_exception(exn);return exn}},
                                            ppx_lwt_0,
                                            _ga_)}
                                 return bind
                                         (backtrace_bind
                                           (function(exn)
                                             {try
                                               {throw exn}
                                              catch(exn){exn = caml_wrap_exception(exn);return exn}},
                                            ppx_lwt_0,
                                            _f$_),
                                          ppx_lwt_loop)}
                               return ppx_lwt_loop(0)}
                             return backtrace_catch
                                     (function(exn)
                                       {try
                                         {throw exn}
                                        catch(exn){exn = caml_wrap_exception(exn);return exn}},
                                      _f9_,
                                      _f8_)}
                           function ppx_lwt_loop(param)
                            {var _f1_=length(addrs);
                             if(caml_call1(cardinal,get_context(0)[7]) < _f1_)
                              {debug(_eR_);
                               var
                                ppx_lwt_0=recv_with_id(get_context(0)[6]),
                                _f2_=
                                 function(param)
                                  {var m=param[2],s=create_dealer_socket(get_context(0)[1]);
                                   debug(_eS_);
                                   set_send_high_water_mark(s,hwm);
                                   var
                                    ppx_lwt_0=
                                     connect_to_remote(s,caml_check_bound(m[3],0)[1]);
                                   function _f3_(local)
                                    {var _f4_=caml_check_bound(m[3],0)[1];
                                     caml_call2(debug(_eT_),_f4_,local);
                                     var
                                      _f5_=get_context(0)[7],
                                      _f6_=caml_call3(add$1,caml_check_bound(m[3],0)[1],s,_f5_);
                                     get_context(0)[7] = _f6_;
                                     return return$0(0)}
                                   return backtrace_bind
                                           (function(exn)
                                             {try
                                               {throw exn}
                                              catch(exn){exn = caml_wrap_exception(exn);return exn}},
                                            ppx_lwt_0,
                                            _f3_)};
                               return bind
                                       (backtrace_bind
                                         (function(exn)
                                           {try
                                             {throw exn}
                                            catch(exn){exn = caml_wrap_exception(exn);return exn}},
                                          ppx_lwt_0,
                                          _f2_),
                                        ppx_lwt_loop)}
                             return return_unit}
                           var _f0_=ppx_lwt_loop(0);
                           return backtrace_bind
                                   (function(exn)
                                     {try
                                       {throw exn}
                                      catch(exn){exn = caml_wrap_exception(exn);return exn}},
                                    _f0_,
                                    _fZ_)},
                        ppx_lwt_0$1=
                         backtrace_bind
                          (function(exn)
                            {try
                              {throw exn}
                             catch(exn){exn = caml_wrap_exception(exn);return exn}},
                           ppx_lwt_0,
                           _fU_)}
                     else
                      if(6 === _fX_)
                       {context$1[3] = caml_check_bound(m[3],0)[1];
                        var sckt=create_dealer_socket(context$1[1]);
                        set_send_high_water_mark(sckt,hwm);
                        var _fV_=context$1[4];
                        ensure_not_blocked_and_open(sckt);
                        sckt[4] = _fV_;
                        var
                         ppx_lwt_0$0=connect_to_remote(sckt,context$1[3]),
                         _fW_=
                          function(local)
                           {caml_call1(info(_e6_),local);
                            function _gt_(param)
                             {context$1[5] = sckt;
                              context$0[1] = [0,context$1];
                              var _gv_=context$0[1];
                              if(_gv_)
                               {var ctx=_gv_[1],_gw_=ctx[4];
                                caml_call1(debug(_eY_),_gw_);
                                var
                                 push$0=push[1],
                                 _gx_=
                                  function(exn)
                                   {if(exn[1] === Failure)
                                     {var e=exn[2];
                                      caml_call1(warn(_eZ_),e);
                                      close_router_socket(ctx[1],ctx[6]);
                                      return exit(0)}
                                    return fail(exn)},
                                 _gy_=
                                  function(param)
                                   {function ppx_lwt_loop(param)
                                     {var ppx_lwt_0=recv_with_id(ctx[6]);
                                      function _gz_(param)
                                       {var m=param[2],t=m[1],_gB_=m[2];
                                        if(24 === _gB_)
                                         {var _gC_=ctx[4];
                                          caml_call1(debug(_e0_),_gC_);
                                          var
                                           _gD_=
                                            function(param)
                                             {function _gG_(param)
                                               {return return$0(failwith(_a_(_e2_,_a_(ctx[2],_e1_))))}
                                              var _gH_=sleep(1);
                                              return backtrace_bind
                                                      (function(exn)
                                                        {try
                                                          {throw exn}
                                                         catch(exn){exn = caml_wrap_exception(exn);return exn}},
                                                       _gH_,
                                                       _gG_)},
                                           _gE_=send([0,t],ctx[5],0,[0]);
                                          return backtrace_bind
                                                  (function(exn)
                                                    {try
                                                      {throw exn}
                                                     catch(exn){exn = caml_wrap_exception(exn);return exn}},
                                                   _gE_,
                                                   _gD_)}
                                        if(29 === _gB_)
                                         {var _gF_=ctx[4];
                                          caml_call1(debug(_e3_),_gF_);
                                          var t$0=ctx[8] < t?t:ctx[8];
                                          ctx[8] = t$0;
                                          var
                                           vars=json_parse(caml_check_bound(m[3],0)[1]),
                                           x$0=caml_call2(push$0,ctx[4],vars),
                                           _gA_=context$0[1];
                                          if(_gA_)
                                           {var ctx$0=_gA_[1],x=json_stringify(x$0);
                                            return send([0,t],ctx$0[5],30,[0,x])}
                                          return failwith(_eX_)}
                                        return return$0(debug(_e4_))}
                                      return bind
                                              (backtrace_bind
                                                (function(exn)
                                                  {try
                                                    {throw exn}
                                                   catch(exn){exn = caml_wrap_exception(exn);return exn}},
                                                 ppx_lwt_0,
                                                 _gz_),
                                               ppx_lwt_loop)}
                                    return ppx_lwt_loop(0)};
                                return backtrace_catch
                                        (function(exn)
                                          {try
                                            {throw exn}
                                           catch(exn){exn = caml_wrap_exception(exn);return exn}},
                                         _gy_,
                                         _gx_)}
                              return failwith(_e5_)}
                            var _gu_=send(0,sckt,0,[0,context$1[4]]);
                            return backtrace_bind
                                    (function(exn)
                                      {try
                                        {throw exn}
                                       catch(exn){exn = caml_wrap_exception(exn);return exn}},
                                     _gu_,
                                     _gt_)},
                         ppx_lwt_0$1=
                          backtrace_bind
                           (function(exn)
                             {try
                               {throw exn}
                              catch(exn){exn = caml_wrap_exception(exn);return exn}},
                            ppx_lwt_0$0,
                            _fW_)}
                      else
                       var ppx_lwt_0$1=return$0(caml_call1(info(_e__),_e9_));
                     function _fY_(param)
                      {return return$0(close_req_socket(context$1[1],req))}
                     return backtrace_bind
                             (function(exn)
                               {try
                                 {throw exn}
                                catch(exn){exn = caml_wrap_exception(exn);return exn}},
                              ppx_lwt_0$1,
                              _fY_)}
                   return backtrace_bind
                           (function(exn)
                             {try
                               {throw exn}
                              catch(exn){exn = caml_wrap_exception(exn);return exn}},
                            ppx_lwt_0,
                            _fT_)}
                 var _fP_=send(0,req,4,[0,addr,jid]);
                 return backtrace_bind
                         (function(exn)
                           {try
                             {throw exn}
                            catch(exn){exn = caml_wrap_exception(exn);return exn}},
                          _fP_,
                          _fO_)}
               return backtrace_bind
                       (function(exn)
                         {try
                           {throw exn}
                          catch(exn){exn = caml_wrap_exception(exn);return exn}},
                        ppx_lwt_0,
                        _fN_)}
             return backtrace_bind
                     (function(exn)
                       {try
                         {throw exn}
                        catch(exn){exn = caml_wrap_exception(exn);return exn}},
                      ppx_lwt_0$0,
                      _fM_)}
           return backtrace_bind
                   (function(exn)
                     {try
                       {throw exn}
                      catch(exn){exn = caml_wrap_exception(exn);return exn}},
                    ppx_lwt_0,
                    _fG_)}
         function register_barrier(f){return update_barrier_fun(f)}
         function register_schedule(f){schedule[1] = f;return 0}
         function register_pull(f){pull[1] = f;return 0}
         function register_push(f){push[1] = f;return 0}
         function register_stop(f){stop[1] = f;return 0}
         function get$0(k$0)
          {var match=caml_string_equal(get_context(0)[2],_fa_);
           if(0 === match)return return$0(get(k$0));
           var _fz_=context$0[1];
           if(_fz_)
            {var
              ctx=_fz_[1],
              k=json_stringify(k$0),
              ppx_lwt_0=send([0,ctx[8]],ctx[5],27,[0,k]),
              _fA_=
               function(param)
                {var ppx_lwt_0=recv_msg(ctx[5]);
                 function _fB_(m)
                  {var m$0=of_msg(m),_fC_=m$0[1];
                   return return$0
                           ([0,json_parse(caml_check_bound(m$0[3],0)[1]),_fC_])}
                 return backtrace_bind
                         (function(exn)
                           {try
                             {throw exn}
                            catch(exn){exn = caml_wrap_exception(exn);return exn}},
                          ppx_lwt_0,
                          _fB_)};
             return backtrace_bind
                     (function(exn)
                       {try
                         {throw exn}
                        catch(exn){exn = caml_wrap_exception(exn);return exn}},
                      ppx_lwt_0,
                      _fA_)}
           return failwith(_eV_)}
         function set$0(k$0,v$0)
          {var match=caml_string_equal(get_context(0)[2],_fb_);
           if(0 === match)return return$0(set(k$0,v$0,get_context(0)[8]));
           var _fv_=context$0[1];
           if(_fv_)var ctx=_fv_[1],_fx_=ctx;else var _fx_=failwith(_eU_);
           var _fw_=context$0[1],_fy_=_fx_[8];
           if(_fw_)
            {var ctx$0=_fw_[1],k=json_stringify(k$0),v=json_stringify(v$0);
             return send([0,_fy_],ctx$0[5],28,[0,k,v])}
           return failwith(_eW_)}
         function keys(param)
          {var _fu_=0;
           return fold(function(k,v,l){return append(l,[0,k,0])},h,_fu_)}
         function worker_num(param)
          {var match=caml_string_equal(get_context(0)[2],_fc_);
           return 0 === match
                   ?caml_call1(cardinal,get_context(0)[7])
                   :failwith(_fd_)}
         return [0,
                 start,
                 register_barrier,
                 register_schedule,
                 register_pull,
                 register_push,
                 register_stop,
                 get$0,
                 set$0,
                 keys,
                 worker_num]}
       (KeyValueTypeSpecifier);
    function schedule(workers)
     {var
       tasks=
        map
         (function(x)
           {var v=int$1(1e3),k=int$1(100);return [0,x,[0,[0,k,v],0]]},
          workers);
      return return$0(tasks)}
    function push(param,vars)
     {var
       updates=
        map
         (function(param)
           {var v=param[2],k=param[1];caml_call1(info(_fe_),v);return [0,k,v]},
          vars);
      return updates}
    function test_context(param)
     {caml_call1(PS[3],schedule);
      caml_call1(PS[5],push);
      var args=jsl_get_sysargs(0);
      iter$0(function(a){return caml_call1(debug(_ff_),a)},args);
      if(args.length - 1 < 2)failwith(_fg_);
      function _fq_(param){return return$0(info(_fh_))}
      var
       _fr_=caml_check_bound(args,1)[2],
       _fs_=caml_call3(PS[1],0,_fr_,manager_addr);
      return backtrace_bind
              (function(exn)
                {try
                  {throw exn}
                 catch(exn){exn = caml_wrap_exception(exn);return exn}},
               _fs_,
               _fq_)}
    test_context(0);
    do_at_exit(0);
    return}
  (function(){return this}()));
