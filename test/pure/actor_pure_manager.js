// Generated by js_of_ocaml 3.1.0
(function(joo_global_object)
   {"use strict";
    function caml_array_append(a1,a2)
     {var l1=a1.length,l2=a2.length,l=l1 + l2 - 1,a=new Array(l);
      a[0] = 0;
      var i=1,j=1;
      for(;i < l1;i++)a[i] = a1[i];
      for(;i < l;i++,j++)a[i] = a2[j];
      return a}
    function caml_array_sub(a,i,len)
     {var a2=new Array(len + 1);
      a2[0] = 0;
      for(var i2=1,i1=i + 1;i2 <= len;i2++,i1++)a2[i2] = a[i1];
      return a2}
    function raw_array_sub(a,i,l)
     {var b=new Array(l);for(var j=0;j < l;j++)b[j] = a[i + j];return b}
    function caml_subarray_to_string(a,i,len)
     {var f=String.fromCharCode;
      if(i == 0 && len <= 4096 && len == a.length)return f.apply(null,a);
      var s="";
      for(;0 < len;i += 1024,len -= 1024)
       s += f.apply(null,raw_array_sub(a,i,Math.min(len,1024)));
      return s}
    function caml_convert_string_to_array(s)
     {if(joo_global_object.Uint8Array)
       var a=new (joo_global_object.Uint8Array)(s.l);
      else
       var a=new Array(s.l);
      var b=s.c,l=b.length,i=0;
      for(;i < l;i++)a[i] = b.charCodeAt(i);
      for(l = s.l;i < l;i++)a[i] = 0;
      s.c = a;
      s.t = 4;
      return a}
    function caml_blit_string(s1,i1,s2,i2,len)
     {if(len == 0)return 0;
      if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length))
       {s2.c
        =
        s1.t == 4
         ?caml_subarray_to_string(s1.c,i1,len)
         :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
        s2.t = s2.c.length == s2.l?0:2}
      else
       if(s2.t == 2 && i2 == s2.c.length)
        {s2.c
         +=
         s1.t == 4
          ?caml_subarray_to_string(s1.c,i1,len)
          :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
         s2.t = s2.c.length == s2.l?0:2}
       else
        {if(s2.t != 4)caml_convert_string_to_array(s2);
         var c1=s1.c,c2=s2.c;
         if(s1.t == 4)
          if(i2 <= i1)
           for(var i=0;i < len;i++)c2[i2 + i] = c1[i1 + i];
          else
           for(var i=len - 1;i >= 0;i--)c2[i2 + i] = c1[i1 + i];
         else
          {var l=Math.min(len,c1.length - i1);
           for(var i=0;i < l;i++)c2[i2 + i] = c1.charCodeAt(i1 + i);
           for(;i < len;i++)c2[i2 + i] = 0}}
      return 0}
    var caml_blit_bytes=caml_blit_string;
    function caml_str_repeat(n,s)
     {if(s.repeat)return s.repeat(n);
      var r="",l=0;
      if(n == 0)return r;
      for(;;)
       {if(n & 1)r += s;
        n >>= 1;
        if(n == 0)return r;
        s += s;
        l++;
        if(l == 9)s.slice(0,1)}}
    function caml_convert_string_to_bytes(s)
     {if(s.t == 2)
       s.c += caml_str_repeat(s.l - s.c.length,"\0");
      else
       s.c = caml_subarray_to_string(s.c,0,s.c.length);
      s.t = 0}
    function caml_bytes_of_string(s)
     {if((s.t & 6) != 0)caml_convert_string_to_bytes(s);return s.c}
    function caml_raise_with_arg(tag,arg){throw [0,tag,arg]}
    function caml_is_ascii(s)
     {if(s.length < 24)
       {for(var i=0;i < s.length;i++)if(s.charCodeAt(i) > 127)return false;
        return true}
      else
       return ! /[^\x00-\x7f]/.test(s)}
    function caml_utf16_of_utf8(s)
     {for(var b="",t="",c,c1,c2,v,i=0,l=s.length;i < l;i++)
       {c1 = s.charCodeAt(i);
        if(c1 < 128)
         {for(var j=i + 1;j < l && (c1 = s.charCodeAt(j)) < 128;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        v = 1;
        if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
         {c = c2 + (c1 << 6);
          if(c1 < 224)
           {v = c - 12416;if(v < 128)v = 1}
          else
           {v = 2;
            if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
             {c = c2 + (c << 6);
              if(c1 < 240)
               {v = c - 925824;if(v < 2048 || v >= 55295 && v < 57344)v = 2}
              else
               {v = 3;
                if
                 (++i
                  <
                  l
                  &&
                  ((c2 = s.charCodeAt(i)) & - 64)
                  ==
                  128
                  &&
                  c1
                  <
                  245)
                 {v = c2 - 63447168 + (c << 6);
                  if(v < 65536 || v > 1114111)v = 3}}}}}
        if(v < 4)
         {i -= v;t += "\ufffd"}
        else
         if(v > 65535)
          t += String.fromCharCode(55232 + (v >> 10),56320 + (v & 1023));
         else
          t += String.fromCharCode(v);
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_to_js_string(s)
     {switch(s.t)
       {case 9:return s.c;
        default:caml_convert_string_to_bytes(s);case 0:
         if(caml_is_ascii(s.c)){s.t = 9;return s.c}s.t = 8;
        case 8:return caml_utf16_of_utf8(s.c)
        }}
    function MlString(tag,contents,length)
     {this.t = tag;this.c = contents;this.l = length}
    MlString.prototype.toString = function(){return caml_to_js_string(this)};
    function caml_new_string(s){return new MlString(0,s,s.length)}
    function caml_raise_with_string(tag,msg)
     {caml_raise_with_arg(tag,caml_new_string(msg))}
    var caml_global_data=[0];
    function caml_invalid_argument(msg)
     {caml_raise_with_string(caml_global_data.Invalid_argument,msg)}
    function caml_string_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_bytes_unsafe_set(s,i,c)
     {c &= 255;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_string_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_bytes_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_bytes_unsafe_set(s,i,c)}
    function raw_array_append_one(a,x)
     {var l=a.length,b=new Array(l + 1),i=0;
      for(;i < l;i++)b[i] = a[i];
      b[i] = x;
      return b}
    function caml_call_gen(f,args)
     {if(f.fun)return caml_call_gen(f.fun,args);
      var n=f.length,argsLen=args.length,d=n - argsLen;
      if(d == 0)
       return f.apply(null,args);
      else
       if(d < 0)
        return caml_call_gen
                (f.apply(null,raw_array_sub(args,0,n)),
                 raw_array_sub(args,n,argsLen - n));
       else
        return function(x)
         {return caml_call_gen(f,raw_array_append_one(args,x))}}
    function caml_array_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_check_bound(array,index)
     {if(index >>> 0 >= array.length - 1)caml_array_bound_error();
      return array}
    function caml_classify_float(x)
     {if(isFinite(x))
       {if(Math.abs(x) >= 2.22507385850720138e-308)return 0;
        if(x != 0)return 1;
        return 2}
      return isNaN(x)?4:3}
    function caml_int64_compare(x,y)
     {var x3=x[3] << 16,y3=y[3] << 16;
      if(x3 > y3)return 1;
      if(x3 < y3)return - 1;
      if(x[2] > y[2])return 1;
      if(x[2] < y[2])return - 1;
      if(x[1] > y[1])return 1;
      if(x[1] < y[1])return - 1;
      return 0}
    function caml_int_compare(a,b)
     {if(a < b)return - 1;if(a == b)return 0;return 1}
    function caml_string_compare(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?- 1:s1.c > s2.c?1:0}
    function caml_compare_val(a,b,total)
     {var stack=[];
      for(;;)
       {if(! (total && a === b))
         if(a instanceof MlString)
          if(b instanceof MlString)
           {if(a !== b){var x=caml_string_compare(a,b);if(x != 0)return x}}
          else
           return 1;
         else
          if(a instanceof Array && a[0] === (a[0] | 0))
           {var ta=a[0];
            if(ta === 254)ta = 0;
            if(ta === 250)
             {a = a[1];continue}
            else
             if(b instanceof Array && b[0] === (b[0] | 0))
              {var tb=b[0];
               if(tb === 254)tb = 0;
               if(tb === 250)
                {b = b[1];continue}
               else
                if(ta != tb)
                 return ta < tb?- 1:1;
                else
                 switch(ta)
                  {case 248:
                    var x=caml_int_compare(a[2],b[2]);if(x != 0)return x;break;
                   case 251:caml_invalid_argument("equal: abstract value");
                   case 255:
                    var x=caml_int64_compare(a,b);if(x != 0)return x;break;
                   default:
                    if(a.length != b.length)return a.length < b.length?- 1:1;
                    if(a.length > 1)stack.push(a,b,1)}}
             else
              return 1}
          else
           if
            (b instanceof MlString
             ||
             b instanceof Array
             &&
             b[0]
             ===
             (b[0] | 0))
            return - 1;
           else
            if(typeof a != "number" && a && a.compare)
             return a.compare(b,total);
            else
             if(typeof a == "function")
              caml_invalid_argument("compare: functional value");
             else
              {if(a < b)return - 1;
               if(a > b)return 1;
               if(a != b)
                {if(! total)return NaN;
                 if(a == a)return 1;
                 if(b == b)return - 1}}
        if(stack.length == 0)return 0;
        var i=stack.pop();
        b = stack.pop();
        a = stack.pop();
        if(i + 1 < a.length)stack.push(a,b,i + 1);
        a = a[i];
        b = b[i]}}
    function caml_compare(a,b){return caml_compare_val(a,b,true)}
    function caml_convert_raw_backtrace(){return [0]}
    function caml_create_bytes(len)
     {if(len < 0)caml_invalid_argument("Bytes.create");
      return new MlString(len?2:9,"",len)}
    function caml_fill_string(s,i,l,c)
     {if(l > 0)
       if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
        if(c == 0)
         {s.c = "";s.t = 2}
        else
         {s.c = caml_str_repeat(l,String.fromCharCode(c));s.t = l == s.l?0:2}
       else
        {if(s.t != 4)caml_convert_string_to_array(s);
         for(l += i;i < l;i++)s.c[i] = c}
      return 0}
    var caml_fill_bytes=caml_fill_string;
    function caml_parse_format(fmt)
     {fmt = caml_bytes_of_string(fmt);
      var len=fmt.length;
      if(len > 31)caml_invalid_argument("format_int: format too long");
      var
       f=
        {justify:"+",
         signstyle:"-",
         filler:" ",
         alternate:false,
         base:0,
         signedconv:false,
         width:0,
         uppercase:false,
         sign:1,
         prec:- 1,
         conv:"f"};
      for(var i=0;i < len;i++)
       {var c=fmt.charAt(i);
        switch(c)
         {case "-":f.justify = "-";break;
          case "+":
          case " ":f.signstyle = c;break;
          case "0":f.filler = "0";break;
          case "#":f.alternate = true;break;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
           f.width = 0;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.width = f.width * 10 + c;i++}
           i--;
           break;
          case ".":
           f.prec = 0;
           i++;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.prec = f.prec * 10 + c;i++}
           i--;
          case "d":
          case "i":f.signedconv = true;
          case "u":f.base = 10;break;
          case "x":f.base = 16;break;
          case "X":f.base = 16;f.uppercase = true;break;
          case "o":f.base = 8;break;
          case "e":
          case "f":
          case "g":f.signedconv = true;f.conv = c;break;
          case "E":
          case "F":
          case "G":
           f.signedconv = true;
           f.uppercase = true;
           f.conv = c.toLowerCase();
           break
          }}
      return f}
    function caml_finish_formatting(f,rawbuffer)
     {if(f.uppercase)rawbuffer = rawbuffer.toUpperCase();
      var len=rawbuffer.length;
      if(f.signedconv && (f.sign < 0 || f.signstyle != "-"))len++;
      if(f.alternate){if(f.base == 8)len += 1;if(f.base == 16)len += 2}
      var buffer="";
      if(f.justify == "+" && f.filler == " ")
       for(var i=len;i < f.width;i++)buffer += " ";
      if(f.signedconv)
       if(f.sign < 0)
        buffer += "-";
       else
        if(f.signstyle != "-")buffer += f.signstyle;
      if(f.alternate && f.base == 8)buffer += "0";
      if(f.alternate && f.base == 16)buffer += "0x";
      if(f.justify == "+" && f.filler == "0")
       for(var i=len;i < f.width;i++)buffer += "0";
      buffer += rawbuffer;
      if(f.justify == "-")for(var i=len;i < f.width;i++)buffer += " ";
      return caml_new_string(buffer)}
    function caml_format_float(fmt,x)
     {var s,f=caml_parse_format(fmt),prec=f.prec < 0?6:f.prec;
      if(x < 0 || x == 0 && 1 / x == - Infinity){f.sign = - 1;x = - x}
      if(isNaN(x))
       {s = "nan";f.filler = " "}
      else
       if(! isFinite(x))
        {s = "inf";f.filler = " "}
       else
        switch(f.conv)
         {case "e":
           var s=x.toExponential(prec),i=s.length;
           if(s.charAt(i - 3) == "e")
            s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
           break;
          case "f":s = x.toFixed(prec);break;
          case "g":
           prec = prec?prec:1;
           s = x.toExponential(prec - 1);
           var j=s.indexOf("e"),exp=+ s.slice(j + 1);
           if(exp < - 4 || x >= 1e+21 || x.toFixed(0).length > prec)
            {var i=j - 1;
             while(s.charAt(i) == "0")i--;
             if(s.charAt(i) == ".")i--;
             s = s.slice(0,i + 1) + s.slice(j);
             i = s.length;
             if(s.charAt(i - 3) == "e")
              s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
             break}
           else
            {var p=prec;
             if(exp < 0)
              {p -= exp + 1;s = x.toFixed(p)}
             else
              while(s = x.toFixed(p),s.length > prec + 1)p--;
             if(p)
              {var i=s.length - 1;
               while(s.charAt(i) == "0")i--;
               if(s.charAt(i) == ".")i--;
               s = s.slice(0,i + 1)}}
           break
          }
      return caml_finish_formatting(f,s)}
    function caml_format_int(fmt,i)
     {if(caml_bytes_of_string(fmt) == "%d")return caml_new_string("" + i);
      var f=caml_parse_format(fmt);
      if(i < 0)if(f.signedconv){f.sign = - 1;i = - i}else i >>>= 0;
      var s=i.toString(f.base);
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - s.length;
        if(n > 0)s = caml_str_repeat(n,"0") + s}
      return caml_finish_formatting(f,s)}
    var caml_oo_last_id=0;
    function caml_fresh_oo_id(){return caml_oo_last_id++}
    function caml_get_exception_raw_backtrace(){return [0]}
    function caml_greaterequal(x,y)
     {return + (caml_compare_val(x,y,false) >= 0)}
    function caml_utf8_of_utf16(s)
     {for(var b="",t=b,c,d,i=0,l=s.length;i < l;i++)
       {c = s.charCodeAt(i);
        if(c < 128)
         {for(var j=i + 1;j < l && (c = s.charCodeAt(j)) < 128;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        if(c < 2048)
         {t += String.fromCharCode(192 | c >> 6);
          t += String.fromCharCode(128 | c & 63)}
        else
         if(c < 55296 || c >= 57343)
          t
          +=
          String.fromCharCode(224 | c >> 12,128 | c >> 6 & 63,128 | c & 63);
         else
          if
           (c
            >=
            56319
            ||
            i
            +
            1
            ==
            l
            ||
            (d = s.charCodeAt(i + 1))
            <
            56320
            ||
            d
            >
            57343)
           t += "\xef\xbf\xbd";
          else
           {i++;
            c = (c << 10) + d - 56613888;
            t
            +=
            String.fromCharCode
             (240 | c >> 18,128 | c >> 12 & 63,128 | c >> 6 & 63,128 | c & 63)}
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_js_to_string(s)
     {var tag=9;
      if(! caml_is_ascii(s))tag = 8,s = caml_utf8_of_utf16(s);
      return new MlString(tag,s,s.length)}
    function caml_hexstring_of_float(x,prec,style)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_js_to_string("nan");
        return caml_js_to_string(x > 0?"infinity":"-infinity")}
      var sign=x == 0 && 1 / x == - Infinity?1:x >= 0?0:1;
      if(sign)x = - x;
      var exp=0;
      if(x == 0)
       ;
      else
       if(x < 1)
        while(x < 1 && exp > - 1022){x *= 2;exp--}
       else
        while(x >= 2){x /= 2;exp++}
      var exp_sign=exp < 0?"":"+",sign_str="";
      if(sign)
       sign_str = "-";
      else
       switch(style)
        {case 43:sign_str = "+";break;
         case 32:sign_str = " ";break;
         default:break}
      if(prec >= 0 && prec < 13)
       {var cst=Math.pow(2,prec * 4);x = Math.round(x * cst) / cst}
      var x_str=x.toString(16);
      if(prec >= 0)
       {var idx=x_str.indexOf(".");
        if(idx < 0)
         x_str += "." + caml_str_repeat(prec,"0");
        else
         {var size=idx + 1 + prec;
          if(x_str.length < size)
           x_str += caml_str_repeat(size - x_str.length,"0");
          else
           x_str = x_str.substr(0,size)}}
      return caml_js_to_string
              (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10))}
    function caml_int64_is_zero(x){return (x[3] | x[2] | x[1]) == 0}
    function caml_int64_of_int32(x)
     {return [255,x & 16777215,x >> 24 & 16777215,x >> 31 & 65535]}
    function caml_obj_dup(x)
     {var l=x.length,a=new Array(l);
      for(var i=0;i < l;i++)a[i] = x[i];
      return a}
    function caml_int64_sub(x,y)
     {var
       z1=x[1] - y[1],
       z2=x[2] - y[2] + (z1 >> 24),
       z3=x[3] - y[3] + (z2 >> 24);
      return [255,z1 & 16777215,z2 & 16777215,z3 & 65535]}
    function caml_int64_ucompare(x,y)
     {if(x[3] > y[3])return 1;
      if(x[3] < y[3])return - 1;
      if(x[2] > y[2])return 1;
      if(x[2] < y[2])return - 1;
      if(x[1] > y[1])return 1;
      if(x[1] < y[1])return - 1;
      return 0}
    function caml_int64_lsl1(x)
     {x[3] = x[3] << 1 | x[2] >> 23;
      x[2] = (x[2] << 1 | x[1] >> 23) & 16777215;
      x[1] = x[1] << 1 & 16777215}
    function caml_int64_lsr1(x)
     {x[1] = (x[1] >>> 1 | x[2] << 23) & 16777215;
      x[2] = (x[2] >>> 1 | x[3] << 23) & 16777215;
      x[3] = x[3] >>> 1}
    function caml_int64_udivmod(x,y)
     {var
       offset=0,
       modulus=caml_obj_dup(x),
       divisor=caml_obj_dup(y),
       quotient=[255,0,0,0];
      while(caml_int64_ucompare(modulus,divisor) > 0)
       {offset++;caml_int64_lsl1(divisor)}
      while(offset >= 0)
       {offset--;
        caml_int64_lsl1(quotient);
        if(caml_int64_ucompare(modulus,divisor) >= 0)
         {quotient[1]++;modulus = caml_int64_sub(modulus,divisor)}
        caml_int64_lsr1(divisor)}
      return [0,quotient,modulus]}
    function caml_int64_to_int32(x){return x[1] | x[2] << 24}
    function caml_int64_is_negative(x){return x[3] << 16 < 0}
    function caml_int64_neg(x)
     {var y1=- x[1],y2=- x[2] + (y1 >> 24),y3=- x[3] + (y2 >> 24);
      return [255,y1 & 16777215,y2 & 16777215,y3 & 65535]}
    function caml_int64_format(fmt,x)
     {var f=caml_parse_format(fmt);
      if(f.signedconv && caml_int64_is_negative(x))
       {f.sign = - 1;x = caml_int64_neg(x)}
      var
       buffer="",
       wbase=caml_int64_of_int32(f.base),
       cvtbl="0123456789abcdef";
      do
       {var p=caml_int64_udivmod(x,wbase);
        x = p[1];
        buffer = cvtbl.charAt(caml_int64_to_int32(p[2])) + buffer}
      while
       (! caml_int64_is_zero(x));
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - buffer.length;
        if(n > 0)buffer = caml_str_repeat(n,"0") + buffer}
      return caml_finish_formatting(f,buffer)}
    function caml_js_from_string(s){return s.toString()}
    function caml_js_get_console()
     {var
       c=joo_global_object.console?joo_global_object.console:{},
       m=
        ["log",
         "debug",
         "info",
         "warn",
         "error",
         "assert",
         "dir",
         "dirxml",
         "trace",
         "group",
         "groupCollapsed",
         "groupEnd",
         "time",
         "timeEnd"];
      function f(){}
      for(var i=0;i < m.length;i++)if(! c[m[i]])c[m[i]] = f;
      return c}
    function caml_js_to_byte_string(s){return caml_new_string(s)}
    function caml_js_wrap_callback(f)
     {return function()
       {return arguments.length > 0
                ?caml_call_gen(f,arguments)
                :caml_call_gen(f,[undefined])}}
    function raw_array_cons(a,x)
     {var l=a.length,b=new Array(l + 1);
      b[0] = x;
      for(var i=1;i <= l;i++)b[i] = a[i - 1];
      return b}
    function caml_js_wrap_meth_callback(f)
     {return function()
       {return caml_call_gen(f,raw_array_cons(arguments,this))}}
    var JSON=joo_global_object.JSON;
    if(typeof JSON !== "object")JSON = {};
    (function()
       {"use strict";
        var
         rx_one=/^[\],:{}\s]*$/,
         rx_two=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,
         rx_three=
          /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
         rx_four=/(?:^|:|,)(?:\s*\[)+/g,
         rx_escapable=
          /[\\\"\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
         rx_dangerous=
          /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
        function f(n){return n < 10?"0" + n:n}
        function this_value(){return this.valueOf()}
        if(typeof Date.prototype.toJSON !== "function")
         {Date.prototype.toJSON
          =
          function()
           {return isFinite(this.valueOf())
                    ?this.getUTCFullYear()
                     +
                     "-"
                     +
                     f(this.getUTCMonth() + 1)
                     +
                     "-"
                     +
                     f(this.getUTCDate())
                     +
                     "T"
                     +
                     f(this.getUTCHours())
                     +
                     ":"
                     +
                     f(this.getUTCMinutes())
                     +
                     ":"
                     +
                     f(this.getUTCSeconds())
                     +
                     "Z"
                    :null};
          Boolean.prototype.toJSON = this_value;
          Number.prototype.toJSON = this_value;
          String.prototype.toJSON = this_value}
        var gap,indent,meta,rep;
        function quote(string)
         {rx_escapable.lastIndex = 0;
          return rx_escapable.test(string)
                  ?'"'
                   +
                   string.replace
                    (rx_escapable,
                     function(a)
                      {var c=meta[a];
                       return typeof c === "string"
                               ?c
                               :"\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(- 4)})
                   +
                   '"'
                  :'"' + string + '"'}
        function str(key,holder)
         {var i,k,v,length,mind=gap,partial,value=holder[key];
          if
           (value
            &&
            typeof value
            ===
            "object"
            &&
            typeof value.toJSON
            ===
            "function")
           value = value.toJSON(key);
          if(typeof rep === "function")value = rep.call(holder,key,value);
          switch(typeof value)
           {case "string":return quote(value);
            case "number":return isFinite(value)?String(value):"null";
            case "boolean":
            case "null":return String(value);
            case "object":
             if(! value)return "null";
             gap += indent;
             partial = [];
             if(Object.prototype.toString.apply(value) === "[object Array]")
              {length = value.length;
               for(i = 0;i < length;i += 1)
                partial[i] = str(i,value) || "null";
               v
               =
               partial.length === 0
                ?"[]"
                :gap
                  ?"[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]"
                  :"[" + partial.join(",") + "]";
               gap = mind;
               return v}
             if(rep && typeof rep === "object")
              {length = rep.length;
               for(i = 0;i < length;i += 1)
                if(typeof rep[i] === "string")
                 {k = rep[i];
                  v = str(k,value);
                  if(v)partial.push(quote(k) + (gap?": ":":") + v)}}
             else
              for(k in value)
               if(Object.prototype.hasOwnProperty.call(value,k))
                {v = str(k,value);
                 if(v)partial.push(quote(k) + (gap?": ":":") + v)}
             v
             =
             partial.length === 0
              ?"{}"
              :gap
                ?"{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}"
                :"{" + partial.join(",") + "}";
             gap = mind;
             return v
            }}
        if(typeof JSON.stringify !== "function")
         {meta
          =
          {"\b":"\\b",
           "\t":"\\t",
           "\n":"\\n",
           "\f":"\\f",
           "\r":"\\r",
           '"':'\\"',
           "\\":"\\\\"};
          JSON.stringify
          =
          function(value,replacer,space)
           {var i;
            gap = "";
            indent = "";
            if(typeof space === "number")
             for(i = 0;i < space;i += 1)indent += " ";
            else
             if(typeof space === "string")indent = space;
            rep = replacer;
            if
             (replacer
              &&
              typeof replacer
              !==
              "function"
              &&
              (typeof replacer
               !==
               "object"
               ||
               typeof replacer.length
               !==
               "number"))
             throw new Error("JSON.stringify");
            return str("",{"":value})}}
        if(typeof JSON.parse !== "function")
         JSON.parse
         =
         function(text,reviver)
          {var j;
           function walk(holder,key)
            {var k,v,value=holder[key];
             if(value && typeof value === "object")
              for(k in value)
               if(Object.prototype.hasOwnProperty.call(value,k))
                {v = walk(value,k);
                 if(v !== undefined)value[k] = v;else delete value[k]}
             return reviver.call(holder,key,value)}
           text = String(text);
           rx_dangerous.lastIndex = 0;
           if(rx_dangerous.test(text))
            text
            =
            text.replace
             (rx_dangerous,
              function(a)
               {return "\\u"
                       +
                       ("0000" + a.charCodeAt(0).toString(16)).slice(- 4)});
           if
            (rx_one.test
              (text.replace(rx_two,"@").replace(rx_three,"]").replace
                (rx_four,"")))
            {j = eval("(" + text + ")");
             return typeof reviver === "function"?walk({"":j},""):j}
           throw new SyntaxError("JSON.parse")}}
      ());
    function caml_json(){return JSON}
    function caml_make_vect(len,init)
     {var len=len + 1 | 0,b=new Array(len);
      b[0] = 0;
      for(var i=1;i < len;i++)b[i] = init;
      return b}
    function caml_string_of_array(a){return new MlString(4,a,a.length)}
    var
     caml_md5_string=
      function()
        {function add(x,y){return x + y | 0}
         function xx(q,a,b,x,s,t)
          {a = add(add(a,q),add(x,t));return add(a << s | a >>> 32 - s,b)}
         function ff(a,b,c,d,x,s,t){return xx(b & c | ~ b & d,a,b,x,s,t)}
         function gg(a,b,c,d,x,s,t){return xx(b & d | c & ~ d,a,b,x,s,t)}
         function hh(a,b,c,d,x,s,t){return xx(b ^ c ^ d,a,b,x,s,t)}
         function ii(a,b,c,d,x,s,t){return xx(c ^ (b | ~ d),a,b,x,s,t)}
         function md5(buffer,length)
          {var i=length;
           buffer[i >> 2] |= 128 << 8 * (i & 3);
           for(i = (i & ~ 3) + 8;(i & 63) < 60;i += 4)
            buffer[(i >> 2) - 1] = 0;
           buffer[(i >> 2) - 1] = length << 3;
           buffer[i >> 2] = length >> 29 & 536870911;
           var w=[1732584193,4023233417,2562383102,271733878];
           for(i = 0;i < buffer.length;i += 16)
            {var a=w[0],b=w[1],c=w[2],d=w[3];
             a = ff(a,b,c,d,buffer[i + 0],7,3614090360);
             d = ff(d,a,b,c,buffer[i + 1],12,3905402710);
             c = ff(c,d,a,b,buffer[i + 2],17,606105819);
             b = ff(b,c,d,a,buffer[i + 3],22,3250441966);
             a = ff(a,b,c,d,buffer[i + 4],7,4118548399);
             d = ff(d,a,b,c,buffer[i + 5],12,1200080426);
             c = ff(c,d,a,b,buffer[i + 6],17,2821735955);
             b = ff(b,c,d,a,buffer[i + 7],22,4249261313);
             a = ff(a,b,c,d,buffer[i + 8],7,1770035416);
             d = ff(d,a,b,c,buffer[i + 9],12,2336552879);
             c = ff(c,d,a,b,buffer[i + 10],17,4294925233);
             b = ff(b,c,d,a,buffer[i + 11],22,2304563134);
             a = ff(a,b,c,d,buffer[i + 12],7,1804603682);
             d = ff(d,a,b,c,buffer[i + 13],12,4254626195);
             c = ff(c,d,a,b,buffer[i + 14],17,2792965006);
             b = ff(b,c,d,a,buffer[i + 15],22,1236535329);
             a = gg(a,b,c,d,buffer[i + 1],5,4129170786);
             d = gg(d,a,b,c,buffer[i + 6],9,3225465664);
             c = gg(c,d,a,b,buffer[i + 11],14,643717713);
             b = gg(b,c,d,a,buffer[i + 0],20,3921069994);
             a = gg(a,b,c,d,buffer[i + 5],5,3593408605);
             d = gg(d,a,b,c,buffer[i + 10],9,38016083);
             c = gg(c,d,a,b,buffer[i + 15],14,3634488961);
             b = gg(b,c,d,a,buffer[i + 4],20,3889429448);
             a = gg(a,b,c,d,buffer[i + 9],5,568446438);
             d = gg(d,a,b,c,buffer[i + 14],9,3275163606);
             c = gg(c,d,a,b,buffer[i + 3],14,4107603335);
             b = gg(b,c,d,a,buffer[i + 8],20,1163531501);
             a = gg(a,b,c,d,buffer[i + 13],5,2850285829);
             d = gg(d,a,b,c,buffer[i + 2],9,4243563512);
             c = gg(c,d,a,b,buffer[i + 7],14,1735328473);
             b = gg(b,c,d,a,buffer[i + 12],20,2368359562);
             a = hh(a,b,c,d,buffer[i + 5],4,4294588738);
             d = hh(d,a,b,c,buffer[i + 8],11,2272392833);
             c = hh(c,d,a,b,buffer[i + 11],16,1839030562);
             b = hh(b,c,d,a,buffer[i + 14],23,4259657740);
             a = hh(a,b,c,d,buffer[i + 1],4,2763975236);
             d = hh(d,a,b,c,buffer[i + 4],11,1272893353);
             c = hh(c,d,a,b,buffer[i + 7],16,4139469664);
             b = hh(b,c,d,a,buffer[i + 10],23,3200236656);
             a = hh(a,b,c,d,buffer[i + 13],4,681279174);
             d = hh(d,a,b,c,buffer[i + 0],11,3936430074);
             c = hh(c,d,a,b,buffer[i + 3],16,3572445317);
             b = hh(b,c,d,a,buffer[i + 6],23,76029189);
             a = hh(a,b,c,d,buffer[i + 9],4,3654602809);
             d = hh(d,a,b,c,buffer[i + 12],11,3873151461);
             c = hh(c,d,a,b,buffer[i + 15],16,530742520);
             b = hh(b,c,d,a,buffer[i + 2],23,3299628645);
             a = ii(a,b,c,d,buffer[i + 0],6,4096336452);
             d = ii(d,a,b,c,buffer[i + 7],10,1126891415);
             c = ii(c,d,a,b,buffer[i + 14],15,2878612391);
             b = ii(b,c,d,a,buffer[i + 5],21,4237533241);
             a = ii(a,b,c,d,buffer[i + 12],6,1700485571);
             d = ii(d,a,b,c,buffer[i + 3],10,2399980690);
             c = ii(c,d,a,b,buffer[i + 10],15,4293915773);
             b = ii(b,c,d,a,buffer[i + 1],21,2240044497);
             a = ii(a,b,c,d,buffer[i + 8],6,1873313359);
             d = ii(d,a,b,c,buffer[i + 15],10,4264355552);
             c = ii(c,d,a,b,buffer[i + 6],15,2734768916);
             b = ii(b,c,d,a,buffer[i + 13],21,1309151649);
             a = ii(a,b,c,d,buffer[i + 4],6,4149444226);
             d = ii(d,a,b,c,buffer[i + 11],10,3174756917);
             c = ii(c,d,a,b,buffer[i + 2],15,718787259);
             b = ii(b,c,d,a,buffer[i + 9],21,3951481745);
             w[0] = add(a,w[0]);
             w[1] = add(b,w[1]);
             w[2] = add(c,w[2]);
             w[3] = add(d,w[3])}
           var t=new Array(16);
           for(var i=0;i < 4;i++)
            for(var j=0;j < 4;j++)t[i * 4 + j] = w[i] >> 8 * j & 255;
           return t}
         return function(s,ofs,len)
          {var buf=[];
           switch(s.t & 6)
            {default:caml_convert_string_to_bytes(s);case 0:
              var b=s.c;
              for(var i=0;i < len;i += 4)
               {var j=i + ofs;
                buf[i >> 2]
                =
                b.charCodeAt(j)
                |
                b.charCodeAt(j + 1)
                <<
                8
                |
                b.charCodeAt(j + 2)
                <<
                16
                |
                b.charCodeAt(j + 3)
                <<
                24}
              for(;i < len;i++)
               buf[i >> 2] |= b.charCodeAt(i + ofs) << 8 * (i & 3);
              break;
             case 4:
              var a=s.c;
              for(var i=0;i < len;i += 4)
               {var j=i + ofs;
                buf[i >> 2]
                =
                a[j]
                |
                a[j + 1]
                <<
                8
                |
                a[j + 2]
                <<
                16
                |
                a[j + 3]
                <<
                24}
              for(;i < len;i++)buf[i >> 2] |= a[i + ofs] << 8 * (i & 3)
             }
           return caml_string_of_array(md5(buf,len))}}
       ();
    function caml_ml_bytes_length(s){return s.l}
    function caml_raise_sys_error(msg)
     {caml_raise_with_string(caml_global_data.Sys_error,msg)}
    var caml_ml_channels=new Array();
    function caml_ml_flush(chanid)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)caml_raise_sys_error("Cannot flush a closed channel");
      if(! chan.buffer || chan.buffer == "")return 0;
      if
       (chan.fd
        &&
        caml_global_data.fds[chan.fd]
        &&
        caml_global_data.fds[chan.fd].output)
       {var output=caml_global_data.fds[chan.fd].output;
        switch(output.length)
         {case 2:output(chanid,chan.buffer);break;default:output(chan.buffer)}}
      chan.buffer = "";
      return 0}
    if(joo_global_object.process && joo_global_object.process.cwd)
     var caml_current_dir=joo_global_object.process.cwd().replace(/\\/g,"/");
    else
     var caml_current_dir="/static";
    if(caml_current_dir.slice(- 1) !== "/")caml_current_dir += "/";
    function caml_make_path(name)
     {name = name instanceof MlString?name.toString():name;
      if(name.charCodeAt(0) != 47)name = caml_current_dir + name;
      var comp=name.split("/"),ncomp=[];
      for(var i=0;i < comp.length;i++)
       switch(comp[i])
        {case "..":if(ncomp.length > 1)ncomp.pop();break;
         case ".":break;
         case "":if(ncomp.length == 0)ncomp.push("");break;
         default:ncomp.push(comp[i]);break}
      ncomp.orig = name;
      return ncomp}
    function caml_raise_no_such_file(name)
     {name = name instanceof MlString?name.toString():name;
      caml_raise_sys_error(name + ": No such file or directory")}
    function caml_string_unsafe_get(s,i)
     {switch(s.t & 6)
       {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
        case 4:return s.c[i]
        }}
    function caml_string_get(s,i)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_string_unsafe_get(s,i)}
    function caml_create_string(len)
     {if(len < 0)caml_invalid_argument("String.create");
      return new MlString(len?2:9,"",len)}
    function caml_ml_string_length(s){return s.l}
    function MlFile(){}
    function MlFakeFile(content){this.data = content}
    MlFakeFile.prototype = new MlFile();
    MlFakeFile.prototype.truncate
    =
    function(len)
     {var old=this.data;
      this.data = caml_create_string(len | 0);
      caml_blit_string(old,0,this.data,0,len)};
    MlFakeFile.prototype.length
    =
    function(){return caml_ml_string_length(this.data)};
    MlFakeFile.prototype.write
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      if(offset + len >= clen)
       {var new_str=caml_create_string(offset + len),old_data=this.data;
        this.data = new_str;
        caml_blit_string(old_data,0,this.data,0,clen)}
      caml_blit_string(buf,pos,this.data,offset,len);
      return 0};
    MlFakeFile.prototype.read
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      caml_blit_string(this.data,offset,buf,pos,len);
      return 0};
    MlFakeFile.prototype.read_one
    =
    function(offset){return caml_string_get(this.data,offset)};
    MlFakeFile.prototype.close = function(){};
    MlFakeFile.prototype.constructor = MlFakeFile;
    function MlFakeDevice(root,f)
     {this.content = {};this.root = root;this.lookupFun = f}
    MlFakeDevice.prototype.nm = function(name){return this.root + name};
    MlFakeDevice.prototype.lookup
    =
    function(name)
     {if(! this.content[name] && this.lookupFun)
       {var
         res=
          this.lookupFun(caml_new_string(this.root),caml_new_string(name));
        if(res != 0)this.content[name] = new MlFakeFile(res[1])}};
    MlFakeDevice.prototype.exists
    =
    function(name)
     {if(name == "")return 1;
      var name_slash=name + "/",r=new RegExp("^" + name_slash);
      for(var n in this.content)if(n.match(r))return 1;
      this.lookup(name);
      return this.content[name]?1:0};
    MlFakeDevice.prototype.readdir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       seen={},
       a=[];
      for(var n in this.content)
       {var m=n.match(r);
        if(m && ! seen[m[1]]){seen[m[1]] = true;a.push(m[1])}}
      return a};
    MlFakeDevice.prototype.is_dir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       a=[];
      for(var n in this.content){var m=n.match(r);if(m)return 1}
      return 0};
    MlFakeDevice.prototype.unlink
    =
    function(name)
     {var ok=this.content[name]?true:false;
      delete this.content[name];
      return ok};
    MlFakeDevice.prototype.open
    =
    function(name,f)
     {if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      this.lookup(name);
      if(this.content[name])
       {if(this.is_dir(name))
         caml_raise_sys_error(this.nm(name) + " : is a directory");
        if(f.create && f.excl)
         caml_raise_sys_error(this.nm(name) + " : file already exists");
        var file=this.content[name];
        if(f.truncate)file.truncate();
        return file}
      else
       if(f.create)
        {this.content[name] = new MlFakeFile(caml_create_string(0));
         return this.content[name]}
       else
        caml_raise_no_such_file(this.nm(name))};
    MlFakeDevice.prototype.register
    =
    function(name,content)
     {if(this.content[name])
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      if(content instanceof MlString)
       this.content[name] = new MlFakeFile(content);
      else
       if(content instanceof Array)
        this.content[name] = new MlFakeFile(caml_string_of_array(content));
       else
        if(content.toString)
         {var mlstring=caml_new_string(content.toString());
          this.content[name] = new MlFakeFile(mlstring)}};
    MlFakeDevice.prototype.constructor = MlFakeDevice;
    function caml_array_of_string(s)
     {if(s.t != 4)caml_convert_string_to_array(s);return s.c}
    function caml_string_unsafe_set(s,i,c)
     {c &= 255;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_string_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_string_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_string_unsafe_set(s,i,c)}
    var Buffer=joo_global_object.Buffer;
    function MlNodeFile(fd){this.fs = require("fs");this.fd = fd}
    MlNodeFile.prototype = new MlFile();
    MlNodeFile.prototype.truncate
    =
    function(len){this.fs.ftruncateSync(this.fd,len | 0)};
    MlNodeFile.prototype.length
    =
    function(){return this.fs.fstatSync(this.fd).size};
    MlNodeFile.prototype.write
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(! (a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=new Buffer(a);
      this.fs.writeSync(this.fd,buffer,buf_offset,len,offset);
      return 0};
    MlNodeFile.prototype.read
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(! (a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=new Buffer(a);
      this.fs.readSync(this.fd,buffer,buf_offset,len,offset);
      for(var i=0;i < len;i++)
       caml_string_set(buf,buf_offset + i,buffer[buf_offset + i]);
      return 0};
    MlNodeFile.prototype.read_one
    =
    function(offset)
     {var a=new (joo_global_object.Uint8Array)(1),buffer=new Buffer(a);
      this.fs.readSync(this.fd,buffer,0,1,offset);
      return buffer[0]};
    MlNodeFile.prototype.close = function(){this.fs.closeSync(this.fd)};
    MlNodeFile.prototype.constructor = MlNodeFile;
    function MlNodeDevice(root){this.fs = require("fs");this.root = root}
    MlNodeDevice.prototype.nm = function(name){return this.root + name};
    MlNodeDevice.prototype.exists
    =
    function(name){return this.fs.existsSync(this.nm(name))?1:0};
    MlNodeDevice.prototype.readdir
    =
    function(name){return this.fs.readdirSync(this.nm(name))};
    MlNodeDevice.prototype.is_dir
    =
    function(name){return this.fs.statSync(this.nm(name)).isDirectory()?1:0};
    MlNodeDevice.prototype.unlink
    =
    function(name)
     {var b=this.fs.existsSync(this.nm(name))?1:0;
      this.fs.unlinkSync(this.nm(name));
      return b};
    MlNodeDevice.prototype.open
    =
    function(name,f)
     {var consts=require("constants"),res=0;
      for(var key in f)
       switch(key)
        {case "rdonly":res |= consts.O_RDONLY;break;
         case "wronly":res |= consts.O_WRONLY;break;
         case "append":res |= consts.O_WRONLY | consts.O_APPEND;break;
         case "create":res |= consts.O_CREAT;break;
         case "truncate":res |= consts.O_TRUNC;break;
         case "excl":res |= consts.O_EXCL;break;
         case "binary":res |= consts.O_BINARY;break;
         case "text":res |= consts.O_TEXT;break;
         case "nonblock":res |= consts.O_NONBLOCK;break
         }
      var fd=this.fs.openSync(this.nm(name),res);
      return new MlNodeFile(fd)};
    MlNodeDevice.prototype.rename
    =
    function(o,n){this.fs.renameSync(this.nm(o),this.nm(n))};
    MlNodeDevice.prototype.constructor = MlNodeDevice;
    var caml_root=caml_current_dir.match(/[^\/]*\//)[0],jsoo_mount_point=[];
    if
     (typeof module
      !==
      "undefined"
      &&
      module.exports
      &&
      typeof require
      !==
      "undefined")
     jsoo_mount_point.push
      ({path:caml_root,device:new MlNodeDevice(caml_root)});
    else
     jsoo_mount_point.push
      ({path:caml_root,device:new MlFakeDevice(caml_root)});
    jsoo_mount_point.push
     ({path:caml_root + "static/",
       device:new MlFakeDevice(caml_root + "static/")});
    function resolve_fs_device(name)
     {var
       path=caml_make_path(name),
       name=path.join("/"),
       name_slash=name + "/",
       res;
      for(var i=0;i < jsoo_mount_point.length;i++)
       {var m=jsoo_mount_point[i];
        if
         (name_slash.search(m.path)
          ==
          0
          &&
          (! res || res.path.length < m.path.length))
         res
         =
         {path:m.path,
          device:m.device,
          rest:name.substring(m.path.length,name.length)}}
      return res}
    function caml_std_output(chanid,s)
     {var
       chan=caml_ml_channels[chanid],
       str=caml_new_string(s),
       slen=caml_ml_string_length(str);
      chan.file.write(chan.offset,str,0,slen);
      chan.offset += slen;
      return 0}
    function js_print_stderr(s)
     {var g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stderr.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.error && v.error(s)}}
    function js_print_stdout(s)
     {var g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stdout.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.log && v.log(s)}}
    function caml_sys_open_internal(idx,output,file,flags)
     {if(caml_global_data.fds === undefined)
       caml_global_data.fds = new Array();
      flags = flags?flags:{};
      var info={};
      info.file = file;
      info.offset = flags.append?file.length():0;
      info.flags = flags;
      info.output = output;
      caml_global_data.fds[idx] = info;
      if(! caml_global_data.fd_last_idx || idx > caml_global_data.fd_last_idx)
       caml_global_data.fd_last_idx = idx;
      return idx}
    function caml_sys_open(name,flags,_perms)
     {var f={};
      while(flags)
       {switch(flags[1])
         {case 0:f.rdonly = 1;break;
          case 1:f.wronly = 1;break;
          case 2:f.append = 1;break;
          case 3:f.create = 1;break;
          case 4:f.truncate = 1;break;
          case 5:f.excl = 1;break;
          case 6:f.binary = 1;break;
          case 7:f.text = 1;break;
          case 8:f.nonblock = 1;break
          }
        flags = flags[2]}
      if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (name.toString()
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (name.toString()
         +
         " : flags Open_text and Open_binary are not compatible");
      var
       root=resolve_fs_device(name),
       file=root.device.open(root.rest,f),
       idx=caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;
      return caml_sys_open_internal(idx + 1,caml_std_output,file,f)}
    caml_sys_open_internal
     (0,caml_std_output,new MlFakeFile(caml_create_string(0)));
    caml_sys_open_internal
     (1,js_print_stdout,new MlFakeFile(caml_create_string(0)));
    caml_sys_open_internal
     (2,js_print_stderr,new MlFakeFile(caml_create_string(0)));
    function caml_ml_open_descriptor_in(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.wronly)caml_raise_sys_error("fd " + fd + " is writeonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:false,
         refill:null};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_open_descriptor_out(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.rdonly)caml_raise_sys_error("fd " + fd + " is readonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:true,
         buffer:""};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_out_channels_list()
     {var l=0;
      for(var c=0;c < caml_ml_channels.length;c++)
       if
        (caml_ml_channels[c]
         &&
         caml_ml_channels[c].opened
         &&
         caml_ml_channels[c].out)
        l = [0,caml_ml_channels[c].fd,l];
      return l}
    function caml_ml_output(chanid,buffer,offset,len)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)
       caml_raise_sys_error("Cannot output to a closed channel");
      var string;
      if(offset == 0 && caml_ml_string_length(buffer) == len)
       string = buffer;
      else
       {string = caml_create_string(len);
        caml_blit_string(buffer,offset,string,0,len)}
      var jsstring=string.toString(),id=jsstring.lastIndexOf("\n");
      if(id < 0)
       chan.buffer += jsstring;
      else
       {chan.buffer += jsstring.substr(0,id + 1);
        caml_ml_flush(chanid);
        chan.buffer += jsstring.substr(id + 1)}
      return 0}
    function caml_ml_output_char(chanid,c)
     {var s=caml_new_string(String.fromCharCode(c));
      caml_ml_output(chanid,s,0,1);
      return 0}
    function caml_raise_constant(tag){throw tag}
    function caml_raise_zero_divide()
     {caml_raise_constant(caml_global_data.Division_by_zero)}
    function caml_mod(x,y){if(y == 0)caml_raise_zero_divide();return x % y}
    function caml_modf_float(x)
     {if(isFinite(x))
       {var neg=1 / x < 0;
        x = Math.abs(x);
        var i=Math.floor(x),f=x - i;
        if(neg){i = - i;f = - f}
        return [0,f,i]}
      if(isNaN(x))return [0,NaN,NaN];
      return [0,1 / x,x]}
    function caml_notequal(x,y){return + (caml_compare_val(x,y,false) != 0)}
    function caml_obj_set_tag(x,tag){x[0] = tag;return 0}
    function caml_obj_tag(x)
     {return x instanceof Array?x[0]:x instanceof MlString?252:1e3}
    function caml_register_global(n,v,name_opt)
     {caml_global_data[n + 1] = v;if(name_opt)caml_global_data[name_opt] = v}
    var caml_named_values={};
    function caml_register_named_value(nm,v)
     {caml_named_values[caml_bytes_of_string(nm)] = v;return 0}
    function caml_string_equal(s1,s2)
     {if(s1 === s2)return 1;
      s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c == s2.c?1:0}
    function caml_string_notequal(s1,s2){return 1 - caml_string_equal(s1,s2)}
    function caml_sys_const_max_wosize(){return 2147483647 / 4 | 0}
    function caml_sys_exit(code)
     {var g=joo_global_object;
      if(g.quit)g.quit(code);
      if(g.process && g.process.exit)g.process.exit(code);
      caml_invalid_argument("Function 'exit' not implemented")}
    function caml_sys_get_config(){return [0,caml_new_string("Unix"),32,0]}
    function caml_raise_not_found()
     {caml_raise_constant(caml_global_data.Not_found)}
    function caml_sys_getenv(name)
     {var g=joo_global_object,n=name.toString();
      if(g.process && g.process.env && g.process.env[n] != undefined)
       return caml_js_to_string(g.process.env[n]);
      caml_raise_not_found()}
    function caml_sys_random_seed()
     {var x=new Date() ^ 4294967295 * Math.random();return [0,x]}
    function caml_trampoline(res)
     {var c=1;
      while(res && res.joo_tramp)
       {res = res.joo_tramp.apply(null,res.joo_args);c++}
      return res}
    function caml_trampoline_return(f,args)
     {return {joo_tramp:f,joo_args:args}}
    function caml_update_dummy(x,y)
     {if(typeof y === "function"){x.fun = y;return 0}
      if(y.fun){x.fun = y.fun;return 0}
      var i=y.length;
      while(i--)x[i] = y[i];
      return 0}
    function caml_return_exn_constant(tag){return tag}
    function caml_named_value(nm){return caml_named_values[nm]}
    function caml_wrap_exception(e)
     {if(e instanceof Array)return e;
      if
       (joo_global_object.RangeError
        &&
        e instanceof joo_global_object.RangeError
        &&
        e.message
        &&
        e.message.match(/maximum call stack/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if
       (joo_global_object.InternalError
        &&
        e instanceof joo_global_object.InternalError
        &&
        e.message
        &&
        e.message.match(/too much recursion/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if(e instanceof joo_global_object.Error && caml_named_value("jsError"))
       return [0,caml_named_value("jsError"),e];
      return [0,caml_global_data.Failure,caml_js_to_string(String(e))]}
    function unix_gettimeofday(){return new Date().getTime() / 1e3}
    function unix_inet_addr_of_string(){return 0}
    function unix_localtime(t)
     {var
       d=new Date(t * 1e3),
       januaryfirst=new Date(d.getFullYear(),0,1),
       doy=Math.floor((d - januaryfirst) / 864e5),
       jan=new Date(d.getFullYear(),0,1),
       jul=new Date(d.getFullYear(),6,1),
       stdTimezoneOffset=
        Math.max(jan.getTimezoneOffset(),jul.getTimezoneOffset());
      return [0,
              d.getSeconds(),
              d.getMinutes(),
              d.getHours(),
              d.getDate(),
              d.getMonth(),
              d.getFullYear() - 1900,
              d.getDay(),
              doy,
              d.getTimezoneOffset() < stdTimezoneOffset | 0]}
    function unix_time(){return Math.floor(unix_gettimeofday())}
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):caml_call_gen(f,[a0,a1,a2])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5?f(a0,a1,a2,a3,a4):caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    function caml_call8(f,a0,a1,a2,a3,a4,a5,a6,a7)
     {return f.length == 8
              ?f(a0,a1,a2,a3,a4,a5,a6,a7)
              :caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7])}
    var
     Out_of_memory=[248,caml_new_string("Out_of_memory"),-1],
     Sys_error=[248,caml_new_string("Sys_error"),-2],
     Failure=[248,caml_new_string("Failure"),-3],
     Invalid_argument=[248,caml_new_string("Invalid_argument"),-4],
     End_of_file=[248,caml_new_string("End_of_file"),-5],
     Division_by_zero=[248,caml_new_string("Division_by_zero"),-6],
     Not_found=[248,caml_new_string("Not_found"),-7],
     Match_failure=[248,caml_new_string("Match_failure"),-8],
     Stack_overflow=[248,caml_new_string("Stack_overflow"),-9],
     Sys_blocked_io=[248,caml_new_string("Sys_blocked_io"),-10],
     Assert_failure=[248,caml_new_string("Assert_failure"),-11],
     Undefined_recursive_module=
      [248,caml_new_string("Undefined_recursive_module"),-12],
     s=caml_new_string("Buffer.add: cannot grow buffer"),
     partial=[4,0,0,0,0],
     locfmt=
      [0,
       [11,
        caml_new_string('File "'),
        [2,
         0,
         [11,
          caml_new_string('", line '),
          [4,
           0,
           0,
           0,
           [11,
            caml_new_string(", characters "),
            [4,0,0,0,[12,45,[4,0,0,0,[11,caml_new_string(": "),[2,0,0]]]]]]]]]],
       caml_new_string('File "%s", line %d, characters %d-%d: %s')],
     api_function_name=caml_new_string("wakeup"),
     dummy_string=caml_new_string(""),
     timeout_during$0=caml_new_string("waiting for message recv"),
     timeout_during=caml_new_string("sending message"),
     err_msg=
      caml_new_string
       ("ERROR: There already is a request to create a context!!"),
     partial$0=
      [4,
       0,
       [0,2,2],
       0,
       [12,46,[4,0,[0,2,3],0,[12,32,[2,0,[11,caml_new_string(" : "),0]]]]]],
     signalling_server_url=caml_new_string("http://localhost:3000"),
     addr=caml_new_string("tcp://127.0.0.1:5555"),
     myid=caml_new_string("manager_0"),
     opt=[0,0];
    caml_register_global
     (11,Undefined_recursive_module,"Undefined_recursive_module");
    caml_register_global(10,Assert_failure,"Assert_failure");
    caml_register_global(9,Sys_blocked_io,"Sys_blocked_io");
    caml_register_global(8,Stack_overflow,"Stack_overflow");
    caml_register_global(7,Match_failure,"Match_failure");
    caml_register_global(6,Not_found,"Not_found");
    caml_register_global(5,Division_by_zero,"Division_by_zero");
    caml_register_global(4,End_of_file,"End_of_file");
    caml_register_global(3,Invalid_argument,"Invalid_argument");
    caml_register_global(2,Failure,"Failure");
    caml_register_global(1,Sys_error,"Sys_error");
    caml_register_global(0,Out_of_memory,"Out_of_memory");
    var
     _g_=caml_new_string("%,"),
     _e_=caml_new_string("%.12g"),
     _d_=caml_new_string("."),
     _b_=caml_new_string("true"),
     _c_=caml_new_string("false"),
     _h_=[0,caml_new_string("list.ml"),262,11],
     _i_=caml_new_string("\\\\"),
     _j_=caml_new_string("\\'"),
     _k_=caml_new_string("\\b"),
     _l_=caml_new_string("\\t"),
     _m_=caml_new_string("\\n"),
     _n_=caml_new_string("\\r"),
     _q_=caml_new_string("String.blit / Bytes.blit_string"),
     _p_=caml_new_string("Bytes.blit"),
     _o_=caml_new_string("String.sub / Bytes.sub"),
     _r_=caml_new_string("String.contains_from / Bytes.contains_from"),
     _w_=caml_new_string("Set.remove_min_elt"),
     _x_=[0,0,0,0],
     _y_=[0,0,0],
     _z_=[0,caml_new_string("set.ml"),510,18],
     _s_=caml_new_string("Set.bal"),
     _t_=caml_new_string("Set.bal"),
     _u_=caml_new_string("Set.bal"),
     _v_=caml_new_string("Set.bal"),
     _F_=caml_new_string("Map.remove_min_elt"),
     _G_=[0,0,0,0],
     _H_=[0,caml_new_string("map.ml"),393,10],
     _I_=[0,0,0],
     _B_=caml_new_string("Map.bal"),
     _C_=caml_new_string("Map.bal"),
     _D_=caml_new_string("Map.bal"),
     _E_=caml_new_string("Map.bal"),
     _K_=caml_new_string("Queue.Empty"),
     _L_=caml_new_string("CamlinternalLazy.Undefined"),
     _U_=caml_new_string("%c"),
     _V_=caml_new_string("%s"),
     _W_=caml_new_string("%i"),
     _X_=caml_new_string("%li"),
     _Y_=caml_new_string("%ni"),
     _Z_=caml_new_string("%Li"),
     ___=caml_new_string("%f"),
     _$_=caml_new_string("%B"),
     _aa_=caml_new_string("%{"),
     _ab_=caml_new_string("%}"),
     _ac_=caml_new_string("%("),
     _ad_=caml_new_string("%)"),
     _ae_=caml_new_string("%a"),
     _af_=caml_new_string("%t"),
     _ag_=caml_new_string("%?"),
     _ah_=caml_new_string("%r"),
     _ai_=caml_new_string("%_r"),
     _aj_=[0,caml_new_string("camlinternalFormat.ml"),846,23],
     _au_=[0,caml_new_string("camlinternalFormat.ml"),810,21],
     _am_=[0,caml_new_string("camlinternalFormat.ml"),811,21],
     _av_=[0,caml_new_string("camlinternalFormat.ml"),814,21],
     _an_=[0,caml_new_string("camlinternalFormat.ml"),815,21],
     _aw_=[0,caml_new_string("camlinternalFormat.ml"),818,19],
     _ao_=[0,caml_new_string("camlinternalFormat.ml"),819,19],
     _ax_=[0,caml_new_string("camlinternalFormat.ml"),822,22],
     _ap_=[0,caml_new_string("camlinternalFormat.ml"),823,22],
     _ay_=[0,caml_new_string("camlinternalFormat.ml"),827,30],
     _aq_=[0,caml_new_string("camlinternalFormat.ml"),828,30],
     _as_=[0,caml_new_string("camlinternalFormat.ml"),832,26],
     _ak_=[0,caml_new_string("camlinternalFormat.ml"),833,26],
     _at_=[0,caml_new_string("camlinternalFormat.ml"),842,28],
     _al_=[0,caml_new_string("camlinternalFormat.ml"),843,28],
     _ar_=[0,caml_new_string("camlinternalFormat.ml"),847,23],
     _bv_=caml_new_string("%u"),
     _bt_=[0,caml_new_string("camlinternalFormat.ml"),1525,4],
     _bu_=caml_new_string("Printf: bad conversion %["),
     _bw_=[0,caml_new_string("camlinternalFormat.ml"),1593,39],
     _bx_=[0,caml_new_string("camlinternalFormat.ml"),1616,31],
     _by_=[0,caml_new_string("camlinternalFormat.ml"),1617,31],
     _bz_=caml_new_string("Printf: bad conversion %_"),
     _bA_=[0,caml_new_string("camlinternalFormat.ml"),1797,8],
     _bB_=caml_new_string("@{"),
     _bC_=caml_new_string("@["),
     _bD_=caml_new_string("@{"),
     _bE_=caml_new_string("@["),
     _br_=caml_new_string("nan"),
     _bs_=caml_new_string("."),
     _bp_=caml_new_string("neg_infinity"),
     _bq_=caml_new_string("infinity"),
     _bo_=caml_new_string("%.12g"),
     _bb_=caml_new_string("%nd"),
     _bc_=caml_new_string("%+nd"),
     _bd_=caml_new_string("% nd"),
     _be_=caml_new_string("%ni"),
     _bf_=caml_new_string("%+ni"),
     _bg_=caml_new_string("% ni"),
     _bh_=caml_new_string("%nx"),
     _bi_=caml_new_string("%#nx"),
     _bj_=caml_new_string("%nX"),
     _bk_=caml_new_string("%#nX"),
     _bl_=caml_new_string("%no"),
     _bm_=caml_new_string("%#no"),
     _bn_=caml_new_string("%nu"),
     _a0_=caml_new_string("%ld"),
     _a1_=caml_new_string("%+ld"),
     _a2_=caml_new_string("% ld"),
     _a3_=caml_new_string("%li"),
     _a4_=caml_new_string("%+li"),
     _a5_=caml_new_string("% li"),
     _a6_=caml_new_string("%lx"),
     _a7_=caml_new_string("%#lx"),
     _a8_=caml_new_string("%lX"),
     _a9_=caml_new_string("%#lX"),
     _a__=caml_new_string("%lo"),
     _a$_=caml_new_string("%#lo"),
     _ba_=caml_new_string("%lu"),
     _aN_=caml_new_string("%Ld"),
     _aO_=caml_new_string("%+Ld"),
     _aP_=caml_new_string("% Ld"),
     _aQ_=caml_new_string("%Li"),
     _aR_=caml_new_string("%+Li"),
     _aS_=caml_new_string("% Li"),
     _aT_=caml_new_string("%Lx"),
     _aU_=caml_new_string("%#Lx"),
     _aV_=caml_new_string("%LX"),
     _aW_=caml_new_string("%#LX"),
     _aX_=caml_new_string("%Lo"),
     _aY_=caml_new_string("%#Lo"),
     _aZ_=caml_new_string("%Lu"),
     _aA_=caml_new_string("%d"),
     _aB_=caml_new_string("%+d"),
     _aC_=caml_new_string("% d"),
     _aD_=caml_new_string("%i"),
     _aE_=caml_new_string("%+i"),
     _aF_=caml_new_string("% i"),
     _aG_=caml_new_string("%x"),
     _aH_=caml_new_string("%#x"),
     _aI_=caml_new_string("%X"),
     _aJ_=caml_new_string("%#X"),
     _aK_=caml_new_string("%o"),
     _aL_=caml_new_string("%#o"),
     _aM_=caml_new_string("%u"),
     _M_=caml_new_string("@]"),
     _N_=caml_new_string("@}"),
     _O_=caml_new_string("@?"),
     _P_=caml_new_string("@\n"),
     _Q_=caml_new_string("@."),
     _R_=caml_new_string("@@"),
     _S_=caml_new_string("@%"),
     _T_=caml_new_string("@"),
     _az_=caml_new_string("CamlinternalFormat.Type_mismatch"),
     _bI_=caml_new_string(""),
     _bJ_=
      [0,[11,caml_new_string(", "),[2,0,[2,0,0]]],caml_new_string(", %s%s")],
     _b1_=[0,[2,0,[12,10,0]],caml_new_string("%s\n")],
     _b2_=
      [0,
       [11,
        caml_new_string
         ("(Program not linked with -g, cannot print stack backtrace)\n"),
        0],
       caml_new_string
        ("(Program not linked with -g, cannot print stack backtrace)\n")],
     _bT_=caml_new_string("Raised at"),
     _bU_=caml_new_string("Re-raised at"),
     _bV_=caml_new_string("Raised by primitive operation at"),
     _bW_=caml_new_string("Called from"),
     _bX_=caml_new_string(" (inlined)"),
     _bZ_=caml_new_string(""),
     _bY_=
      [0,
       [2,
        0,
        [11,
         caml_new_string(' file "'),
         [2,
          0,
          [12,
           34,
           [2,
            0,
            [11,
             caml_new_string(", line "),
             [4,
              0,
              0,
              0,
              [11,caml_new_string(", characters "),[4,0,0,0,[12,45,partial]]]]]]]]]],
       caml_new_string('%s file "%s"%s, line %d, characters %d-%d')],
     _b0_=
      [0,
       [2,0,[11,caml_new_string(" unknown location"),0]],
       caml_new_string("%s unknown location")],
     _bO_=caml_new_string("Out of memory"),
     _bP_=caml_new_string("Stack overflow"),
     _bQ_=caml_new_string("Pattern matching failed"),
     _bR_=caml_new_string("Assertion failed"),
     _bS_=caml_new_string("Undefined recursive module"),
     _bK_=[0,[12,40,[2,0,[2,0,[12,41,0]]]],caml_new_string("(%s%s)")],
     _bL_=caml_new_string(""),
     _bM_=caml_new_string(""),
     _bN_=[0,[12,40,[2,0,[12,41,0]]],caml_new_string("(%s)")],
     _bH_=[0,[4,0,0,0,0],caml_new_string("%d")],
     _bF_=[0,[3,0,0],caml_new_string("%S")],
     _bG_=caml_new_string("_"),
     _b4_=caml_new_string("Random.int"),
     _b3_=caml_new_string("x"),
     _b5_=
      [0,
       987910699,
       495797812,
       364182224,
       414272206,
       318284740,
       990407751,
       383018966,
       270373319,
       840823159,
       24560019,
       536292337,
       512266505,
       189156120,
       730249596,
       143776328,
       51606627,
       140166561,
       366354223,
       1003410265,
       700563762,
       981890670,
       913149062,
       526082594,
       1021425055,
       784300257,
       667753350,
       630144451,
       949649812,
       48546892,
       415514493,
       258888527,
       511570777,
       89983870,
       283659902,
       308386020,
       242688715,
       482270760,
       865188196,
       1027664170,
       207196989,
       193777847,
       619708188,
       671350186,
       149669678,
       257044018,
       87658204,
       558145612,
       183450813,
       28133145,
       901332182,
       710253903,
       510646120,
       652377910,
       409934019,
       801085050],
     _eM_=caml_new_string("OCAMLRUNPARAM"),
     _eK_=caml_new_string("CAMLRUNPARAM"),
     _b6_=caml_new_string(""),
     _eJ_=caml_new_string("TMPDIR"),
     _eI_=caml_new_string("TEMP"),
     _b8_=caml_new_string("Cygwin"),
     _b9_=caml_new_string("Win32"),
     _cw_=[0,caml_new_string("src/core/lwt.ml"),2615,6],
     _cx_=[0,0],
     _cu_=[0,0],
     _cv_=[0,1],
     _cs_=[0,1],
     _ct_=[0,1],
     _cq_=[0,0],
     _cr_=[0,1],
     _co_=[0,0],
     _cp_=[0,1],
     _cm_=[0,0],
     _cn_=[0,1],
     _ck_=[0,0],
     _cl_=[0,0],
     _cj_=caml_new_string("wakeup_later_exn"),
     _ci_=caml_new_string("wakeup_later"),
     _cf_=[0,[11,caml_new_string("Lwt."),[2,0,0]],caml_new_string("Lwt.%s")],
     _cg_=[0,[11,caml_new_string("Lwt."),[2,0,0]],caml_new_string("Lwt.%s")],
     _ch_=[0,1],
     _cc_=[0,[11,caml_new_string("Lwt."),[2,0,0]],caml_new_string("Lwt.%s")],
     _cd_=[0,[11,caml_new_string("Lwt."),[2,0,0]],caml_new_string("Lwt.%s")],
     _ce_=[0,0],
     _ca_=caml_new_string("Fatal error: exception "),
     _b__=[0,caml_new_string("src/core/lwt.ml"),1014,23],
     _b$_=[0,caml_new_string("src/core/lwt.ml"),1015,22],
     _cb_=caml_new_string("Lwt.Resolution_loop.Canceled"),
     _cz_=caml_new_string("Js.Error"),
     _cA_=caml_new_string("jsError"),
     _cB_=caml_new_string("Exception during Lwt.async: "),
     _cC_=caml_new_string("Omq_types.OMQ_Exception"),
     _cE_=caml_new_string(""),
     _cD_=caml_new_string("|| reason: "),
     _cH_=caml_new_string("fail: cannot send msg to "),
     _cG_=caml_new_string("fail: cannot bind "),
     _cF_=caml_new_string("fail: start_comm_layer with server_url="),
     _cZ_=caml_new_string("ERROR: OMQ socket already closed!"),
     _cY_=[0,0],
     _cW_=caml_new_string("Called send before any recv on a REP socket"),
     _cX_=caml_new_string("Called send twice in a row on a REP socket"),
     _cV_=caml_new_string("Called send twice in a row on a REQ socket"),
     _cU_=caml_new_string("No connected services to send msg to!!"),
     _cS_=
      [0,
       [11,
        caml_new_string("ERROR: Already listening on local "),
        [2,0,[12,10,0]]],
       caml_new_string("ERROR: Already listening on local %s\n")],
     _cT_=
      [0,
       [11,
        caml_new_string("INFO: "),
        [2,
         0,
         [11,
          caml_new_string(" local was bound to socket with id "),
          [2,0,[12,10,0]]]]],
       caml_new_string("INFO: %s local was bound to socket with id %s\n")],
     _cQ_=
      [0,
       [11,
        caml_new_string("INFO: New remote ("),
        [2,0,[11,caml_new_string(") connected to sckt\n"),0]]],
       caml_new_string("INFO: New remote (%s) connected to sckt\n")],
     _cR_=
      caml_new_string
       ("WARN: The local address is not yet acknowledged by the OMQSocket"),
     _cO_=caml_new_string("WARN: Remote disconnected from sckt\n"),
     _cP_=
      caml_new_string
       ("WARN: The remote that disconnected is not known by the OMQSocket!"),
     _cM_=
      caml_new_string
       ("WARN: omq_socket.ml; got message on socket not listening on just yet!\n"),
     _cN_=
      caml_new_string
       ("WARN: Messaged dropped, reached recv high water mark!!\n"),
     _cL_=caml_new_string("TIMEOUT DURING: "),
     _cK_=caml_new_string("ERROR: Operation on closed socket"),
     _cI_=caml_new_string("ERROR: Omq socket is blocked in a SEND operation"),
     _cJ_=caml_new_string("ERROR: Omq socket is blocked in a RECV operation"),
     _c3_=caml_new_string("INFO: Context is terminating correctly!\n"),
     _c2_=
      caml_new_string
       ("ERROR: Context still has open sockets!! losing them!\n"),
     _c1_=[0,[2,0,[12,10,0]],caml_new_string("%s\n")],
     _c0_=caml_new_string("ERROR: Operation on closed context"),
     _c8_=caml_new_string("E2BIG"),
     _c__=caml_new_string("EACCES"),
     _c$_=caml_new_string("EAGAIN"),
     _da_=caml_new_string("EBADF"),
     _db_=caml_new_string("EBUSY"),
     _dc_=caml_new_string("ECHILD"),
     _dd_=caml_new_string("EDEADLK"),
     _de_=caml_new_string("EDOM"),
     _df_=caml_new_string("EEXIST"),
     _dg_=caml_new_string("EFAULT"),
     _dh_=caml_new_string("EFBIG"),
     _di_=caml_new_string("EINTR"),
     _dj_=caml_new_string("EINVAL"),
     _dk_=caml_new_string("EIO"),
     _dl_=caml_new_string("EISDIR"),
     _dm_=caml_new_string("EMFILE"),
     _dn_=caml_new_string("EMLINK"),
     _do_=caml_new_string("ENAMETOOLONG"),
     _dp_=caml_new_string("ENFILE"),
     _dq_=caml_new_string("ENODEV"),
     _dr_=caml_new_string("ENOENT"),
     _ds_=caml_new_string("ENOEXEC"),
     _dt_=caml_new_string("ENOLCK"),
     _du_=caml_new_string("ENOMEM"),
     _dv_=caml_new_string("ENOSPC"),
     _dw_=caml_new_string("ENOSYS"),
     _dx_=caml_new_string("ENOTDIR"),
     _dy_=caml_new_string("ENOTEMPTY"),
     _dz_=caml_new_string("ENOTTY"),
     _dA_=caml_new_string("ENXIO"),
     _dB_=caml_new_string("EPERM"),
     _dC_=caml_new_string("EPIPE"),
     _dD_=caml_new_string("ERANGE"),
     _dE_=caml_new_string("EROFS"),
     _dF_=caml_new_string("ESPIPE"),
     _dG_=caml_new_string("ESRCH"),
     _dH_=caml_new_string("EXDEV"),
     _dI_=caml_new_string("EWOULDBLOCK"),
     _dJ_=caml_new_string("EINPROGRESS"),
     _dK_=caml_new_string("EALREADY"),
     _dL_=caml_new_string("ENOTSOCK"),
     _dM_=caml_new_string("EDESTADDRREQ"),
     _dN_=caml_new_string("EMSGSIZE"),
     _dO_=caml_new_string("EPROTOTYPE"),
     _dP_=caml_new_string("ENOPROTOOPT"),
     _dQ_=caml_new_string("EPROTONOSUPPORT"),
     _dR_=caml_new_string("ESOCKTNOSUPPORT"),
     _dS_=caml_new_string("EOPNOTSUPP"),
     _dT_=caml_new_string("EPFNOSUPPORT"),
     _dU_=caml_new_string("EAFNOSUPPORT"),
     _dV_=caml_new_string("EADDRINUSE"),
     _dW_=caml_new_string("EADDRNOTAVAIL"),
     _dX_=caml_new_string("ENETDOWN"),
     _dY_=caml_new_string("ENETUNREACH"),
     _dZ_=caml_new_string("ENETRESET"),
     _d0_=caml_new_string("ECONNABORTED"),
     _d1_=caml_new_string("ECONNRESET"),
     _d2_=caml_new_string("ENOBUFS"),
     _d3_=caml_new_string("EISCONN"),
     _d4_=caml_new_string("ENOTCONN"),
     _d5_=caml_new_string("ESHUTDOWN"),
     _d6_=caml_new_string("ETOOMANYREFS"),
     _d7_=caml_new_string("ETIMEDOUT"),
     _d8_=caml_new_string("ECONNREFUSED"),
     _d9_=caml_new_string("EHOSTDOWN"),
     _d__=caml_new_string("EHOSTUNREACH"),
     _d$_=caml_new_string("ELOOP"),
     _ea_=caml_new_string("EOVERFLOW"),
     _eb_=
      [0,
       [11,caml_new_string("EUNKNOWNERR "),[4,0,0,0,0]],
       caml_new_string("EUNKNOWNERR %d")],
     _c9_=
      [0,
       [11,
        caml_new_string("Unix.Unix_error(Unix."),
        [2,
         0,
         [11,
          caml_new_string(", "),
          [3,0,[11,caml_new_string(", "),[3,0,[12,41,0]]]]]]],
       caml_new_string("Unix.Unix_error(Unix.%s, %S, %S)")],
     _c4_=caml_new_string("Unix.Unix_error"),
     _c5_=caml_new_string(""),
     _c6_=caml_new_string(""),
     _c7_=caml_new_string("Unix.Unix_error"),
     _ec_=caml_new_string("0.0.0.0"),
     _ed_=caml_new_string("127.0.0.1"),
     _eH_=caml_new_string("::"),
     _eG_=caml_new_string("::1"),
     _er_=[0,[12,10,[10,0]],caml_new_string("\n%!")],
     _es_=[0,[2,0,0],caml_new_string("%s")],
     _eq_=
      [0,
       [4,
        0,
        [0,2,4],
        0,
        [12,
         45,
         [4,
          0,
          [0,2,2],
          0,
          [12,
           45,
           [4,
            0,
            [0,2,2],
            0,
            [12,32,[4,0,[0,2,2],0,[12,58,[4,0,[0,2,2],0,[12,58,partial$0]]]]]]]]]],
       caml_new_string("%04d-%02d-%02d %02d:%02d:%02d.%03d %s : ")],
     _el_=caml_new_string("DEBUG"),
     _em_=caml_new_string("INFO"),
     _en_=caml_new_string("WARN"),
     _eo_=caml_new_string("ERROR"),
     _ep_=caml_new_string("FATAL"),
     _ek_=caml_new_string("\x1b[0m"),
     _ee_=caml_new_string("\x1b[31m"),
     _ef_=caml_new_string("\x1b[32m"),
     _eg_=caml_new_string("\x1b[33m"),
     _eh_=caml_new_string("\x1b[34m"),
     _ei_=caml_new_string("\x1b[35m"),
     _ej_=caml_new_string("\x1b[36m"),
     _et_=
      [0,
       [11,caml_new_string("logging set at debug lvl"),0],
       caml_new_string("logging set at debug lvl")],
     _eu_=
      [0,
       [11,
        caml_new_string("fail to send bar:"),
        [4,3,0,0,[11,caml_new_string(" hwm:"),[4,3,0,0,[12,10,0]]]]],
       caml_new_string("fail to send bar:%i hwm:%i\n")],
     _ev_=[0,caml_new_string("pure/actor_pure_service.ml"),37,2],
     _eE_=
      [0,
       [11,
        caml_new_string
         ("ACTOR MANAGER: connected to signalling_server_addr, got unique id ("),
        [2,0,[12,41,0]]],
       caml_new_string
        ("ACTOR MANAGER: connected to signalling_server_addr, got unique id (%s)")],
     _eF_=
      [0,
       [11,
        caml_new_string("ACTOR MANAGER: About to bind addr ("),
        [2,0,[12,41,0]]],
       caml_new_string("ACTOR MANAGER: About to bind addr (%s)")],
     _eD_=
      [0,
       [11,
        caml_new_string
         ("Started Actor MANAGER, trying to connect to signalling server ("),
        [2,0,[12,41,0]]],
       caml_new_string
        ("Started Actor MANAGER, trying to connect to signalling server (%s)")],
     _ez_=caml_new_string("heartbeat @ "),
     _eA_=[0,[2,0,[12,10,0]],caml_new_string("%s\n")],
     _eB_=caml_new_string(" @ "),
     _eC_=[0,[2,0,[12,10,0]],caml_new_string("%s\n")],
     _ew_=
      [0,
       [11,
        caml_new_string("p2p "),
        [17,
         [0,caml_new_string("@ "),1,0],
         [2,0,[11,caml_new_string(" job:"),[2,0,[12,10,0]]]]]],
       caml_new_string("p2p @ %s job:%s\n")],
     _ex_=caml_new_string(""),
     _ey_=
      [0,
       [11,caml_new_string("unknown message type\n"),0],
       caml_new_string("unknown message type\n")];
    function erase_rel(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,erase_rel(rest)];
         case 1:var rest$0=param[1];return [1,erase_rel(rest$0)];
         case 2:var rest$1=param[1];return [2,erase_rel(rest$1)];
         case 3:var rest$2=param[1];return [3,erase_rel(rest$2)];
         case 4:var rest$3=param[1];return [4,erase_rel(rest$3)];
         case 5:var rest$4=param[1];return [5,erase_rel(rest$4)];
         case 6:var rest$5=param[1];return [6,erase_rel(rest$5)];
         case 7:var rest$6=param[1];return [7,erase_rel(rest$6)];
         case 8:
          var rest$7=param[2],ty=param[1];return [8,ty,erase_rel(rest$7)];
         case 9:
          var rest$8=param[3],ty1=param[1];
          return [9,ty1,ty1,erase_rel(rest$8)];
         case 10:var rest$9=param[1];return [10,erase_rel(rest$9)];
         case 11:var rest$10=param[1];return [11,erase_rel(rest$10)];
         case 12:var rest$11=param[1];return [12,erase_rel(rest$11)];
         case 13:var rest$12=param[1];return [13,erase_rel(rest$12)];
         default:var rest$13=param[1];return [14,erase_rel(rest$13)]}}
    function concat_fmtty(fmtty1,fmtty2)
     {if(typeof fmtty1 === "number")
       return fmtty2;
      else
       switch(fmtty1[0])
        {case 0:var rest=fmtty1[1];return [0,concat_fmtty(rest,fmtty2)];
         case 1:var rest$0=fmtty1[1];return [1,concat_fmtty(rest$0,fmtty2)];
         case 2:var rest$1=fmtty1[1];return [2,concat_fmtty(rest$1,fmtty2)];
         case 3:var rest$2=fmtty1[1];return [3,concat_fmtty(rest$2,fmtty2)];
         case 4:var rest$3=fmtty1[1];return [4,concat_fmtty(rest$3,fmtty2)];
         case 5:var rest$4=fmtty1[1];return [5,concat_fmtty(rest$4,fmtty2)];
         case 6:var rest$5=fmtty1[1];return [6,concat_fmtty(rest$5,fmtty2)];
         case 7:var rest$6=fmtty1[1];return [7,concat_fmtty(rest$6,fmtty2)];
         case 8:
          var rest$7=fmtty1[2],ty=fmtty1[1];
          return [8,ty,concat_fmtty(rest$7,fmtty2)];
         case 9:
          var rest$8=fmtty1[3],ty2=fmtty1[2],ty1=fmtty1[1];
          return [9,ty1,ty2,concat_fmtty(rest$8,fmtty2)];
         case 10:var rest$9=fmtty1[1];return [10,concat_fmtty(rest$9,fmtty2)];
         case 11:
          var rest$10=fmtty1[1];return [11,concat_fmtty(rest$10,fmtty2)];
         case 12:
          var rest$11=fmtty1[1];return [12,concat_fmtty(rest$11,fmtty2)];
         case 13:
          var rest$12=fmtty1[1];return [13,concat_fmtty(rest$12,fmtty2)];
         default:
          var rest$13=fmtty1[1];return [14,concat_fmtty(rest$13,fmtty2)]}}
    function concat_fmt(fmt1,fmt2)
     {if(typeof fmt1 === "number")
       return fmt2;
      else
       switch(fmt1[0])
        {case 0:var rest=fmt1[1];return [0,concat_fmt(rest,fmt2)];
         case 1:var rest$0=fmt1[1];return [1,concat_fmt(rest$0,fmt2)];
         case 2:
          var rest$1=fmt1[2],pad=fmt1[1];
          return [2,pad,concat_fmt(rest$1,fmt2)];
         case 3:
          var rest$2=fmt1[2],pad$0=fmt1[1];
          return [3,pad$0,concat_fmt(rest$2,fmt2)];
         case 4:
          var rest$3=fmt1[4],prec=fmt1[3],pad$1=fmt1[2],iconv=fmt1[1];
          return [4,iconv,pad$1,prec,concat_fmt(rest$3,fmt2)];
         case 5:
          var rest$4=fmt1[4],prec$0=fmt1[3],pad$2=fmt1[2],iconv$0=fmt1[1];
          return [5,iconv$0,pad$2,prec$0,concat_fmt(rest$4,fmt2)];
         case 6:
          var rest$5=fmt1[4],prec$1=fmt1[3],pad$3=fmt1[2],iconv$1=fmt1[1];
          return [6,iconv$1,pad$3,prec$1,concat_fmt(rest$5,fmt2)];
         case 7:
          var rest$6=fmt1[4],prec$2=fmt1[3],pad$4=fmt1[2],iconv$2=fmt1[1];
          return [7,iconv$2,pad$4,prec$2,concat_fmt(rest$6,fmt2)];
         case 8:
          var rest$7=fmt1[4],prec$3=fmt1[3],pad$5=fmt1[2],fconv=fmt1[1];
          return [8,fconv,pad$5,prec$3,concat_fmt(rest$7,fmt2)];
         case 9:
          var rest$8=fmt1[2],pad$6=fmt1[1];
          return [9,pad$6,concat_fmt(rest$8,fmt2)];
         case 10:var rest$9=fmt1[1];return [10,concat_fmt(rest$9,fmt2)];
         case 11:
          var rest$10=fmt1[2],str=fmt1[1];
          return [11,str,concat_fmt(rest$10,fmt2)];
         case 12:
          var rest$11=fmt1[2],chr=fmt1[1];
          return [12,chr,concat_fmt(rest$11,fmt2)];
         case 13:
          var rest$12=fmt1[3],fmtty=fmt1[2],pad$7=fmt1[1];
          return [13,pad$7,fmtty,concat_fmt(rest$12,fmt2)];
         case 14:
          var rest$13=fmt1[3],fmtty$0=fmt1[2],pad$8=fmt1[1];
          return [14,pad$8,fmtty$0,concat_fmt(rest$13,fmt2)];
         case 15:var rest$14=fmt1[1];return [15,concat_fmt(rest$14,fmt2)];
         case 16:var rest$15=fmt1[1];return [16,concat_fmt(rest$15,fmt2)];
         case 17:
          var rest$16=fmt1[2],fmting_lit=fmt1[1];
          return [17,fmting_lit,concat_fmt(rest$16,fmt2)];
         case 18:
          var rest$17=fmt1[2],fmting_gen=fmt1[1];
          return [18,fmting_gen,concat_fmt(rest$17,fmt2)];
         case 19:var rest$18=fmt1[1];return [19,concat_fmt(rest$18,fmt2)];
         case 20:
          var rest$19=fmt1[3],char_set=fmt1[2],width_opt=fmt1[1];
          return [20,width_opt,char_set,concat_fmt(rest$19,fmt2)];
         case 21:
          var rest$20=fmt1[2],counter=fmt1[1];
          return [21,counter,concat_fmt(rest$20,fmt2)];
         case 22:var rest$21=fmt1[1];return [22,concat_fmt(rest$21,fmt2)];
         case 23:
          var rest$22=fmt1[2],ign=fmt1[1];
          return [23,ign,concat_fmt(rest$22,fmt2)];
         default:
          var rest$23=fmt1[3],f=fmt1[2],arity=fmt1[1];
          return [24,arity,f,concat_fmt(rest$23,fmt2)]}}
    function invalid_arg(s){throw [0,Invalid_argument,s]}
    caml_fresh_oo_id(0);
    function max(x,y){return caml_greaterequal(x,y)?x:y}
    function abs(x){return 0 <= x?x:- x | 0}
    var max_int=2147483647;
    function _a_(s1,s2)
     {var
       l1=caml_ml_string_length(s1),
       l2=caml_ml_string_length(s2),
       s=caml_create_bytes(l1 + l2 | 0);
      caml_blit_string(s1,0,s,0,l1);
      caml_blit_string(s2,0,s,l1,l2);
      return s}
    function string_of_bool(b){return b?_b_:_c_}
    function append(l1,l2)
     {if(l1){var tl=l1[2],hd=l1[1];return [0,hd,append(tl,l2)]}return l2}
    caml_ml_open_descriptor_in(0);
    var
     stdout=caml_ml_open_descriptor_out(1),
     stderr=caml_ml_open_descriptor_out(2);
    function output_string(oc,s)
     {return caml_ml_output(oc,s,0,caml_ml_string_length(s))}
    function print_string(s){return output_string(stdout,s)}
    function prerr_string(s){return output_string(stderr,s)}
    function _f_(param,_lU_)
     {var
       str2=_lU_[2],
       fmt2=_lU_[1],
       str1=param[2],
       fmt1=param[1],
       _lV_=_a_(str1,_a_(_g_,str2));
      return [0,concat_fmt(fmt1,fmt2),_lV_]}
    function do_at_exit(param)
     {function iter(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var l=param$0[2],a=param$0[1];
            try
             {caml_ml_flush(a)}
            catch(_lT_)
             {_lT_ = caml_wrap_exception(_lT_);
              if(_lT_[1] !== Sys_error)throw _lT_}
            var param$0=l;
            continue}
          return 0}}
      return iter(caml_ml_out_channels_list(0))}
    function length(l)
     {var len=0,param=l;
      for(;;)
       {if(param)
         {var param$0=param[2],len$0=len + 1 | 0,len=len$0,param=param$0;
          continue}
        return len}}
    function rev_append(l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {var l1$1=l1$0[2],a=l1$0[1],l2$1=[0,a,l2$0],l1$0=l1$1,l2$0=l2$1;
          continue}
        return l2$0}}
    function iter(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var param$1=param$0[2],a=param$0[1];
          caml_call1(f,a);
          var param$0=param$1;
          continue}
        return 0}}
    function chop(k,l)
     {var k$0=k,l$0=l;
      for(;;)
       {if(0 === k$0)return l$0;
        if(l$0){var l$1=l$0[2],k$1=k$0 - 1 | 0,k$0=k$1,l$0=l$1;continue}
        throw [0,Assert_failure,_h_]}}
    function make(n,c)
     {var s=caml_create_bytes(n);caml_fill_bytes(s,0,n,c);return s}
    function sub_string(b,ofs,len)
     {if(0 <= ofs)
       if(0 <= len)
        if(! ((caml_ml_bytes_length(b) - len | 0) < ofs))
         {var r=caml_create_bytes(len);
          caml_blit_bytes(b,ofs,r,0,len);
          return r}
      return invalid_arg(_o_)}
    function blit(s1,ofs1,s2,ofs2,len)
     {if(0 <= len)
       if(0 <= ofs1)
        if(! ((caml_ml_bytes_length(s1) - len | 0) < ofs1))
         if(0 <= ofs2)
          if(! ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
           return caml_blit_bytes(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_p_)}
    function blit$0(s1,ofs1,s2,ofs2,len)
     {if(0 <= len)
       if(0 <= ofs1)
        if(! ((caml_ml_string_length(s1) - len | 0) < ofs1))
         if(0 <= ofs2)
          if(! ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
           return caml_blit_string(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_q_)}
    function index_rec(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)throw Not_found;
        if(caml_string_unsafe_get(s,i$0) === c)return i$0;
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function contains_from(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i)
       if(! (l < i))
        try
         {index_rec(s,l,i,c);var _lR_=1;return _lR_}
        catch(_lS_)
         {_lS_ = caml_wrap_exception(_lS_);
          if(_lS_ === Not_found)return 0;
          throw _lS_}
      return invalid_arg(_r_)}
    function contains(s,c){return contains_from(s,0,c)}
    var
     compare=caml_string_compare,
     match=caml_sys_get_config(0),
     os_type=match[1],
     max_array_length=caml_sys_const_max_wosize(0),
     max_string_length=(4 * max_array_length | 0) - 1 | 0;
    caml_fresh_oo_id(0);
    function copy(a)
     {var l=a.length - 1;return 0 === l?[0]:caml_array_sub(a,0,l)}
    caml_fresh_oo_id(0);
    function _A_(Ord)
     {function height(param){if(param){var h=param[4];return h}return 0}
      function create(l,v,r)
       {if(l)var h=l[4],hl=h;else var hl=0;
        if(r)var h$0=r[4],hr=h$0;else var hr=0;
        var _lQ_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
        return [0,l,v,r,_lQ_]}
      function bal(l,v,r)
       {if(l)var h=l[4],hl=h;else var hl=0;
        if(r)var h$0=r[4],hr=h$0;else var hr=0;
        if((hr + 2 | 0) < hl)
         {if(l)
           {var lr=l[3],lv=l[2],ll=l[1],_lL_=height(lr);
            if(_lL_ <= height(ll))return create(ll,lv,create(lr,v,r));
            if(lr)
             {var lrr=lr[3],lrv=lr[2],lrl=lr[1],_lM_=create(lrr,v,r);
              return create(create(ll,lv,lrl),lrv,_lM_)}
            return invalid_arg(_s_)}
          return invalid_arg(_t_)}
        if((hl + 2 | 0) < hr)
         {if(r)
           {var rr=r[3],rv=r[2],rl=r[1],_lN_=height(rl);
            if(_lN_ <= height(rr))return create(create(l,v,rl),rv,rr);
            if(rl)
             {var rlr=rl[3],rlv=rl[2],rll=rl[1],_lO_=create(rlr,rv,rr);
              return create(create(l,v,rll),rlv,_lO_)}
            return invalid_arg(_u_)}
          return invalid_arg(_v_)}
        var _lP_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
        return [0,l,v,r,_lP_]}
      function add(x,t)
       {if(t)
         {var r=t[3],v=t[2],l=t[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)return t;
          if(0 <= c){var rr=add(x,r);return r === rr?t:bal(l,v,rr)}
          var ll=add(x,l);
          return l === ll?t:bal(ll,v,r)}
        return [0,0,x,0,1]}
      function singleton(x){return [0,0,x,0,1]}
      function add_min_element(x,param)
       {if(param)
         {var r=param[3],v=param[2],l=param[1];
          return bal(add_min_element(x,l),v,r)}
        return singleton(x)}
      function add_max_element(x,param)
       {if(param)
         {var r=param[3],v=param[2],l=param[1];
          return bal(l,v,add_max_element(x,r))}
        return singleton(x)}
      function join(l,v,r)
       {if(l)
         {if(r)
           {var
             rh=r[4],
             rr=r[3],
             rv=r[2],
             rl=r[1],
             lh=l[4],
             lr=l[3],
             lv=l[2],
             ll=l[1];
            return (rh + 2 | 0) < lh
                    ?bal(ll,lv,join(lr,v,r))
                    :(lh + 2 | 0) < rh?bal(join(l,v,rl),rv,rr):create(l,v,r)}
          return add_max_element(v,l)}
        return add_min_element(v,r)}
      function min_elt(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _lK_=param$0[1];
            if(_lK_){var param$0=_lK_;continue}
            var v=param$0[2];
            return v}
          throw Not_found}}
      function min_elt_opt(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _lJ_=param$0[1];
            if(_lJ_){var param$0=_lJ_;continue}
            var v=param$0[2];
            return [0,v]}
          return 0}}
      function max_elt(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _lH_=param$0[3],_lI_=param$0[2];
            if(_lH_){var param$0=_lH_;continue}
            return _lI_}
          throw Not_found}}
      function max_elt_opt(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _lF_=param$0[3],_lG_=param$0[2];
            if(_lF_){var param$0=_lF_;continue}
            return [0,_lG_]}
          return 0}}
      function remove_min_elt(param)
       {if(param)
         {var _lE_=param[1];
          if(_lE_)
           {var r=param[3],v=param[2];return bal(remove_min_elt(_lE_),v,r)}
          var r$0=param[3];
          return r$0}
        return invalid_arg(_w_)}
      function concat(t,match)
       {if(t)
         {if(match)
           {var _lD_=remove_min_elt(match);return join(t,min_elt(match),_lD_)}
          return t}
        return match}
      function split(x,param)
       {if(param)
         {var r=param[3],v=param[2],l=param[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)return [0,l,1,r];
          if(0 <= c)
           {var match=split(x,r),rr=match[3],pres=match[2],lr=match[1];
            return [0,join(l,v,lr),pres,rr]}
          var
           match$0=split(x,l),
           rl=match$0[3],
           pres$0=match$0[2],
           ll=match$0[1];
          return [0,ll,pres$0,join(rl,v,r)]}
        return _x_}
      var empty=0;
      function is_empty(param){return param?0:1}
      function mem(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[3],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v),
             _lC_=0 === c?1:0;
            if(_lC_)return _lC_;
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          return 0}}
      function remove(x,t)
       {if(t)
         {var r=t[3],v=t[2],l=t[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)
           {if(l)
             {if(r){var _lB_=remove_min_elt(r);return bal(l,min_elt(r),_lB_)}
              return l}
            return r}
          if(0 <= c){var rr=remove(x,r);return r === rr?t:bal(l,v,rr)}
          var ll=remove(x,l);
          return l === ll?t:bal(ll,v,r)}
        return 0}
      function union(t1,match)
       {if(t1)
         {if(match)
           {var
             h2=match[4],
             r2=match[3],
             v2=match[2],
             l2=match[1],
             h1=t1[4],
             r1=t1[3],
             v1=t1[2],
             l1=t1[1];
            if(h2 <= h1)
             {if(1 === h2)return add(v2,t1);
              var
               match$0=split(v1,match),
               r2$0=match$0[3],
               l2$0=match$0[1],
               _lz_=union(r1,r2$0);
              return join(union(l1,l2$0),v1,_lz_)}
            if(1 === h1)return add(v1,match);
            var
             match$1=split(v2,t1),
             r1$0=match$1[3],
             l1$0=match$1[1],
             _lA_=union(r1$0,r2);
            return join(union(l1$0,l2),v2,_lA_)}
          return t1}
        return match}
      function inter(s1,match)
       {if(s1)
         {if(match)
           {var r1=s1[3],v1=s1[2],l1=s1[1],_lv_=split(v1,match),_lw_=_lv_[1];
            if(0 === _lv_[2])
             {var r2=_lv_[3],_lx_=inter(r1,r2);
              return concat(inter(l1,_lw_),_lx_)}
            var r2$0=_lv_[3],_ly_=inter(r1,r2$0);
            return join(inter(l1,_lw_),v1,_ly_)}
          return 0}
        return 0}
      function diff(t1,match)
       {if(t1)
         {if(match)
           {var r1=t1[3],v1=t1[2],l1=t1[1],_lr_=split(v1,match),_ls_=_lr_[1];
            if(0 === _lr_[2])
             {var r2=_lr_[3],_lt_=diff(r1,r2);
              return join(diff(l1,_ls_),v1,_lt_)}
            var r2$0=_lr_[3],_lu_=diff(r1,r2$0);
            return concat(diff(l1,_ls_),_lu_)}
          return t1}
        return 0}
      function cons_enum(s,e)
       {var s$0=s,e$0=e;
        for(;;)
         {if(s$0)
           {var r=s$0[3],v=s$0[2],s$1=s$0[1],e$1=[0,v,r,e$0],s$0=s$1,e$0=e$1;
            continue}
          return e$0}}
      function compare(s1,s2)
       {var e2$2=cons_enum(s2,0),e1$2=cons_enum(s1,0),e1=e1$2,e2=e2$2;
        for(;;)
         {if(e1)
           {if(e2)
             {var
               e2$0=e2[3],
               r2=e2[2],
               v2=e2[1],
               e1$0=e1[3],
               r1=e1[2],
               v1=e1[1],
               c=caml_call2(Ord[1],v1,v2);
              if(0 === c)
               {var
                 e2$1=cons_enum(r2,e2$0),
                 e1$1=cons_enum(r1,e1$0),
                 e1=e1$1,
                 e2=e2$1;
                continue}
              return c}
            return 1}
          return e2?-1:0}}
      function equal(s1,s2){return 0 === compare(s1,s2)?1:0}
      function subset(s1,s2)
       {var s1$0=s1,s2$0=s2;
        for(;;)
         {if(s1$0)
           {if(s2$0)
             {var
               r2=s2$0[3],
               v2=s2$0[2],
               l2=s2$0[1],
               r1=s1$0[3],
               v1=s1$0[2],
               l1=s1$0[1],
               c=caml_call2(Ord[1],v1,v2);
              if(0 === c)
               {var _lo_=subset(l1,l2);
                if(_lo_){var s1$0=r1,s2$0=r2;continue}
                return _lo_}
              if(0 <= c)
               {var _lp_=subset([0,0,v1,r1,0],r2);
                if(_lp_){var s1$0=l1;continue}
                return _lp_}
              var _lq_=subset([0,l1,v1,0,0],l2);
              if(_lq_){var s1$0=r1;continue}
              return _lq_}
            return 0}
          return 1}}
      function iter(f,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var param$1=param$0[3],v=param$0[2],l=param$0[1];
            iter(f,l);
            caml_call1(f,v);
            var param$0=param$1;
            continue}
          return 0}}
      function fold(f,s,accu)
       {var s$0=s,accu$0=accu;
        for(;;)
         {if(s$0)
           {var
             s$1=s$0[3],
             v=s$0[2],
             l=s$0[1],
             accu$1=caml_call2(f,v,fold(f,l,accu$0)),
             s$0=s$1,
             accu$0=accu$1;
            continue}
          return accu$0}}
      function for_all(p,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var r=param$0[3],v=param$0[2],l=param$0[1],_ll_=caml_call1(p,v);
            if(_ll_)
             {var _lm_=for_all(p,l);
              if(_lm_){var param$0=r;continue}
              var _ln_=_lm_}
            else
             var _ln_=_ll_;
            return _ln_}
          return 1}}
      function exists(p,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var r=param$0[3],v=param$0[2],l=param$0[1],_li_=caml_call1(p,v);
            if(_li_)
             var _lj_=_li_;
            else
             {var _lk_=exists(p,l);
              if(! _lk_){var param$0=r;continue}
              var _lj_=_lk_}
            return _lj_}
          return 0}}
      function filter(p,t)
       {if(t)
         {var
           r=t[3],
           v=t[2],
           l=t[1],
           l$0=filter(p,l),
           pv=caml_call1(p,v),
           r$0=filter(p,r);
          if(pv){if(l === l$0)if(r === r$0)return t;return join(l$0,v,r$0)}
          return concat(l$0,r$0)}
        return 0}
      function partition(p,param)
       {if(param)
         {var
           r=param[3],
           v=param[2],
           l=param[1],
           match=partition(p,l),
           lf=match[2],
           lt=match[1],
           pv=caml_call1(p,v),
           match$0=partition(p,r),
           rf=match$0[2],
           rt=match$0[1];
          if(pv){var _lg_=concat(lf,rf);return [0,join(lt,v,rt),_lg_]}
          var _lh_=join(lf,v,rf);
          return [0,concat(lt,rt),_lh_]}
        return _y_}
      function cardinal(param)
       {if(param)
         {var r=param[3],l=param[1],_lf_=cardinal(r);
          return (cardinal(l) + 1 | 0) + _lf_ | 0}
        return 0}
      function elements_aux(accu,param)
       {var accu$0=accu,param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[3],
             v=param$0[2],
             param$1=param$0[1],
             accu$1=[0,v,elements_aux(accu$0,r)],
             accu$0=accu$1,
             param$0=param$1;
            continue}
          return accu$0}}
      function elements(s){return elements_aux(0,s)}
      function find(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[3],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v);
            if(0 === c)return v;
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          throw Not_found}}
      function find_first(f,param$0)
       {var param$1=param$0;
        for(;;)
         {if(param$1)
           {var r$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
            if(caml_call1(f,v$0))
             {var v0=v$0,param=l$0;
              for(;;)
               {if(param)
                 {var r=param[3],v=param[2],l=param[1];
                  if(caml_call1(f,v)){var v0=v,param=l;continue}
                  var param=r;
                  continue}
                return v0}}
            var param$1=r$0;
            continue}
          throw Not_found}}
      function find_first_opt(f,param$0)
       {var param$1=param$0;
        for(;;)
         {if(param$1)
           {var r$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
            if(caml_call1(f,v$0))
             {var v0=v$0,param=l$0;
              for(;;)
               {if(param)
                 {var r=param[3],v=param[2],l=param[1];
                  if(caml_call1(f,v)){var v0=v,param=l;continue}
                  var param=r;
                  continue}
                return [0,v0]}}
            var param$1=r$0;
            continue}
          return 0}}
      function find_last(f,param$0)
       {var param$1=param$0;
        for(;;)
         {if(param$1)
           {var r$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
            if(caml_call1(f,v$0))
             {var v0=v$0,param=r$0;
              for(;;)
               {if(param)
                 {var r=param[3],v=param[2],l=param[1];
                  if(caml_call1(f,v)){var v0=v,param=r;continue}
                  var param=l;
                  continue}
                return v0}}
            var param$1=l$0;
            continue}
          throw Not_found}}
      function find_last_opt(f,param$0)
       {var param$1=param$0;
        for(;;)
         {if(param$1)
           {var r$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
            if(caml_call1(f,v$0))
             {var v0=v$0,param=r$0;
              for(;;)
               {if(param)
                 {var r=param[3],v=param[2],l=param[1];
                  if(caml_call1(f,v)){var v0=v,param=r;continue}
                  var param=l;
                  continue}
                return [0,v0]}}
            var param$1=l$0;
            continue}
          return 0}}
      function find_opt(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[3],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v);
            if(0 === c)return [0,v];
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          return 0}}
      function map(f,t)
       {if(t)
         {var
           r=t[3],
           v=t[2],
           l=t[1],
           l$0=map(f,l),
           v$0=caml_call1(f,v),
           r$0=map(f,r);
          if(l === l$0)if(v === v$0)if(r === r$0)return t;
          if(0 === l$0)
           var switch$0=0;
          else
           var
            _le_=max_elt(l$0),
            switch$0=0 <= caml_call2(Ord[1],_le_,v$0)?1:0;
          if(! switch$0)
           {if(0 === r$0)
             var switch$1=0;
            else
             var
              _ld_=min_elt(r$0),
              switch$1=0 <= caml_call2(Ord[1],v$0,_ld_)?1:0;
            if(! switch$1)return join(l$0,v$0,r$0)}
          return union(l$0,add(v$0,r$0))}
        return 0}
      function of_list(l)
       {if(l)
         {var _kW_=l[2],_kX_=l[1];
          if(_kW_)
           {var _kY_=_kW_[2],_kZ_=_kW_[1];
            if(_kY_)
             {var _k0_=_kY_[2],_k1_=_kY_[1];
              if(_k0_)
               {var _k2_=_k0_[2],_k3_=_k0_[1];
                if(_k2_)
                 {if(_k2_[2])
                   {var
                     _k4_=Ord[1],
                     sort=
                      function(n,l)
                       {if(2 === n)
                         {if(l)
                           {var _la_=l[2];
                            if(_la_)
                             {var x2=_la_[1],x1=l[1],c$0=caml_call2(_k4_,x1,x2);
                              return 0 === c$0
                                      ?[0,x1,0]
                                      :0 <= c$0?[0,x2,[0,x1,0]]:[0,x1,[0,x2,0]]}}}
                        else
                         if(3 === n)
                          if(l)
                           {var _lb_=l[2];
                            if(_lb_)
                             {var _lc_=_lb_[2];
                              if(_lc_)
                               {var
                                 x3=_lc_[1],
                                 x2$0=_lb_[1],
                                 x1$0=l[1],
                                 c$1=caml_call2(_k4_,x1$0,x2$0);
                                if(0 === c$1)
                                 {var c$2=caml_call2(_k4_,x2$0,x3);
                                  return 0 === c$2
                                          ?[0,x2$0,0]
                                          :0 <= c$2?[0,x3,[0,x2$0,0]]:[0,x2$0,[0,x3,0]]}
                                if(0 <= c$1)
                                 {var c$3=caml_call2(_k4_,x1$0,x3);
                                  if(0 === c$3)return [0,x2$0,[0,x1$0,0]];
                                  if(0 <= c$3)
                                   {var c$4=caml_call2(_k4_,x2$0,x3);
                                    return 0 === c$4
                                            ?[0,x2$0,[0,x1$0,0]]
                                            :0 <= c$4
                                              ?[0,x3,[0,x2$0,[0,x1$0,0]]]
                                              :[0,x2$0,[0,x3,[0,x1$0,0]]]}
                                  return [0,x2$0,[0,x1$0,[0,x3,0]]]}
                                var c$5=caml_call2(_k4_,x2$0,x3);
                                if(0 === c$5)return [0,x1$0,[0,x2$0,0]];
                                if(0 <= c$5)
                                 {var c$6=caml_call2(_k4_,x1$0,x3);
                                  return 0 === c$6
                                          ?[0,x1$0,[0,x2$0,0]]
                                          :0 <= c$6
                                            ?[0,x3,[0,x1$0,[0,x2$0,0]]]
                                            :[0,x1$0,[0,x3,[0,x2$0,0]]]}
                                return [0,x1$0,[0,x2$0,[0,x3,0]]]}}}
                        var
                         n1=n >> 1,
                         n2=n - n1 | 0,
                         l2$0=chop(n1,l),
                         l1$0=rev_sort(n1,l),
                         l2$1=rev_sort(n2,l2$0),
                         l1=l1$0,
                         l2=l2$1,
                         accu=0;
                        for(;;)
                         {if(l1)
                           {if(l2)
                             {var
                               t2=l2[2],
                               h2=l2[1],
                               t1=l1[2],
                               h1=l1[1],
                               c=caml_call2(_k4_,h1,h2);
                              if(0 === c)
                               {var accu$0=[0,h1,accu],l1=t1,l2=t2,accu=accu$0;continue}
                              if(0 < c){var accu$1=[0,h1,accu],l1=t1,accu=accu$1;continue}
                              var accu$2=[0,h2,accu],l2=t2,accu=accu$2;
                              continue}
                            return rev_append(l1,accu)}
                          return rev_append(l2,accu)}},
                     rev_sort=
                      function(n,l)
                       {if(2 === n)
                         {if(l)
                           {var _k9_=l[2];
                            if(_k9_)
                             {var x2=_k9_[1],x1=l[1],c$0=caml_call2(_k4_,x1,x2);
                              return 0 === c$0
                                      ?[0,x1,0]
                                      :0 < c$0?[0,x1,[0,x2,0]]:[0,x2,[0,x1,0]]}}}
                        else
                         if(3 === n)
                          if(l)
                           {var _k__=l[2];
                            if(_k__)
                             {var _k$_=_k__[2];
                              if(_k$_)
                               {var
                                 x3=_k$_[1],
                                 x2$0=_k__[1],
                                 x1$0=l[1],
                                 c$1=caml_call2(_k4_,x1$0,x2$0);
                                if(0 === c$1)
                                 {var c$2=caml_call2(_k4_,x2$0,x3);
                                  return 0 === c$2
                                          ?[0,x2$0,0]
                                          :0 < c$2?[0,x2$0,[0,x3,0]]:[0,x3,[0,x2$0,0]]}
                                if(0 < c$1)
                                 {var c$3=caml_call2(_k4_,x2$0,x3);
                                  if(0 === c$3)return [0,x1$0,[0,x2$0,0]];
                                  if(0 < c$3)return [0,x1$0,[0,x2$0,[0,x3,0]]];
                                  var c$4=caml_call2(_k4_,x1$0,x3);
                                  return 0 === c$4
                                          ?[0,x1$0,[0,x2$0,0]]
                                          :0 < c$4
                                            ?[0,x1$0,[0,x3,[0,x2$0,0]]]
                                            :[0,x3,[0,x1$0,[0,x2$0,0]]]}
                                var c$5=caml_call2(_k4_,x1$0,x3);
                                if(0 === c$5)return [0,x2$0,[0,x1$0,0]];
                                if(0 < c$5)return [0,x2$0,[0,x1$0,[0,x3,0]]];
                                var c$6=caml_call2(_k4_,x2$0,x3);
                                return 0 === c$6
                                        ?[0,x2$0,[0,x1$0,0]]
                                        :0 < c$6
                                          ?[0,x2$0,[0,x3,[0,x1$0,0]]]
                                          :[0,x3,[0,x2$0,[0,x1$0,0]]]}}}
                        var
                         n1=n >> 1,
                         n2=n - n1 | 0,
                         l2$0=chop(n1,l),
                         l1$0=sort(n1,l),
                         l2$1=sort(n2,l2$0),
                         l1=l1$0,
                         l2=l2$1,
                         accu=0;
                        for(;;)
                         {if(l1)
                           {if(l2)
                             {var
                               t2=l2[2],
                               h2=l2[1],
                               t1=l1[2],
                               h1=l1[1],
                               c=caml_call2(_k4_,h1,h2);
                              if(0 === c)
                               {var accu$0=[0,h1,accu],l1=t1,l2=t2,accu=accu$0;continue}
                              if(0 <= c)
                               {var accu$1=[0,h2,accu],l2=t2,accu=accu$1;continue}
                              var accu$2=[0,h1,accu],l1=t1,accu=accu$2;
                              continue}
                            return rev_append(l1,accu)}
                          return rev_append(l2,accu)}},
                     len=length(l),
                     _k5_=2 <= len?sort(len,l):l,
                     sub=
                      function(n,l)
                       {if(! (3 < n >>> 0))
                         switch(n)
                          {case 0:return [0,0,l];
                           case 1:
                            if(l){var l$3=l[2],x0=l[1];return [0,[0,0,x0,0,1],l$3]}
                            break;
                           case 2:
                            if(l)
                             {var _k6_=l[2];
                              if(_k6_)
                               {var l$4=_k6_[2],x1=_k6_[1],x0$0=l[1];
                                return [0,[0,[0,0,x0$0,0,1],x1,0,2],l$4]}}
                            break;
                           default:
                            if(l)
                             {var _k7_=l[2];
                              if(_k7_)
                               {var _k8_=_k7_[2];
                                if(_k8_)
                                 {var l$5=_k8_[2],x2=_k8_[1],x1$0=_k7_[1],x0$1=l[1];
                                  return [0,[0,[0,0,x0$1,0,1],x1$0,[0,0,x2,0,1],2],l$5]}}}}
                        var nl=n / 2 | 0,match=sub(nl,l),l$0=match[2],left=match[1];
                        if(l$0)
                         {var
                           l$1=l$0[2],
                           mid=l$0[1],
                           match$0=sub((n - nl | 0) - 1 | 0,l$1),
                           l$2=match$0[2],
                           right=match$0[1];
                          return [0,create(left,mid,right),l$2]}
                        throw [0,Assert_failure,_z_]};
                    return sub(length(_k5_),_k5_)[1]}
                  var x4=_k2_[1];
                  return add(x4,add(_k3_,add(_k1_,add(_kZ_,singleton(_kX_)))))}
                return add(_k3_,add(_k1_,add(_kZ_,singleton(_kX_))))}
              return add(_k1_,add(_kZ_,singleton(_kX_)))}
            return add(_kZ_,singleton(_kX_))}
          return singleton(_kX_)}
        return empty}
      return [0,
              empty,
              is_empty,
              mem,
              add,
              singleton,
              remove,
              union,
              inter,
              diff,
              compare,
              equal,
              subset,
              iter,
              map,
              fold,
              for_all,
              exists,
              filter,
              partition,
              cardinal,
              elements,
              min_elt,
              min_elt_opt,
              max_elt,
              max_elt_opt,
              min_elt,
              min_elt_opt,
              split,
              find,
              find_opt,
              find_first,
              find_first_opt,
              find_last,
              find_last_opt,
              of_list]}
    function _J_(Ord)
     {function height(param){if(param){var h=param[5];return h}return 0}
      function create(l,x,d,r)
       {var hl=height(l),hr=height(r),_kV_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
        return [0,l,x,d,r,_kV_]}
      function singleton(x,d){return [0,0,x,d,0,1]}
      function bal(l,x,d,r)
       {if(l)var h=l[5],hl=h;else var hl=0;
        if(r)var h$0=r[5],hr=h$0;else var hr=0;
        if((hr + 2 | 0) < hl)
         {if(l)
           {var lr=l[4],ld=l[3],lv=l[2],ll=l[1],_kQ_=height(lr);
            if(_kQ_ <= height(ll))return create(ll,lv,ld,create(lr,x,d,r));
            if(lr)
             {var
               lrr=lr[4],
               lrd=lr[3],
               lrv=lr[2],
               lrl=lr[1],
               _kR_=create(lrr,x,d,r);
              return create(create(ll,lv,ld,lrl),lrv,lrd,_kR_)}
            return invalid_arg(_B_)}
          return invalid_arg(_C_)}
        if((hl + 2 | 0) < hr)
         {if(r)
           {var rr=r[4],rd=r[3],rv=r[2],rl=r[1],_kS_=height(rl);
            if(_kS_ <= height(rr))return create(create(l,x,d,rl),rv,rd,rr);
            if(rl)
             {var
               rlr=rl[4],
               rld=rl[3],
               rlv=rl[2],
               rll=rl[1],
               _kT_=create(rlr,rv,rd,rr);
              return create(create(l,x,d,rll),rlv,rld,_kT_)}
            return invalid_arg(_D_)}
          return invalid_arg(_E_)}
        var _kU_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
        return [0,l,x,d,r,_kU_]}
      var empty=0;
      function is_empty(param){return param?0:1}
      function add(x,data,m)
       {if(m)
         {var h=m[5],r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)return d === data?m:[0,l,x,data,r,h];
          if(0 <= c){var rr=add(x,data,r);return r === rr?m:bal(l,v,d,rr)}
          var ll=add(x,data,l);
          return l === ll?m:bal(ll,v,d,r)}
        return [0,0,x,data,0,1]}
      function find(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v);
            if(0 === c)return d;
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          throw Not_found}}
      function find_first(f,param$0)
       {var param$1=param$0;
        for(;;)
         {if(param$1)
           {var r$0=param$1[4],d$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
            if(caml_call1(f,v$0))
             {var v0=v$0,d0=d$0,param=l$0;
              for(;;)
               {if(param)
                 {var r=param[4],d=param[3],v=param[2],l=param[1];
                  if(caml_call1(f,v)){var v0=v,d0=d,param=l;continue}
                  var param=r;
                  continue}
                return [0,v0,d0]}}
            var param$1=r$0;
            continue}
          throw Not_found}}
      function find_first_opt(f,param$0)
       {var param$1=param$0;
        for(;;)
         {if(param$1)
           {var r$0=param$1[4],d$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
            if(caml_call1(f,v$0))
             {var v0=v$0,d0=d$0,param=l$0;
              for(;;)
               {if(param)
                 {var r=param[4],d=param[3],v=param[2],l=param[1];
                  if(caml_call1(f,v)){var v0=v,d0=d,param=l;continue}
                  var param=r;
                  continue}
                return [0,[0,v0,d0]]}}
            var param$1=r$0;
            continue}
          return 0}}
      function find_last(f,param$0)
       {var param$1=param$0;
        for(;;)
         {if(param$1)
           {var r$0=param$1[4],d$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
            if(caml_call1(f,v$0))
             {var v0=v$0,d0=d$0,param=r$0;
              for(;;)
               {if(param)
                 {var r=param[4],d=param[3],v=param[2],l=param[1];
                  if(caml_call1(f,v)){var v0=v,d0=d,param=r;continue}
                  var param=l;
                  continue}
                return [0,v0,d0]}}
            var param$1=l$0;
            continue}
          throw Not_found}}
      function find_last_opt(f,param$0)
       {var param$1=param$0;
        for(;;)
         {if(param$1)
           {var r$0=param$1[4],d$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
            if(caml_call1(f,v$0))
             {var v0=v$0,d0=d$0,param=r$0;
              for(;;)
               {if(param)
                 {var r=param[4],d=param[3],v=param[2],l=param[1];
                  if(caml_call1(f,v)){var v0=v,d0=d,param=r;continue}
                  var param=l;
                  continue}
                return [0,[0,v0,d0]]}}
            var param$1=l$0;
            continue}
          return 0}}
      function find_opt(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v);
            if(0 === c)return [0,d];
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          return 0}}
      function mem(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v),
             _kP_=0 === c?1:0;
            if(_kP_)return _kP_;
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          return 0}}
      function min_binding(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _kO_=param$0[1];
            if(_kO_){var param$0=_kO_;continue}
            var d=param$0[3],v=param$0[2];
            return [0,v,d]}
          throw Not_found}}
      function min_binding_opt(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _kN_=param$0[1];
            if(_kN_){var param$0=_kN_;continue}
            var d=param$0[3],v=param$0[2];
            return [0,[0,v,d]]}
          return 0}}
      function max_binding(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _kK_=param$0[4],_kL_=param$0[3],_kM_=param$0[2];
            if(_kK_){var param$0=_kK_;continue}
            return [0,_kM_,_kL_]}
          throw Not_found}}
      function max_binding_opt(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _kH_=param$0[4],_kI_=param$0[3],_kJ_=param$0[2];
            if(_kH_){var param$0=_kH_;continue}
            return [0,[0,_kJ_,_kI_]]}
          return 0}}
      function remove_min_binding(param)
       {if(param)
         {var _kG_=param[1];
          if(_kG_)
           {var r=param[4],d=param[3],v=param[2];
            return bal(remove_min_binding(_kG_),v,d,r)}
          var r$0=param[4];
          return r$0}
        return invalid_arg(_F_)}
      function _kp_(t,match)
       {if(t)
         {if(match)
           {var match$0=min_binding(match),d=match$0[2],x=match$0[1];
            return bal(t,x,d,remove_min_binding(match))}
          return t}
        return match}
      function remove(x,m)
       {if(m)
         {var r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)return _kp_(l,r);
          if(0 <= c){var rr=remove(x,r);return r === rr?m:bal(l,v,d,rr)}
          var ll=remove(x,l);
          return l === ll?m:bal(ll,v,d,r)}
        return 0}
      function update(x,f,m)
       {if(m)
         {var h=m[5],r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)
           {var match=caml_call1(f,[0,d]);
            if(match){var data=match[1];return d === data?m:[0,l,x,data,r,h]}
            return _kp_(l,r)}
          if(0 <= c){var rr=update(x,f,r);return r === rr?m:bal(l,v,d,rr)}
          var ll=update(x,f,l);
          return l === ll?m:bal(ll,v,d,r)}
        var match$0=caml_call1(f,0);
        if(match$0){var data$0=match$0[1];return [0,0,x,data$0,0,1]}
        return 0}
      function iter(f,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var param$1=param$0[4],d=param$0[3],v=param$0[2],l=param$0[1];
            iter(f,l);
            caml_call2(f,v,d);
            var param$0=param$1;
            continue}
          return 0}}
      function map(f,param)
       {if(param)
         {var
           h=param[5],
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           l$0=map(f,l),
           d$0=caml_call1(f,d),
           r$0=map(f,r);
          return [0,l$0,v,d$0,r$0,h]}
        return 0}
      function mapi(f,param)
       {if(param)
         {var
           h=param[5],
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           l$0=mapi(f,l),
           d$0=caml_call2(f,v,d),
           r$0=mapi(f,r);
          return [0,l$0,v,d$0,r$0,h]}
        return 0}
      function fold(f,m,accu)
       {var m$0=m,accu$0=accu;
        for(;;)
         {if(m$0)
           {var
             m$1=m$0[4],
             d=m$0[3],
             v=m$0[2],
             l=m$0[1],
             accu$1=caml_call3(f,v,d,fold(f,l,accu$0)),
             m$0=m$1,
             accu$0=accu$1;
            continue}
          return accu$0}}
      function for_all(p,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             _kD_=caml_call2(p,v,d);
            if(_kD_)
             {var _kE_=for_all(p,l);
              if(_kE_){var param$0=r;continue}
              var _kF_=_kE_}
            else
             var _kF_=_kD_;
            return _kF_}
          return 1}}
      function exists(p,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             _kA_=caml_call2(p,v,d);
            if(_kA_)
             var _kB_=_kA_;
            else
             {var _kC_=exists(p,l);
              if(! _kC_){var param$0=r;continue}
              var _kB_=_kC_}
            return _kB_}
          return 0}}
      function add_min_binding(k,x,param)
       {if(param)
         {var r=param[4],d=param[3],v=param[2],l=param[1];
          return bal(add_min_binding(k,x,l),v,d,r)}
        return singleton(k,x)}
      function add_max_binding(k,x,param)
       {if(param)
         {var r=param[4],d=param[3],v=param[2],l=param[1];
          return bal(l,v,d,add_max_binding(k,x,r))}
        return singleton(k,x)}
      function join(l,v,d,r)
       {if(l)
         {if(r)
           {var
             rh=r[5],
             rr=r[4],
             rd=r[3],
             rv=r[2],
             rl=r[1],
             lh=l[5],
             lr=l[4],
             ld=l[3],
             lv=l[2],
             ll=l[1];
            return (rh + 2 | 0) < lh
                    ?bal(ll,lv,ld,join(lr,v,d,r))
                    :(lh + 2 | 0) < rh
                      ?bal(join(l,v,d,rl),rv,rd,rr)
                      :create(l,v,d,r)}
          return add_max_binding(v,d,l)}
        return add_min_binding(v,d,r)}
      function concat(t,match)
       {if(t)
         {if(match)
           {var match$0=min_binding(match),d=match$0[2],x=match$0[1];
            return join(t,x,d,remove_min_binding(match))}
          return t}
        return match}
      function concat_or_join(t1,v,d,t2)
       {if(d){var d$0=d[1];return join(t1,v,d$0,t2)}return concat(t1,t2)}
      function split(x,param)
       {if(param)
         {var
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           c=caml_call2(Ord[1],x,v);
          if(0 === c)return [0,l,[0,d],r];
          if(0 <= c)
           {var match=split(x,r),rr=match[3],pres=match[2],lr=match[1];
            return [0,join(l,v,d,lr),pres,rr]}
          var
           match$0=split(x,l),
           rl=match$0[3],
           pres$0=match$0[2],
           ll=match$0[1];
          return [0,ll,pres$0,join(rl,v,d,r)]}
        return _G_}
      function merge(f,s1,s2)
       {if(s1)
         {var h1=s1[5],r1=s1[4],d1=s1[3],v1=s1[2],l1=s1[1];
          if(height(s2) <= h1)
           {var
             match=split(v1,s2),
             r2=match[3],
             d2=match[2],
             l2=match[1],
             _kw_=merge(f,r1,r2),
             _kx_=caml_call3(f,v1,[0,d1],d2);
            return concat_or_join(merge(f,l1,l2),v1,_kx_,_kw_)}}
        else
         if(! s2)return 0;
        if(s2)
         {var
           r2$0=s2[4],
           d2$0=s2[3],
           v2=s2[2],
           l2$0=s2[1],
           match$0=split(v2,s1),
           r1$0=match$0[3],
           d1$0=match$0[2],
           l1$0=match$0[1],
           _ky_=merge(f,r1$0,r2$0),
           _kz_=caml_call3(f,v2,d1$0,[0,d2$0]);
          return concat_or_join(merge(f,l1$0,l2$0),v2,_kz_,_ky_)}
        throw [0,Assert_failure,_H_]}
      function union(f,s1,s2)
       {if(s1)
         {if(s2)
           {var
             h2=s2[5],
             r2=s2[4],
             d2=s2[3],
             v2=s2[2],
             l2=s2[1],
             h1=s1[5],
             r1=s1[4],
             d1=s1[3],
             v1=s1[2],
             l1=s1[1];
            if(h2 <= h1)
             {var
               match=split(v1,s2),
               r2$0=match[3],
               d2$0=match[2],
               l2$0=match[1],
               l=union(f,l1,l2$0),
               r=union(f,r1,r2$0);
              if(d2$0)
               {var d2$1=d2$0[1];
                return concat_or_join(l,v1,caml_call3(f,v1,d1,d2$1),r)}
              return join(l,v1,d1,r)}
            var
             match$0=split(v2,s1),
             r1$0=match$0[3],
             d1$0=match$0[2],
             l1$0=match$0[1],
             l$0=union(f,l1$0,l2),
             r$0=union(f,r1$0,r2);
            if(d1$0)
             {var d1$1=d1$0[1];
              return concat_or_join(l$0,v2,caml_call3(f,v2,d1$1,d2),r$0)}
            return join(l$0,v2,d2,r$0)}
          var s=s1}
        else
         var s=s2;
        return s}
      function filter(p,m)
       {if(m)
         {var
           r=m[4],
           d=m[3],
           v=m[2],
           l=m[1],
           l$0=filter(p,l),
           pvd=caml_call2(p,v,d),
           r$0=filter(p,r);
          if(pvd){if(l === l$0)if(r === r$0)return m;return join(l$0,v,d,r$0)}
          return concat(l$0,r$0)}
        return 0}
      function partition(p,param)
       {if(param)
         {var
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           match=partition(p,l),
           lf=match[2],
           lt=match[1],
           pvd=caml_call2(p,v,d),
           match$0=partition(p,r),
           rf=match$0[2],
           rt=match$0[1];
          if(pvd){var _ku_=concat(lf,rf);return [0,join(lt,v,d,rt),_ku_]}
          var _kv_=join(lf,v,d,rf);
          return [0,concat(lt,rt),_kv_]}
        return _I_}
      function cons_enum(m,e)
       {var m$0=m,e$0=e;
        for(;;)
         {if(m$0)
           {var
             r=m$0[4],
             d=m$0[3],
             v=m$0[2],
             m$1=m$0[1],
             e$1=[0,v,d,r,e$0],
             m$0=m$1,
             e$0=e$1;
            continue}
          return e$0}}
      function compare(cmp,m1,m2)
       {var e2$2=cons_enum(m2,0),e1$2=cons_enum(m1,0),e1=e1$2,e2=e2$2;
        for(;;)
         {if(e1)
           {if(e2)
             {var
               e2$0=e2[4],
               r2=e2[3],
               d2=e2[2],
               v2=e2[1],
               e1$0=e1[4],
               r1=e1[3],
               d1=e1[2],
               v1=e1[1],
               c=caml_call2(Ord[1],v1,v2);
              if(0 === c)
               {var c$0=caml_call2(cmp,d1,d2);
                if(0 === c$0)
                 {var
                   e2$1=cons_enum(r2,e2$0),
                   e1$1=cons_enum(r1,e1$0),
                   e1=e1$1,
                   e2=e2$1;
                  continue}
                return c$0}
              return c}
            return 1}
          return e2?-1:0}}
      function equal(cmp,m1,m2)
       {var e2$2=cons_enum(m2,0),e1$2=cons_enum(m1,0),e1=e1$2,e2=e2$2;
        for(;;)
         {if(e1)
           {if(e2)
             {var
               e2$0=e2[4],
               r2=e2[3],
               d2=e2[2],
               v2=e2[1],
               e1$0=e1[4],
               r1=e1[3],
               d1=e1[2],
               v1=e1[1],
               _kr_=0 === caml_call2(Ord[1],v1,v2)?1:0;
              if(_kr_)
               {var _ks_=caml_call2(cmp,d1,d2);
                if(_ks_)
                 {var
                   e2$1=cons_enum(r2,e2$0),
                   e1$1=cons_enum(r1,e1$0),
                   e1=e1$1,
                   e2=e2$1;
                  continue}
                var _kt_=_ks_}
              else
               var _kt_=_kr_;
              return _kt_}
            return 0}
          return e2?0:1}}
      function cardinal(param)
       {if(param)
         {var r=param[4],l=param[1],_kq_=cardinal(r);
          return (cardinal(l) + 1 | 0) + _kq_ | 0}
        return 0}
      function bindings_aux(accu,param)
       {var accu$0=accu,param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             param$1=param$0[1],
             accu$1=[0,[0,v,d],bindings_aux(accu$0,r)],
             accu$0=accu$1,
             param$0=param$1;
            continue}
          return accu$0}}
      function bindings(s){return bindings_aux(0,s)}
      return [0,
              empty,
              is_empty,
              mem,
              add,
              update,
              singleton,
              remove,
              merge,
              union,
              compare,
              equal,
              iter,
              fold,
              for_all,
              exists,
              filter,
              partition,
              cardinal,
              bindings,
              min_binding,
              min_binding_opt,
              max_binding,
              max_binding_opt,
              min_binding,
              min_binding_opt,
              split,
              find,
              find_opt,
              find_first,
              find_first_opt,
              find_last,
              find_last_opt,
              map,
              mapi]}
    var Empty=[248,_K_,caml_fresh_oo_id(0)];
    function create(param){return [0,0,0,0]}
    function add(x,q)
     {var cell=[0,x,0],_ko_=q[3];
      return _ko_
              ?(q[1] = q[1] + 1 | 0,_ko_[2] = cell,q[3] = cell,0)
              :(q[1] = 1,q[2] = cell,q[3] = cell,0)}
    function take(q)
     {var _kl_=q[2];
      if(_kl_)
       {var _km_=_kl_[1],_kn_=_kl_[2];
        return _kn_
                ?(q[1] = q[1] - 1 | 0,q[2] = _kn_,_km_)
                :(q[1] = 0,q[2] = 0,q[3] = 0,_km_)}
      throw Empty}
    function is_empty(q){return 0 === q[1]?1:0}
    var Undefined=[248,_L_,caml_fresh_oo_id(0)];
    function raise_undefined(param){throw Undefined}
    function force_lazy_block(blk)
     {var closure=blk[1];
      blk[1] = raise_undefined;
      try
       {var result=caml_call1(closure,0);
        blk[1] = result;
        caml_obj_set_tag(blk,250);
        return result}
      catch(e)
       {e = caml_wrap_exception(e);blk[1] = function(param){throw e};throw e}}
    function resize(b,more)
     {var len=b[3],new_len=[0,len];
      for(;;)
       {if(new_len[1] < (b[2] + more | 0))
         {new_len[1] = 2 * new_len[1] | 0;continue}
        if(max_string_length < new_len[1])
         {if(! ((b[2] + more | 0) <= max_string_length))throw [0,Failure,s];
          new_len[1] = max_string_length}
        var new_buffer=caml_create_bytes(new_len[1]);
        blit(b[1],0,new_buffer,0,b[2]);
        b[1] = new_buffer;
        b[3] = new_len[1];
        return 0}}
    function add_string(b,s)
     {var len=caml_ml_string_length(s),new_position=b[2] + len | 0;
      if(b[3] < new_position)resize(b,len);
      blit$0(s,0,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    var default_float_precision=-6;
    function buffer_create(init_size)
     {return [0,0,caml_create_bytes(init_size)]}
    function buffer_check_size(buf,overhead)
     {var
       len=caml_ml_bytes_length(buf[2]),
       min_len=buf[1] + overhead | 0,
       _kj_=len < min_len?1:0;
      if(_kj_)
       {var
         new_len=max(len * 2 | 0,min_len),
         new_str=caml_create_bytes(new_len);
        blit(buf[2],0,new_str,0,len);
        buf[2] = new_str;
        var _kk_=0}
      else
       var _kk_=_kj_;
      return _kk_}
    function buffer_add_char(buf,c)
     {buffer_check_size(buf,1);
      caml_bytes_set(buf[2],buf[1],c);
      buf[1] = buf[1] + 1 | 0;
      return 0}
    function buffer_add_string(buf,s)
     {var str_len=caml_ml_string_length(s);
      buffer_check_size(buf,str_len);
      blit$0(s,0,buf[2],buf[1],str_len);
      buf[1] = buf[1] + str_len | 0;
      return 0}
    function buffer_contents(buf){return sub_string(buf[2],0,buf[1])}
    function string_of_formatting_lit(formatting_lit)
     {if(typeof formatting_lit === "number")
       switch(formatting_lit)
        {case 0:return _M_;
         case 1:return _N_;
         case 2:return _O_;
         case 3:return _P_;
         case 4:return _Q_;
         case 5:return _R_;
         default:return _S_}
      else
       switch(formatting_lit[0])
        {case 0:var str=formatting_lit[1];return str;
         case 1:var str$0=formatting_lit[1];return str$0;
         default:var c=formatting_lit[1];return _a_(_T_,make(1,c))}}
    function bprint_fmtty(buf,fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:
           var fmtty$1=fmtty$0[1];
           buffer_add_string(buf,_U_);
           var fmtty$0=fmtty$1;
           continue;
          case 1:
           var fmtty$2=fmtty$0[1];
           buffer_add_string(buf,_V_);
           var fmtty$0=fmtty$2;
           continue;
          case 2:
           var fmtty$3=fmtty$0[1];
           buffer_add_string(buf,_W_);
           var fmtty$0=fmtty$3;
           continue;
          case 3:
           var fmtty$4=fmtty$0[1];
           buffer_add_string(buf,_X_);
           var fmtty$0=fmtty$4;
           continue;
          case 4:
           var fmtty$5=fmtty$0[1];
           buffer_add_string(buf,_Y_);
           var fmtty$0=fmtty$5;
           continue;
          case 5:
           var fmtty$6=fmtty$0[1];
           buffer_add_string(buf,_Z_);
           var fmtty$0=fmtty$6;
           continue;
          case 6:
           var fmtty$7=fmtty$0[1];
           buffer_add_string(buf,___);
           var fmtty$0=fmtty$7;
           continue;
          case 7:
           var fmtty$8=fmtty$0[1];
           buffer_add_string(buf,_$_);
           var fmtty$0=fmtty$8;
           continue;
          case 8:
           var fmtty$9=fmtty$0[2],sub_fmtty=fmtty$0[1];
           buffer_add_string(buf,_aa_);
           bprint_fmtty(buf,sub_fmtty);
           buffer_add_string(buf,_ab_);
           var fmtty$0=fmtty$9;
           continue;
          case 9:
           var fmtty$10=fmtty$0[3],sub_fmtty$0=fmtty$0[1];
           buffer_add_string(buf,_ac_);
           bprint_fmtty(buf,sub_fmtty$0);
           buffer_add_string(buf,_ad_);
           var fmtty$0=fmtty$10;
           continue;
          case 10:
           var fmtty$11=fmtty$0[1];
           buffer_add_string(buf,_ae_);
           var fmtty$0=fmtty$11;
           continue;
          case 11:
           var fmtty$12=fmtty$0[1];
           buffer_add_string(buf,_af_);
           var fmtty$0=fmtty$12;
           continue;
          case 12:
           var fmtty$13=fmtty$0[1];
           buffer_add_string(buf,_ag_);
           var fmtty$0=fmtty$13;
           continue;
          case 13:
           var fmtty$14=fmtty$0[1];
           buffer_add_string(buf,_ah_);
           var fmtty$0=fmtty$14;
           continue;
          default:
           var fmtty$15=fmtty$0[1];
           buffer_add_string(buf,_ai_);
           var fmtty$0=fmtty$15;
           continue}}
    function symm(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,symm(rest)];
         case 1:var rest$0=param[1];return [1,symm(rest$0)];
         case 2:var rest$1=param[1];return [2,symm(rest$1)];
         case 3:var rest$2=param[1];return [3,symm(rest$2)];
         case 4:var rest$3=param[1];return [4,symm(rest$3)];
         case 5:var rest$4=param[1];return [5,symm(rest$4)];
         case 6:var rest$5=param[1];return [6,symm(rest$5)];
         case 7:var rest$6=param[1];return [7,symm(rest$6)];
         case 8:var rest$7=param[2],ty=param[1];return [8,ty,symm(rest$7)];
         case 9:
          var rest$8=param[3],ty2=param[2],ty1=param[1];
          return [9,ty2,ty1,symm(rest$8)];
         case 10:var rest$9=param[1];return [10,symm(rest$9)];
         case 11:var rest$10=param[1];return [11,symm(rest$10)];
         case 12:var rest$11=param[1];return [12,symm(rest$11)];
         case 13:var rest$12=param[1];return [13,symm(rest$12)];
         default:var rest$13=param[1];return [14,symm(rest$13)]}}
    function fmtty_rel_det(param)
     {if(typeof param === "number")
       {var
         _jX_=function(param){return 0},
         _jY_=function(param){return 0},
         _jZ_=function(param){return 0};
        return [0,function(param){return 0},_jZ_,_jY_,_jX_]}
      else
       switch(param[0])
        {case 0:
          var
           rest=param[1],
           match=fmtty_rel_det(rest),
           de=match[4],
           ed=match[3],
           af=match[2],
           fa=match[1],
           _j0_=function(param){caml_call1(af,0);return 0};
          return [0,function(param){caml_call1(fa,0);return 0},_j0_,ed,de];
         case 1:
          var
           rest$0=param[1],
           match$0=fmtty_rel_det(rest$0),
           de$0=match$0[4],
           ed$0=match$0[3],
           af$0=match$0[2],
           fa$0=match$0[1],
           _j1_=function(param){caml_call1(af$0,0);return 0};
          return [0,
                  function(param){caml_call1(fa$0,0);return 0},
                  _j1_,
                  ed$0,
                  de$0];
         case 2:
          var
           rest$1=param[1],
           match$1=fmtty_rel_det(rest$1),
           de$1=match$1[4],
           ed$1=match$1[3],
           af$1=match$1[2],
           fa$1=match$1[1],
           _j2_=function(param){caml_call1(af$1,0);return 0};
          return [0,
                  function(param){caml_call1(fa$1,0);return 0},
                  _j2_,
                  ed$1,
                  de$1];
         case 3:
          var
           rest$2=param[1],
           match$2=fmtty_rel_det(rest$2),
           de$2=match$2[4],
           ed$2=match$2[3],
           af$2=match$2[2],
           fa$2=match$2[1],
           _j3_=function(param){caml_call1(af$2,0);return 0};
          return [0,
                  function(param){caml_call1(fa$2,0);return 0},
                  _j3_,
                  ed$2,
                  de$2];
         case 4:
          var
           rest$3=param[1],
           match$3=fmtty_rel_det(rest$3),
           de$3=match$3[4],
           ed$3=match$3[3],
           af$3=match$3[2],
           fa$3=match$3[1],
           _j4_=function(param){caml_call1(af$3,0);return 0};
          return [0,
                  function(param){caml_call1(fa$3,0);return 0},
                  _j4_,
                  ed$3,
                  de$3];
         case 5:
          var
           rest$4=param[1],
           match$4=fmtty_rel_det(rest$4),
           de$4=match$4[4],
           ed$4=match$4[3],
           af$4=match$4[2],
           fa$4=match$4[1],
           _j5_=function(param){caml_call1(af$4,0);return 0};
          return [0,
                  function(param){caml_call1(fa$4,0);return 0},
                  _j5_,
                  ed$4,
                  de$4];
         case 6:
          var
           rest$5=param[1],
           match$5=fmtty_rel_det(rest$5),
           de$5=match$5[4],
           ed$5=match$5[3],
           af$5=match$5[2],
           fa$5=match$5[1],
           _j6_=function(param){caml_call1(af$5,0);return 0};
          return [0,
                  function(param){caml_call1(fa$5,0);return 0},
                  _j6_,
                  ed$5,
                  de$5];
         case 7:
          var
           rest$6=param[1],
           match$6=fmtty_rel_det(rest$6),
           de$6=match$6[4],
           ed$6=match$6[3],
           af$6=match$6[2],
           fa$6=match$6[1],
           _j7_=function(param){caml_call1(af$6,0);return 0};
          return [0,
                  function(param){caml_call1(fa$6,0);return 0},
                  _j7_,
                  ed$6,
                  de$6];
         case 8:
          var
           rest$7=param[2],
           match$7=fmtty_rel_det(rest$7),
           de$7=match$7[4],
           ed$7=match$7[3],
           af$7=match$7[2],
           fa$7=match$7[1],
           _j8_=function(param){caml_call1(af$7,0);return 0};
          return [0,
                  function(param){caml_call1(fa$7,0);return 0},
                  _j8_,
                  ed$7,
                  de$7];
         case 9:
          var
           rest$8=param[3],
           ty2=param[2],
           ty1=param[1],
           match$8=fmtty_rel_det(rest$8),
           de$8=match$8[4],
           ed$8=match$8[3],
           af$8=match$8[2],
           fa$8=match$8[1],
           ty=trans(symm(ty1),ty2),
           match$9=fmtty_rel_det(ty),
           jd=match$9[4],
           dj=match$9[3],
           ga=match$9[2],
           ag=match$9[1],
           _j9_=function(param){caml_call1(jd,0);caml_call1(de$8,0);return 0},
           _j__=function(param){caml_call1(ed$8,0);caml_call1(dj,0);return 0},
           _j$_=function(param){caml_call1(ga,0);caml_call1(af$8,0);return 0};
          return [0,
                  function(param)
                   {caml_call1(fa$8,0);caml_call1(ag,0);return 0},
                  _j$_,
                  _j__,
                  _j9_];
         case 10:
          var
           rest$9=param[1],
           match$10=fmtty_rel_det(rest$9),
           de$9=match$10[4],
           ed$9=match$10[3],
           af$9=match$10[2],
           fa$9=match$10[1],
           _ka_=function(param){caml_call1(af$9,0);return 0};
          return [0,
                  function(param){caml_call1(fa$9,0);return 0},
                  _ka_,
                  ed$9,
                  de$9];
         case 11:
          var
           rest$10=param[1],
           match$11=fmtty_rel_det(rest$10),
           de$10=match$11[4],
           ed$10=match$11[3],
           af$10=match$11[2],
           fa$10=match$11[1],
           _kb_=function(param){caml_call1(af$10,0);return 0};
          return [0,
                  function(param){caml_call1(fa$10,0);return 0},
                  _kb_,
                  ed$10,
                  de$10];
         case 12:
          var
           rest$11=param[1],
           match$12=fmtty_rel_det(rest$11),
           de$11=match$12[4],
           ed$11=match$12[3],
           af$11=match$12[2],
           fa$11=match$12[1],
           _kc_=function(param){caml_call1(af$11,0);return 0};
          return [0,
                  function(param){caml_call1(fa$11,0);return 0},
                  _kc_,
                  ed$11,
                  de$11];
         case 13:
          var
           rest$12=param[1],
           match$13=fmtty_rel_det(rest$12),
           de$12=match$13[4],
           ed$12=match$13[3],
           af$12=match$13[2],
           fa$12=match$13[1],
           _kd_=function(param){caml_call1(de$12,0);return 0},
           _ke_=function(param){caml_call1(ed$12,0);return 0},
           _kf_=function(param){caml_call1(af$12,0);return 0};
          return [0,
                  function(param){caml_call1(fa$12,0);return 0},
                  _kf_,
                  _ke_,
                  _kd_];
         default:
          var
           rest$13=param[1],
           match$14=fmtty_rel_det(rest$13),
           de$13=match$14[4],
           ed$13=match$14[3],
           af$13=match$14[2],
           fa$13=match$14[1],
           _kg_=function(param){caml_call1(de$13,0);return 0},
           _kh_=function(param){caml_call1(ed$13,0);return 0},
           _ki_=function(param){caml_call1(af$13,0);return 0};
          return [0,
                  function(param){caml_call1(fa$13,0);return 0},
                  _ki_,
                  _kh_,
                  _kg_]}}
    function trans(ty1,match)
     {if(typeof ty1 === "number")
       if(typeof match === "number")
        return 0;
       else
        switch(match[0])
         {case 10:var switch$0=0;break;
          case 11:var switch$0=1;break;
          case 12:var switch$0=2;break;
          case 13:var switch$0=3;break;
          case 14:var switch$0=4;break;
          case 8:var switch$0=5;break;
          case 9:var switch$0=6;break;
          default:throw [0,Assert_failure,_aj_]}
      else
       switch(ty1[0])
        {case 0:
          var _jE_=ty1[1];
          if(typeof match === "number")
           var switch$1=1;
          else
           switch(match[0])
            {case 0:var rest2=match[1];return [0,trans(_jE_,rest2)];
             case 8:var switch$0=5,switch$1=0;break;
             case 9:var switch$0=6,switch$1=0;break;
             case 10:var switch$0=0,switch$1=0;break;
             case 11:var switch$0=1,switch$1=0;break;
             case 12:var switch$0=2,switch$1=0;break;
             case 13:var switch$0=3,switch$1=0;break;
             case 14:var switch$0=4,switch$1=0;break;
             default:var switch$1=1}
          if(switch$1)var switch$0=7;
          break;
         case 1:
          var _jF_=ty1[1];
          if(typeof match === "number")
           var switch$2=1;
          else
           switch(match[0])
            {case 1:var rest2$0=match[1];return [1,trans(_jF_,rest2$0)];
             case 8:var switch$0=5,switch$2=0;break;
             case 9:var switch$0=6,switch$2=0;break;
             case 10:var switch$0=0,switch$2=0;break;
             case 11:var switch$0=1,switch$2=0;break;
             case 12:var switch$0=2,switch$2=0;break;
             case 13:var switch$0=3,switch$2=0;break;
             case 14:var switch$0=4,switch$2=0;break;
             default:var switch$2=1}
          if(switch$2)var switch$0=7;
          break;
         case 2:
          var _jG_=ty1[1];
          if(typeof match === "number")
           var switch$3=1;
          else
           switch(match[0])
            {case 2:var rest2$1=match[1];return [2,trans(_jG_,rest2$1)];
             case 8:var switch$0=5,switch$3=0;break;
             case 9:var switch$0=6,switch$3=0;break;
             case 10:var switch$0=0,switch$3=0;break;
             case 11:var switch$0=1,switch$3=0;break;
             case 12:var switch$0=2,switch$3=0;break;
             case 13:var switch$0=3,switch$3=0;break;
             case 14:var switch$0=4,switch$3=0;break;
             default:var switch$3=1}
          if(switch$3)var switch$0=7;
          break;
         case 3:
          var _jH_=ty1[1];
          if(typeof match === "number")
           var switch$4=1;
          else
           switch(match[0])
            {case 3:var rest2$2=match[1];return [3,trans(_jH_,rest2$2)];
             case 8:var switch$0=5,switch$4=0;break;
             case 9:var switch$0=6,switch$4=0;break;
             case 10:var switch$0=0,switch$4=0;break;
             case 11:var switch$0=1,switch$4=0;break;
             case 12:var switch$0=2,switch$4=0;break;
             case 13:var switch$0=3,switch$4=0;break;
             case 14:var switch$0=4,switch$4=0;break;
             default:var switch$4=1}
          if(switch$4)var switch$0=7;
          break;
         case 4:
          var _jI_=ty1[1];
          if(typeof match === "number")
           var switch$5=1;
          else
           switch(match[0])
            {case 4:var rest2$3=match[1];return [4,trans(_jI_,rest2$3)];
             case 8:var switch$0=5,switch$5=0;break;
             case 9:var switch$0=6,switch$5=0;break;
             case 10:var switch$0=0,switch$5=0;break;
             case 11:var switch$0=1,switch$5=0;break;
             case 12:var switch$0=2,switch$5=0;break;
             case 13:var switch$0=3,switch$5=0;break;
             case 14:var switch$0=4,switch$5=0;break;
             default:var switch$5=1}
          if(switch$5)var switch$0=7;
          break;
         case 5:
          var _jJ_=ty1[1];
          if(typeof match === "number")
           var switch$6=1;
          else
           switch(match[0])
            {case 5:var rest2$4=match[1];return [5,trans(_jJ_,rest2$4)];
             case 8:var switch$0=5,switch$6=0;break;
             case 9:var switch$0=6,switch$6=0;break;
             case 10:var switch$0=0,switch$6=0;break;
             case 11:var switch$0=1,switch$6=0;break;
             case 12:var switch$0=2,switch$6=0;break;
             case 13:var switch$0=3,switch$6=0;break;
             case 14:var switch$0=4,switch$6=0;break;
             default:var switch$6=1}
          if(switch$6)var switch$0=7;
          break;
         case 6:
          var _jK_=ty1[1];
          if(typeof match === "number")
           var switch$7=1;
          else
           switch(match[0])
            {case 6:var rest2$5=match[1];return [6,trans(_jK_,rest2$5)];
             case 8:var switch$0=5,switch$7=0;break;
             case 9:var switch$0=6,switch$7=0;break;
             case 10:var switch$0=0,switch$7=0;break;
             case 11:var switch$0=1,switch$7=0;break;
             case 12:var switch$0=2,switch$7=0;break;
             case 13:var switch$0=3,switch$7=0;break;
             case 14:var switch$0=4,switch$7=0;break;
             default:var switch$7=1}
          if(switch$7)var switch$0=7;
          break;
         case 7:
          var _jL_=ty1[1];
          if(typeof match === "number")
           var switch$8=1;
          else
           switch(match[0])
            {case 7:var rest2$6=match[1];return [7,trans(_jL_,rest2$6)];
             case 8:var switch$0=5,switch$8=0;break;
             case 9:var switch$0=6,switch$8=0;break;
             case 10:var switch$0=0,switch$8=0;break;
             case 11:var switch$0=1,switch$8=0;break;
             case 12:var switch$0=2,switch$8=0;break;
             case 13:var switch$0=3,switch$8=0;break;
             case 14:var switch$0=4,switch$8=0;break;
             default:var switch$8=1}
          if(switch$8)var switch$0=7;
          break;
         case 8:
          var _jM_=ty1[2],_jN_=ty1[1];
          if(typeof match === "number")
           var switch$9=1;
          else
           switch(match[0])
            {case 8:
              var rest2$7=match[2],ty2=match[1],_jO_=trans(_jM_,rest2$7);
              return [8,trans(_jN_,ty2),_jO_];
             case 10:var switch$0=0,switch$9=0;break;
             case 11:var switch$0=1,switch$9=0;break;
             case 12:var switch$0=2,switch$9=0;break;
             case 13:var switch$0=3,switch$9=0;break;
             case 14:var switch$0=4,switch$9=0;break;
             default:var switch$9=1}
          if(switch$9)throw [0,Assert_failure,_as_];
          break;
         case 9:
          var _jP_=ty1[3],_jQ_=ty1[2],_jR_=ty1[1];
          if(typeof match === "number")
           var switch$10=1;
          else
           switch(match[0])
            {case 8:var switch$0=5,switch$10=0;break;
             case 9:
              var
               rest2$8=match[3],
               ty22=match[2],
               ty21=match[1],
               ty=trans(symm(_jQ_),ty21),
               match$0=fmtty_rel_det(ty),
               f4=match$0[4],
               f2=match$0[2];
              caml_call1(f2,0);
              caml_call1(f4,0);
              return [9,_jR_,ty22,trans(_jP_,rest2$8)];
             case 10:var switch$0=0,switch$10=0;break;
             case 11:var switch$0=1,switch$10=0;break;
             case 12:var switch$0=2,switch$10=0;break;
             case 13:var switch$0=3,switch$10=0;break;
             case 14:var switch$0=4,switch$10=0;break;
             default:var switch$10=1}
          if(switch$10)throw [0,Assert_failure,_at_];
          break;
         case 10:
          var _jS_=ty1[1];
          if(typeof match !== "number" && 10 === match[0])
           {var rest2$9=match[1];return [10,trans(_jS_,rest2$9)]}
          throw [0,Assert_failure,_au_];
         case 11:
          var _jT_=ty1[1];
          if(typeof match === "number")
           var switch$11=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$11=0;break;
             case 11:var rest2$10=match[1];return [11,trans(_jT_,rest2$10)];
             default:var switch$11=1}
          if(switch$11)throw [0,Assert_failure,_av_];
          break;
         case 12:
          var _jU_=ty1[1];
          if(typeof match === "number")
           var switch$12=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$12=0;break;
             case 11:var switch$0=1,switch$12=0;break;
             case 12:var rest2$11=match[1];return [12,trans(_jU_,rest2$11)];
             default:var switch$12=1}
          if(switch$12)throw [0,Assert_failure,_aw_];
          break;
         case 13:
          var _jV_=ty1[1];
          if(typeof match === "number")
           var switch$13=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$13=0;break;
             case 11:var switch$0=1,switch$13=0;break;
             case 12:var switch$0=2,switch$13=0;break;
             case 13:var rest2$12=match[1];return [13,trans(_jV_,rest2$12)];
             default:var switch$13=1}
          if(switch$13)throw [0,Assert_failure,_ax_];
          break;
         default:
          var _jW_=ty1[1];
          if(typeof match === "number")
           var switch$14=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$14=0;break;
             case 11:var switch$0=1,switch$14=0;break;
             case 12:var switch$0=2,switch$14=0;break;
             case 13:var switch$0=3,switch$14=0;break;
             case 14:var rest2$13=match[1];return [14,trans(_jW_,rest2$13)];
             default:var switch$14=1}
          if(switch$14)throw [0,Assert_failure,_ay_]}
      switch(switch$0)
       {case 0:throw [0,Assert_failure,_am_];
        case 1:throw [0,Assert_failure,_an_];
        case 2:throw [0,Assert_failure,_ao_];
        case 3:throw [0,Assert_failure,_ap_];
        case 4:throw [0,Assert_failure,_aq_];
        case 5:throw [0,Assert_failure,_ak_];
        case 6:throw [0,Assert_failure,_al_];
        default:throw [0,Assert_failure,_ar_]}}
    var Type_mismatch=[248,_az_,caml_fresh_oo_id(0)];
    function type_padding(pad,match)
     {if(typeof pad === "number")
       return [0,0,match];
      else
       {if(0 === pad[0])
         {var w=pad[2],padty=pad[1];return [0,[0,padty,w],match]}
        if(typeof match !== "number" && 2 === match[0])
         {var rest=match[1],padty$0=pad[1];return [0,[1,padty$0],rest]}
        throw Type_mismatch}}
    function type_padprec(pad,prec,fmtty)
     {var match=type_padding(pad,fmtty);
      if(typeof prec === "number")
       {if(0 === prec)
         {var rest=match[2],pad$0=match[1];return [0,pad$0,0,rest]}
        var _jD_=match[2];
        if(typeof _jD_ !== "number" && 2 === _jD_[0])
         {var rest$0=_jD_[1],pad$1=match[1];return [0,pad$1,1,rest$0]}
        throw Type_mismatch}
      var rest$1=match[2],pad$2=match[1],p=prec[1];
      return [0,pad$2,[0,p],rest$1]}
    function type_ignored_param_one(ign,fmt,fmtty)
     {var match=type_format_gen(fmt,fmtty),fmtty$0=match[2],fmt$0=match[1];
      return [0,[23,ign,fmt$0],fmtty$0]}
    function type_format_gen(fmt,fmtty)
     {if(typeof fmt === "number")
       return [0,0,fmtty];
      else
       switch(fmt[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             fmt_rest=fmt[1],
             match=type_format_gen(fmt_rest,fmtty_rest),
             fmtty$0=match[2],
             fmt$0=match[1];
            return [0,[0,fmt$0],fmtty$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest$0=fmtty[1],
             fmt_rest$0=fmt[1],
             match$0=type_format_gen(fmt_rest$0,fmtty_rest$0),
             fmtty$1=match$0[2],
             fmt$1=match$0[1];
            return [0,[1,fmt$1],fmtty$1]}
          break;
         case 2:
          var
           fmt_rest$1=fmt[2],
           pad=fmt[1],
           _i__=type_padding(pad,fmtty),
           _i$_=_i__[2],
           _ja_=_i__[1];
          if(typeof _i$_ !== "number" && 1 === _i$_[0])
           {var
             fmtty_rest$1=_i$_[1],
             match$1=type_format_gen(fmt_rest$1,fmtty_rest$1),
             fmtty$2=match$1[2],
             fmt$2=match$1[1];
            return [0,[2,_ja_,fmt$2],fmtty$2]}
          throw Type_mismatch;
         case 3:
          var
           fmt_rest$2=fmt[2],
           pad$0=fmt[1],
           _jb_=type_padding(pad$0,fmtty),
           _jc_=_jb_[2],
           _jd_=_jb_[1];
          if(typeof _jc_ !== "number" && 1 === _jc_[0])
           {var
             fmtty_rest$2=_jc_[1],
             match$2=type_format_gen(fmt_rest$2,fmtty_rest$2),
             fmtty$3=match$2[2],
             fmt$3=match$2[1];
            return [0,[3,_jd_,fmt$3],fmtty$3]}
          throw Type_mismatch;
         case 4:
          var
           fmt_rest$3=fmt[4],
           prec=fmt[3],
           pad$1=fmt[2],
           iconv=fmt[1],
           _je_=type_padprec(pad$1,prec,fmtty),
           _jf_=_je_[3],
           _jg_=_je_[2],
           _jh_=_je_[1];
          if(typeof _jf_ !== "number" && 2 === _jf_[0])
           {var
             fmtty_rest$3=_jf_[1],
             match$3=type_format_gen(fmt_rest$3,fmtty_rest$3),
             fmtty$4=match$3[2],
             fmt$4=match$3[1];
            return [0,[4,iconv,_jh_,_jg_,fmt$4],fmtty$4]}
          throw Type_mismatch;
         case 5:
          var
           fmt_rest$4=fmt[4],
           prec$0=fmt[3],
           pad$2=fmt[2],
           iconv$0=fmt[1],
           _ji_=type_padprec(pad$2,prec$0,fmtty),
           _jj_=_ji_[3],
           _jk_=_ji_[2],
           _jl_=_ji_[1];
          if(typeof _jj_ !== "number" && 3 === _jj_[0])
           {var
             fmtty_rest$4=_jj_[1],
             match$4=type_format_gen(fmt_rest$4,fmtty_rest$4),
             fmtty$5=match$4[2],
             fmt$5=match$4[1];
            return [0,[5,iconv$0,_jl_,_jk_,fmt$5],fmtty$5]}
          throw Type_mismatch;
         case 6:
          var
           fmt_rest$5=fmt[4],
           prec$1=fmt[3],
           pad$3=fmt[2],
           iconv$1=fmt[1],
           _jm_=type_padprec(pad$3,prec$1,fmtty),
           _jn_=_jm_[3],
           _jo_=_jm_[2],
           _jp_=_jm_[1];
          if(typeof _jn_ !== "number" && 4 === _jn_[0])
           {var
             fmtty_rest$5=_jn_[1],
             match$5=type_format_gen(fmt_rest$5,fmtty_rest$5),
             fmtty$6=match$5[2],
             fmt$6=match$5[1];
            return [0,[6,iconv$1,_jp_,_jo_,fmt$6],fmtty$6]}
          throw Type_mismatch;
         case 7:
          var
           fmt_rest$6=fmt[4],
           prec$2=fmt[3],
           pad$4=fmt[2],
           iconv$2=fmt[1],
           _jq_=type_padprec(pad$4,prec$2,fmtty),
           _jr_=_jq_[3],
           _js_=_jq_[2],
           _jt_=_jq_[1];
          if(typeof _jr_ !== "number" && 5 === _jr_[0])
           {var
             fmtty_rest$6=_jr_[1],
             match$6=type_format_gen(fmt_rest$6,fmtty_rest$6),
             fmtty$7=match$6[2],
             fmt$7=match$6[1];
            return [0,[7,iconv$2,_jt_,_js_,fmt$7],fmtty$7]}
          throw Type_mismatch;
         case 8:
          var
           fmt_rest$7=fmt[4],
           prec$3=fmt[3],
           pad$5=fmt[2],
           fconv=fmt[1],
           _ju_=type_padprec(pad$5,prec$3,fmtty),
           _jv_=_ju_[3],
           _jw_=_ju_[2],
           _jx_=_ju_[1];
          if(typeof _jv_ !== "number" && 6 === _jv_[0])
           {var
             fmtty_rest$7=_jv_[1],
             match$7=type_format_gen(fmt_rest$7,fmtty_rest$7),
             fmtty$8=match$7[2],
             fmt$8=match$7[1];
            return [0,[8,fconv,_jx_,_jw_,fmt$8],fmtty$8]}
          throw Type_mismatch;
         case 9:
          var
           fmt_rest$8=fmt[2],
           pad$6=fmt[1],
           _jy_=type_padding(pad$6,fmtty),
           _jz_=_jy_[2],
           _jA_=_jy_[1];
          if(typeof _jz_ !== "number" && 7 === _jz_[0])
           {var
             fmtty_rest$8=_jz_[1],
             match$8=type_format_gen(fmt_rest$8,fmtty_rest$8),
             fmtty$9=match$8[2],
             fmt$9=match$8[1];
            return [0,[9,_jA_,fmt$9],fmtty$9]}
          throw Type_mismatch;
         case 10:
          var
           fmt_rest$9=fmt[1],
           match$9=type_format_gen(fmt_rest$9,fmtty),
           fmtty$10=match$9[2],
           fmt$10=match$9[1];
          return [0,[10,fmt$10],fmtty$10];
         case 11:
          var
           fmt_rest$10=fmt[2],
           str=fmt[1],
           match$10=type_format_gen(fmt_rest$10,fmtty),
           fmtty$11=match$10[2],
           fmt$11=match$10[1];
          return [0,[11,str,fmt$11],fmtty$11];
         case 12:
          var
           fmt_rest$11=fmt[2],
           chr=fmt[1],
           match$11=type_format_gen(fmt_rest$11,fmtty),
           fmtty$12=match$11[2],
           fmt$12=match$11[1];
          return [0,[12,chr,fmt$12],fmtty$12];
         case 13:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[2],
             sub_fmtty=fmtty[1],
             fmt_rest$12=fmt[3],
             sub_fmtty$0=fmt[2],
             pad_opt=fmt[1];
            if(caml_notequal([0,sub_fmtty$0],[0,sub_fmtty]))
             throw Type_mismatch;
            var
             match$12=type_format_gen(fmt_rest$12,fmtty_rest$9),
             fmtty$13=match$12[2],
             fmt$13=match$12[1];
            return [0,[13,pad_opt,sub_fmtty,fmt$13],fmtty$13]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           {var
             fmtty_rest$10=fmtty[3],
             sub_fmtty1=fmtty[1],
             fmt_rest$13=fmt[3],
             sub_fmtty$1=fmt[2],
             pad_opt$0=fmt[1],
             _jB_=[0,erase_rel(sub_fmtty1)];
            if(caml_notequal([0,erase_rel(sub_fmtty$1)],_jB_))
             throw Type_mismatch;
            var
             match$13=type_format_gen(fmt_rest$13,erase_rel(fmtty_rest$10)),
             fmtty$14=match$13[2],
             fmt$14=match$13[1];
            return [0,[14,pad_opt$0,sub_fmtty1,fmt$14],fmtty$14]}
          break;
         case 15:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           {var
             fmtty_rest$11=fmtty[1],
             fmt_rest$14=fmt[1],
             match$14=type_format_gen(fmt_rest$14,fmtty_rest$11),
             fmtty$15=match$14[2],
             fmt$15=match$14[1];
            return [0,[15,fmt$15],fmtty$15]}
          break;
         case 16:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           {var
             fmtty_rest$12=fmtty[1],
             fmt_rest$15=fmt[1],
             match$15=type_format_gen(fmt_rest$15,fmtty_rest$12),
             fmtty$16=match$15[2],
             fmt$16=match$15[1];
            return [0,[16,fmt$16],fmtty$16]}
          break;
         case 17:
          var
           fmt_rest$16=fmt[2],
           formatting_lit=fmt[1],
           match$16=type_format_gen(fmt_rest$16,fmtty),
           fmtty$17=match$16[2],
           fmt$17=match$16[1];
          return [0,[17,formatting_lit,fmt$17],fmtty$17];
         case 18:
          var fmt_rest$17=fmt[2],formatting_gen=fmt[1];
          if(0 === formatting_gen[0])
           {var
             match$20=formatting_gen[1],
             str$0=match$20[2],
             fmt1=match$20[1],
             match$21=type_format_gen(fmt1,fmtty),
             fmtty2=match$21[2],
             fmt2=match$21[1],
             match$22=type_format_gen(fmt_rest$17,fmtty2),
             fmtty3=match$22[2],
             fmt3=match$22[1];
            return [0,[18,[0,[0,fmt2,str$0]],fmt3],fmtty3]}
          var
           match$23=formatting_gen[1],
           str$1=match$23[2],
           fmt1$0=match$23[1],
           match$24=type_format_gen(fmt1$0,fmtty),
           fmtty2$0=match$24[2],
           fmt2$0=match$24[1],
           match$25=type_format_gen(fmt_rest$17,fmtty2$0),
           fmtty3$0=match$25[2],
           fmt3$0=match$25[1];
          return [0,[18,[1,[0,fmt2$0,str$1]],fmt3$0],fmtty3$0];
         case 19:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           {var
             fmtty_rest$13=fmtty[1],
             fmt_rest$18=fmt[1],
             match$17=type_format_gen(fmt_rest$18,fmtty_rest$13),
             fmtty$18=match$17[2],
             fmt$18=match$17[1];
            return [0,[19,fmt$18],fmtty$18]}
          break;
         case 20:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           {var
             fmtty_rest$14=fmtty[1],
             fmt_rest$19=fmt[3],
             char_set=fmt[2],
             width_opt=fmt[1],
             match$18=type_format_gen(fmt_rest$19,fmtty_rest$14),
             fmtty$19=match$18[2],
             fmt$19=match$18[1];
            return [0,[20,width_opt,char_set,fmt$19],fmtty$19]}
          break;
         case 21:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           {var
             fmtty_rest$15=fmtty[1],
             fmt_rest$20=fmt[2],
             counter=fmt[1],
             match$19=type_format_gen(fmt_rest$20,fmtty_rest$15),
             fmtty$20=match$19[2],
             fmt$20=match$19[1];
            return [0,[21,counter,fmt$20],fmtty$20]}
          break;
         case 23:
          var rest=fmt[2],ign=fmt[1];
          if(typeof ign === "number")
           switch(ign)
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:
              if(typeof fmtty !== "number" && 14 === fmtty[0])
               {var
                 fmtty_rest$16=fmtty[1],
                 match$26=type_format_gen(rest,fmtty_rest$16),
                 fmtty$21=match$26[2],
                 fmt$21=match$26[1];
                return [0,[23,2,fmt$21],fmtty$21]}
              throw Type_mismatch;
             default:return type_ignored_param_one(ign,rest,fmtty)}
          else
           switch(ign[0])
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:return type_ignored_param_one(ign,rest,fmtty);
             case 3:return type_ignored_param_one(ign,rest,fmtty);
             case 4:return type_ignored_param_one(ign,rest,fmtty);
             case 5:return type_ignored_param_one(ign,rest,fmtty);
             case 6:return type_ignored_param_one(ign,rest,fmtty);
             case 7:return type_ignored_param_one(ign,rest,fmtty);
             case 8:
              var sub_fmtty$2=ign[2],pad_opt$1=ign[1];
              return type_ignored_param_one
                      ([8,pad_opt$1,sub_fmtty$2],rest,fmtty);
             case 9:
              var
               sub_fmtty$3=ign[2],
               pad_opt$2=ign[1],
               _jC_=type_ignored_format_substitution(sub_fmtty$3,rest,fmtty),
               match$27=_jC_[2],
               fmtty$22=match$27[2],
               fmt$22=match$27[1],
               sub_fmtty$4=_jC_[1];
              return [0,[23,[9,pad_opt$2,sub_fmtty$4],fmt$22],fmtty$22];
             case 10:return type_ignored_param_one(ign,rest,fmtty);
             default:return type_ignored_param_one(ign,rest,fmtty)}
         }
      throw Type_mismatch}
    function type_ignored_format_substitution(sub_fmtty,fmt,match)
     {if(typeof sub_fmtty === "number")
       return [0,0,type_format_gen(fmt,match)];
      else
       switch(sub_fmtty[0])
        {case 0:
          if(typeof match !== "number" && 0 === match[0])
           {var
             fmtty_rest=match[1],
             sub_fmtty_rest=sub_fmtty[1],
             match$0=
              type_ignored_format_substitution(sub_fmtty_rest,fmt,fmtty_rest),
             fmt$0=match$0[2],
             sub_fmtty_rest$0=match$0[1];
            return [0,[0,sub_fmtty_rest$0],fmt$0]}
          break;
         case 1:
          if(typeof match !== "number" && 1 === match[0])
           {var
             fmtty_rest$0=match[1],
             sub_fmtty_rest$1=sub_fmtty[1],
             match$1=
              type_ignored_format_substitution
               (sub_fmtty_rest$1,fmt,fmtty_rest$0),
             fmt$1=match$1[2],
             sub_fmtty_rest$2=match$1[1];
            return [0,[1,sub_fmtty_rest$2],fmt$1]}
          break;
         case 2:
          if(typeof match !== "number" && 2 === match[0])
           {var
             fmtty_rest$1=match[1],
             sub_fmtty_rest$3=sub_fmtty[1],
             match$2=
              type_ignored_format_substitution
               (sub_fmtty_rest$3,fmt,fmtty_rest$1),
             fmt$2=match$2[2],
             sub_fmtty_rest$4=match$2[1];
            return [0,[2,sub_fmtty_rest$4],fmt$2]}
          break;
         case 3:
          if(typeof match !== "number" && 3 === match[0])
           {var
             fmtty_rest$2=match[1],
             sub_fmtty_rest$5=sub_fmtty[1],
             match$3=
              type_ignored_format_substitution
               (sub_fmtty_rest$5,fmt,fmtty_rest$2),
             fmt$3=match$3[2],
             sub_fmtty_rest$6=match$3[1];
            return [0,[3,sub_fmtty_rest$6],fmt$3]}
          break;
         case 4:
          if(typeof match !== "number" && 4 === match[0])
           {var
             fmtty_rest$3=match[1],
             sub_fmtty_rest$7=sub_fmtty[1],
             match$4=
              type_ignored_format_substitution
               (sub_fmtty_rest$7,fmt,fmtty_rest$3),
             fmt$4=match$4[2],
             sub_fmtty_rest$8=match$4[1];
            return [0,[4,sub_fmtty_rest$8],fmt$4]}
          break;
         case 5:
          if(typeof match !== "number" && 5 === match[0])
           {var
             fmtty_rest$4=match[1],
             sub_fmtty_rest$9=sub_fmtty[1],
             match$5=
              type_ignored_format_substitution
               (sub_fmtty_rest$9,fmt,fmtty_rest$4),
             fmt$5=match$5[2],
             sub_fmtty_rest$10=match$5[1];
            return [0,[5,sub_fmtty_rest$10],fmt$5]}
          break;
         case 6:
          if(typeof match !== "number" && 6 === match[0])
           {var
             fmtty_rest$5=match[1],
             sub_fmtty_rest$11=sub_fmtty[1],
             match$6=
              type_ignored_format_substitution
               (sub_fmtty_rest$11,fmt,fmtty_rest$5),
             fmt$6=match$6[2],
             sub_fmtty_rest$12=match$6[1];
            return [0,[6,sub_fmtty_rest$12],fmt$6]}
          break;
         case 7:
          if(typeof match !== "number" && 7 === match[0])
           {var
             fmtty_rest$6=match[1],
             sub_fmtty_rest$13=sub_fmtty[1],
             match$7=
              type_ignored_format_substitution
               (sub_fmtty_rest$13,fmt,fmtty_rest$6),
             fmt$7=match$7[2],
             sub_fmtty_rest$14=match$7[1];
            return [0,[7,sub_fmtty_rest$14],fmt$7]}
          break;
         case 8:
          if(typeof match !== "number" && 8 === match[0])
           {var
             fmtty_rest$7=match[2],
             sub2_fmtty=match[1],
             sub_fmtty_rest$15=sub_fmtty[2],
             sub2_fmtty$0=sub_fmtty[1];
            if(caml_notequal([0,sub2_fmtty$0],[0,sub2_fmtty]))
             throw Type_mismatch;
            var
             match$8=
              type_ignored_format_substitution
               (sub_fmtty_rest$15,fmt,fmtty_rest$7),
             fmt$8=match$8[2],
             sub_fmtty_rest$16=match$8[1];
            return [0,[8,sub2_fmtty,sub_fmtty_rest$16],fmt$8]}
          break;
         case 9:
          if(typeof match !== "number" && 9 === match[0])
           {var
             fmtty_rest$8=match[3],
             sub2_fmtty$1=match[2],
             sub1_fmtty=match[1],
             sub_fmtty_rest$17=sub_fmtty[3],
             sub2_fmtty$2=sub_fmtty[2],
             sub1_fmtty$0=sub_fmtty[1],
             _i8_=[0,erase_rel(sub1_fmtty)];
            if(caml_notequal([0,erase_rel(sub1_fmtty$0)],_i8_))
             throw Type_mismatch;
            var _i9_=[0,erase_rel(sub2_fmtty$1)];
            if(caml_notequal([0,erase_rel(sub2_fmtty$2)],_i9_))
             throw Type_mismatch;
            var
             sub_fmtty$0=trans(symm(sub1_fmtty),sub2_fmtty$1),
             match$9=fmtty_rel_det(sub_fmtty$0),
             f4=match$9[4],
             f2=match$9[2];
            caml_call1(f2,0);
            caml_call1(f4,0);
            var
             match$10=
              type_ignored_format_substitution
               (erase_rel(sub_fmtty_rest$17),fmt,fmtty_rest$8),
             fmt$9=match$10[2],
             sub_fmtty_rest$18=match$10[1];
            return [0,
                    [9,sub1_fmtty,sub2_fmtty$1,symm(sub_fmtty_rest$18)],
                    fmt$9]}
          break;
         case 10:
          if(typeof match !== "number" && 10 === match[0])
           {var
             fmtty_rest$9=match[1],
             sub_fmtty_rest$19=sub_fmtty[1],
             match$11=
              type_ignored_format_substitution
               (sub_fmtty_rest$19,fmt,fmtty_rest$9),
             fmt$10=match$11[2],
             sub_fmtty_rest$20=match$11[1];
            return [0,[10,sub_fmtty_rest$20],fmt$10]}
          break;
         case 11:
          if(typeof match !== "number" && 11 === match[0])
           {var
             fmtty_rest$10=match[1],
             sub_fmtty_rest$21=sub_fmtty[1],
             match$12=
              type_ignored_format_substitution
               (sub_fmtty_rest$21,fmt,fmtty_rest$10),
             fmt$11=match$12[2],
             sub_fmtty_rest$22=match$12[1];
            return [0,[11,sub_fmtty_rest$22],fmt$11]}
          break;
         case 13:
          if(typeof match !== "number" && 13 === match[0])
           {var
             fmtty_rest$11=match[1],
             sub_fmtty_rest$23=sub_fmtty[1],
             match$13=
              type_ignored_format_substitution
               (sub_fmtty_rest$23,fmt,fmtty_rest$11),
             fmt$12=match$13[2],
             sub_fmtty_rest$24=match$13[1];
            return [0,[13,sub_fmtty_rest$24],fmt$12]}
          break;
         case 14:
          if(typeof match !== "number" && 14 === match[0])
           {var
             fmtty_rest$12=match[1],
             sub_fmtty_rest$25=sub_fmtty[1],
             match$14=
              type_ignored_format_substitution
               (sub_fmtty_rest$25,fmt,fmtty_rest$12),
             fmt$13=match$14[2],
             sub_fmtty_rest$26=match$14[1];
            return [0,[14,sub_fmtty_rest$26],fmt$13]}
          break
         }
      throw Type_mismatch}
    function recast(fmt$0,fmtty)
     {var fmtty$0=erase_rel(symm(fmtty)),_i7_=type_format_gen(fmt$0,fmtty$0);
      if(typeof _i7_[2] === "number"){var fmt=_i7_[1];return fmt}
      throw Type_mismatch}
    function fix_padding(padty,width,str)
     {var
       len=caml_ml_string_length(str),
       padty$0=0 <= width?padty:0,
       width$0=abs(width);
      if(width$0 <= len)return str;
      var _i6_=2 === padty$0?48:32,res=make(width$0,_i6_);
      switch(padty$0)
       {case 0:blit$0(str,0,res,0,len);break;
        case 1:blit$0(str,0,res,width$0 - len | 0,len);break;
        default:
         if(0 < len)
          {if(43 === caml_string_get(str,0))
            var switch$1=1;
           else
            if(45 === caml_string_get(str,0))
             var switch$1=1;
            else
             if(32 === caml_string_get(str,0))
              var switch$1=1;
             else
              var switch$0=0,switch$1=0;
           if(switch$1)
            {caml_bytes_set(res,0,caml_string_get(str,0));
             blit$0(str,1,res,(width$0 - len | 0) + 1 | 0,len - 1 | 0);
             var switch$0=1}}
         else
          var switch$0=0;
         if(! switch$0)
          {if(1 < len)
            if(48 === caml_string_get(str,0))
             {if(120 === caml_string_get(str,1))
               var switch$3=1;
              else
               if(88 === caml_string_get(str,1))
                var switch$3=1;
               else
                var switch$2=0,switch$3=0;
              if(switch$3)
               {caml_bytes_set(res,1,caml_string_get(str,1));
                blit$0(str,2,res,(width$0 - len | 0) + 2 | 0,len - 2 | 0);
                var switch$2=1}}
            else
             var switch$2=0;
           else
            var switch$2=0;
           if(! switch$2)blit$0(str,0,res,width$0 - len | 0,len)}}
      return res}
    function fix_int_precision(prec,str)
     {var
       prec$0=abs(prec),
       len=caml_ml_string_length(str),
       c=caml_string_get(str,0);
      if(58 <= c)
       var switch$0=71 <= c?5 < (c - 97 | 0) >>> 0?1:0:65 <= c?0:1;
      else
       {if(32 === c)
         var switch$1=1;
        else
         if(43 <= c)
          {var switcher=c - 43 | 0;
           switch(switcher)
            {case 5:
              if(len < (prec$0 + 2 | 0))
               if(1 < len)
                {var
                  switch$2=
                   120 === caml_string_get(str,1)
                    ?0
                    :88 === caml_string_get(str,1)?0:1;
                 if(! switch$2)
                  {var res$1=make(prec$0 + 2 | 0,48);
                   caml_bytes_set(res$1,1,caml_string_get(str,1));
                   blit$0(str,2,res$1,(prec$0 - len | 0) + 4 | 0,len - 2 | 0);
                   return res$1}}
              var switch$0=0,switch$1=0;
              break;
             case 0:
             case 2:var switch$1=1;break;
             case 1:
             case 3:
             case 4:var switch$0=1,switch$1=0;break;
             default:var switch$0=0,switch$1=0}}
         else
          var switch$0=1,switch$1=0;
        if(switch$1)
         {if(len < (prec$0 + 1 | 0))
           {var res$0=make(prec$0 + 1 | 0,48);
            caml_bytes_set(res$0,0,c);
            blit$0(str,1,res$0,(prec$0 - len | 0) + 2 | 0,len - 1 | 0);
            return res$0}
          var switch$0=1}}
      if(! switch$0)
       if(len < prec$0)
        {var res=make(prec$0,48);
         blit$0(str,0,res,prec$0 - len | 0,len);
         return res}
      return str}
    function string_to_caml_string(str)
     {var i$1=0;
      for(;;)
       {if(caml_ml_string_length(str) <= i$1)
         var _i5_=0;
        else
         {var match$0=caml_string_unsafe_get(str,i$1);
          if(32 <= match$0)
           {var _i4_=match$0 - 34 | 0;
            if(58 < _i4_ >>> 0)
             if(93 <= _i4_)var switch$0=0,switch$1=0;else var switch$1=1;
            else
             if(56 < (_i4_ - 1 | 0) >>> 0)
              var switch$0=1,switch$1=0;
             else
              var switch$1=1;
            if(switch$1){var i$2=i$1 + 1 | 0,i$1=i$2;continue}}
          else
           var switch$0=11 <= match$0?13 === match$0?1:0:8 <= match$0?1:0;
          var _i5_=switch$0?1:1}
        if(_i5_)
         {var n=[0,0],_iX_=caml_ml_bytes_length(str) - 1 | 0,_iW_=0;
          if(! (_iX_ < 0))
           {var i$0=_iW_;
            for(;;)
             {var match=caml_string_unsafe_get(str,i$0);
              if(32 <= match)
               {var _i1_=match - 34 | 0;
                if(58 < _i1_ >>> 0)
                 if(93 <= _i1_)var switch$2=0,switch$3=0;else var switch$3=1;
                else
                 if(56 < (_i1_ - 1 | 0) >>> 0)
                  var switch$2=1,switch$3=0;
                 else
                  var switch$3=1;
                if(switch$3)var _i2_=1,switch$2=2}
              else
               var switch$2=11 <= match?13 === match?1:0:8 <= match?1:0;
              switch(switch$2)
               {case 0:var _i2_=4;break;case 1:var _i2_=2;break}
              n[1] = n[1] + _i2_ | 0;
              var _i3_=i$0 + 1 | 0;
              if(_iX_ !== i$0){var i$0=_i3_;continue}
              break}}
          if(n[1] === caml_ml_bytes_length(str))
           {var len=caml_ml_bytes_length(str),r=caml_create_bytes(len);
            caml_blit_bytes(str,0,r,0,len);
            var str$0=r}
          else
           {var s=caml_create_bytes(n[1]);
            n[1] = 0;
            var _iZ_=caml_ml_bytes_length(str) - 1 | 0,_iY_=0;
            if(! (_iZ_ < 0))
             {var i=_iY_;
              for(;;)
               {var c=caml_string_unsafe_get(str,i);
                if(35 <= c)
                 var switch$4=92 === c?1:127 <= c?0:2;
                else
                 if(32 <= c)
                  var switch$4=34 <= c?1:2;
                 else
                  if(14 <= c)
                   var switch$4=0;
                  else
                   switch(c)
                    {case 8:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],98);
                      var switch$4=3;
                      break;
                     case 9:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],116);
                      var switch$4=3;
                      break;
                     case 10:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],110);
                      var switch$4=3;
                      break;
                     case 13:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],114);
                      var switch$4=3;
                      break;
                     default:var switch$4=0}
                switch(switch$4)
                 {case 0:
                   caml_string_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_string_unsafe_set(s,n[1],48 + (c / 100 | 0) | 0);
                   n[1]++;
                   caml_string_unsafe_set
                    (s,n[1],48 + ((c / 10 | 0) % 10 | 0) | 0);
                   n[1]++;
                   caml_string_unsafe_set(s,n[1],48 + (c % 10 | 0) | 0);
                   break;
                  case 1:
                   caml_string_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_string_unsafe_set(s,n[1],c);
                   break;
                  case 2:caml_string_unsafe_set(s,n[1],c);break
                  }
                n[1]++;
                var _i0_=i + 1 | 0;
                if(_iZ_ !== i){var i=_i0_;continue}
                break}}
            var str$0=s}}
        else
         var str$0=str;
        var l=caml_ml_string_length(str$0),res=make(l + 2 | 0,34);
        caml_blit_string(str$0,0,res,1,l);
        return res}}
    function convert_int(iconv,n)
     {switch(iconv)
       {case 0:var _iV_=_aA_;break;
        case 1:var _iV_=_aB_;break;
        case 2:var _iV_=_aC_;break;
        case 3:var _iV_=_aD_;break;
        case 4:var _iV_=_aE_;break;
        case 5:var _iV_=_aF_;break;
        case 6:var _iV_=_aG_;break;
        case 7:var _iV_=_aH_;break;
        case 8:var _iV_=_aI_;break;
        case 9:var _iV_=_aJ_;break;
        case 10:var _iV_=_aK_;break;
        case 11:var _iV_=_aL_;break;
        default:var _iV_=_aM_}
      return caml_format_int(_iV_,n)}
    function convert_int32(iconv,n)
     {switch(iconv)
       {case 0:var _iU_=_a0_;break;
        case 1:var _iU_=_a1_;break;
        case 2:var _iU_=_a2_;break;
        case 3:var _iU_=_a3_;break;
        case 4:var _iU_=_a4_;break;
        case 5:var _iU_=_a5_;break;
        case 6:var _iU_=_a6_;break;
        case 7:var _iU_=_a7_;break;
        case 8:var _iU_=_a8_;break;
        case 9:var _iU_=_a9_;break;
        case 10:var _iU_=_a__;break;
        case 11:var _iU_=_a$_;break;
        default:var _iU_=_ba_}
      return caml_format_int(_iU_,n)}
    function convert_nativeint(iconv,n)
     {switch(iconv)
       {case 0:var _iT_=_bb_;break;
        case 1:var _iT_=_bc_;break;
        case 2:var _iT_=_bd_;break;
        case 3:var _iT_=_be_;break;
        case 4:var _iT_=_bf_;break;
        case 5:var _iT_=_bg_;break;
        case 6:var _iT_=_bh_;break;
        case 7:var _iT_=_bi_;break;
        case 8:var _iT_=_bj_;break;
        case 9:var _iT_=_bk_;break;
        case 10:var _iT_=_bl_;break;
        case 11:var _iT_=_bm_;break;
        default:var _iT_=_bn_}
      return caml_format_int(_iT_,n)}
    function convert_int64(iconv,n)
     {switch(iconv)
       {case 0:var _iS_=_aN_;break;
        case 1:var _iS_=_aO_;break;
        case 2:var _iS_=_aP_;break;
        case 3:var _iS_=_aQ_;break;
        case 4:var _iS_=_aR_;break;
        case 5:var _iS_=_aS_;break;
        case 6:var _iS_=_aT_;break;
        case 7:var _iS_=_aU_;break;
        case 8:var _iS_=_aV_;break;
        case 9:var _iS_=_aW_;break;
        case 10:var _iS_=_aX_;break;
        case 11:var _iS_=_aY_;break;
        default:var _iS_=_aZ_}
      return caml_int64_format(_iS_,n)}
    function convert_float(fconv,prec$0,x)
     {if(16 <= fconv)
       {if(17 <= fconv)
         switch(fconv - 17 | 0)
          {case 2:var switch$0=0;break;
           case 0:
           case 3:var sign=43,switch$0=1;break;
           default:var sign=32,switch$0=1}
        else
         var switch$0=0;
        if(! switch$0)var sign=45;
        var s=caml_hexstring_of_float(x,prec$0,sign);
        if(19 <= fconv)
         {var l=caml_ml_bytes_length(s);
          if(0 === l)return s;
          var r=caml_create_bytes(l),_iM_=l - 1 | 0,_iL_=0;
          if(! (_iM_ < 0))
           {var i=_iL_;
            for(;;)
             {var c=caml_string_unsafe_get(s,i);
              if(97 <= c)
               if(122 < c)var switch$1=0;else var _iN_=c - 32 | 0,switch$1=1;
              else
               var switch$1=0;
              if(! switch$1)var _iN_=c;
              caml_string_unsafe_set(r,i,_iN_);
              var _iO_=i + 1 | 0;
              if(_iM_ !== i){var i=_iO_;continue}
              break}}
          return r}
        return s}
      if(15 === fconv)
       var _iP_=_bo_;
      else
       {var prec=abs(prec$0);
        switch(fconv)
         {case 15:var symb=70;break;
          case 0:
          case 1:
          case 2:var symb=102;break;
          case 3:
          case 4:
          case 5:var symb=101;break;
          case 6:
          case 7:
          case 8:var symb=69;break;
          case 9:
          case 10:
          case 11:var symb=103;break;
          case 12:
          case 13:
          case 14:var symb=71;break;
          case 16:
          case 17:
          case 18:var symb=104;break;
          default:var symb=72}
        var buf=buffer_create(16);
        buffer_add_char(buf,37);
        switch(fconv)
         {case 1:
          case 4:
          case 7:
          case 10:
          case 13:
          case 17:
          case 20:buffer_add_char(buf,43);break;
          case 2:
          case 5:
          case 8:
          case 11:
          case 14:
          case 18:
          case 21:buffer_add_char(buf,32);break
          }
        buffer_add_char(buf,46);
        buffer_add_string(buf,caml_new_string("" + prec));
        buffer_add_char(buf,symb);
        var _iP_=buffer_contents(buf)}
      var str=caml_format_float(_iP_,x);
      if(15 === fconv)
       {var len=caml_ml_string_length(str),match$0=caml_classify_float(x);
        if(3 === match$0)return x < 0?_bp_:_bq_;
        if(4 <= match$0)return _br_;
        var i$0=0;
        for(;;)
         {if(i$0 === len)
           var _iR_=0;
          else
           {var
             match=caml_string_get(str,i$0),
             _iQ_=match - 46 | 0,
             switch$2=
              23 < _iQ_ >>> 0?55 === _iQ_?1:0:21 < (_iQ_ - 1 | 0) >>> 0?1:0;
            if(! switch$2){var i$1=i$0 + 1 | 0,i$0=i$1;continue}
            var _iR_=1}
          return _iR_?str:_a_(str,_bs_)}}
      return str}
    function make_int_padding_precision(k,o,acc,fmt,pad,match,trans,iconv)
     {if(typeof pad === "number")
       {if(typeof match === "number")
         return 0 === match
                 ?function(x)
                   {var str=caml_call2(trans,iconv,x);
                    return make_printf(k,o,[4,acc,str],fmt)}
                 :function(p,x)
                   {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
                    return make_printf(k,o,[4,acc,str],fmt)};
        var p=match[1];
        return function(x)
         {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
          return make_printf(k,o,[4,acc,str],fmt)}}
      else
       {if(0 === pad[0])
         {var _iI_=pad[2],_iJ_=pad[1];
          if(typeof match === "number")
           return 0 === match
                   ?function(x)
                     {var str=fix_padding(_iJ_,_iI_,caml_call2(trans,iconv,x));
                      return make_printf(k,o,[4,acc,str],fmt)}
                   :function(p,x)
                     {var
                       str=
                        fix_padding
                         (_iJ_,_iI_,fix_int_precision(p,caml_call2(trans,iconv,x)));
                      return make_printf(k,o,[4,acc,str],fmt)};
          var p$0=match[1];
          return function(x)
           {var
             str=
              fix_padding
               (_iJ_,_iI_,fix_int_precision(p$0,caml_call2(trans,iconv,x)));
            return make_printf(k,o,[4,acc,str],fmt)}}
        var _iK_=pad[1];
        if(typeof match === "number")
         return 0 === match
                 ?function(w,x)
                   {var str=fix_padding(_iK_,w,caml_call2(trans,iconv,x));
                    return make_printf(k,o,[4,acc,str],fmt)}
                 :function(w,p,x)
                   {var
                     str=
                      fix_padding
                       (_iK_,w,fix_int_precision(p,caml_call2(trans,iconv,x)));
                    return make_printf(k,o,[4,acc,str],fmt)};
        var p$1=match[1];
        return function(w,x)
         {var
           str=
            fix_padding
             (_iK_,w,fix_int_precision(p$1,caml_call2(trans,iconv,x)));
          return make_printf(k,o,[4,acc,str],fmt)}}}
    function make_padding(k,o,acc,fmt,pad,trans)
     {if(typeof pad === "number")
       return function(x)
        {var new_acc=[4,acc,caml_call1(trans,x)];
         return make_printf(k,o,new_acc,fmt)};
      else
       {if(0 === pad[0])
         {var width=pad[2],padty=pad[1];
          return function(x)
           {var new_acc=[4,acc,fix_padding(padty,width,caml_call1(trans,x))];
            return make_printf(k,o,new_acc,fmt)}}
        var padty$0=pad[1];
        return function(w,x)
         {var new_acc=[4,acc,fix_padding(padty$0,w,caml_call1(trans,x))];
          return make_printf(k,o,new_acc,fmt)}}}
    function make_printf$0(counter,k,o,acc,fmt)
     {var k$0=k,acc$0=acc,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call2(k$0,o,acc$0);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,o,new_acc,rest)};
          case 1:
           var rest$0=fmt$0[1];
           return function(c)
            {if(40 <= c)
              if(92 === c)
               var str=_i_,switch$0=2;
              else
               var switch$0=127 <= c?0:1;
             else
              if(32 <= c)
               if(39 <= c)var str=_j_,switch$0=2;else var switch$0=1;
              else
               if(14 <= c)
                var switch$0=0;
               else
                switch(c)
                 {case 8:var str=_k_,switch$0=2;break;
                  case 9:var str=_l_,switch$0=2;break;
                  case 10:var str=_m_,switch$0=2;break;
                  case 13:var str=_n_,switch$0=2;break;
                  default:var switch$0=0}
             switch(switch$0)
              {case 0:
                var s=caml_create_bytes(4);
                caml_string_unsafe_set(s,0,92);
                caml_string_unsafe_set(s,1,48 + (c / 100 | 0) | 0);
                caml_string_unsafe_set(s,2,48 + ((c / 10 | 0) % 10 | 0) | 0);
                caml_string_unsafe_set(s,3,48 + (c % 10 | 0) | 0);
                var str=s;
                break;
               case 1:
                var s$0=caml_create_bytes(1);
                caml_string_unsafe_set(s$0,0,c);
                var str=s$0;
                break
               }
             var l=caml_ml_string_length(str),res=make(l + 2 | 0,39);
             caml_blit_string(str,0,res,1,l);
             var new_acc=[4,acc$0,res];
             return make_printf(k$0,o,new_acc,rest$0)};
          case 2:
           var rest$1=fmt$0[2],pad=fmt$0[1];
           return make_padding
                   (k$0,o,acc$0,rest$1,pad,function(str){return str});
          case 3:
           var rest$2=fmt$0[2],pad$0=fmt$0[1];
           return make_padding(k$0,o,acc$0,rest$2,pad$0,string_to_caml_string);
          case 4:
           var rest$3=fmt$0[4],prec=fmt$0[3],pad$1=fmt$0[2],iconv=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$3,pad$1,prec,convert_int,iconv);
          case 5:
           var
            rest$4=fmt$0[4],
            prec$0=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$0=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$4,pad$2,prec$0,convert_int32,iconv$0);
          case 6:
           var
            rest$5=fmt$0[4],
            prec$1=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$1=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$5,pad$3,prec$1,convert_nativeint,iconv$1);
          case 7:
           var
            rest$6=fmt$0[4],
            prec$2=fmt$0[3],
            pad$4=fmt$0[2],
            iconv$2=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$6,pad$4,prec$2,convert_int64,iconv$2);
          case 8:
           var rest$7=fmt$0[4],prec$3=fmt$0[3],pad$5=fmt$0[2],fconv=fmt$0[1];
           if(typeof pad$5 === "number")
            {if(typeof prec$3 === "number")
              return 0 === prec$3
                      ?function(x)
                        {var str=convert_float(fconv,default_float_precision,x);
                         return make_printf(k$0,o,[4,acc$0,str],rest$7)}
                      :function(p,x)
                        {var str=convert_float(fconv,p,x);
                         return make_printf(k$0,o,[4,acc$0,str],rest$7)};
             var p=prec$3[1];
             return function(x)
              {var str=convert_float(fconv,p,x);
               return make_printf(k$0,o,[4,acc$0,str],rest$7)}}
           else
            {if(0 === pad$5[0])
              {var _iF_=pad$5[2],_iG_=pad$5[1];
               if(typeof prec$3 === "number")
                return 0 === prec$3
                        ?function(x)
                          {var
                            str=convert_float(fconv,default_float_precision,x),
                            str$0=fix_padding(_iG_,_iF_,str);
                           return make_printf(k$0,o,[4,acc$0,str$0],rest$7)}
                        :function(p,x)
                          {var str=fix_padding(_iG_,_iF_,convert_float(fconv,p,x));
                           return make_printf(k$0,o,[4,acc$0,str],rest$7)};
               var p$0=prec$3[1];
               return function(x)
                {var str=fix_padding(_iG_,_iF_,convert_float(fconv,p$0,x));
                 return make_printf(k$0,o,[4,acc$0,str],rest$7)}}
             var _iH_=pad$5[1];
             if(typeof prec$3 === "number")
              return 0 === prec$3
                      ?function(w,x)
                        {var
                          str=convert_float(fconv,default_float_precision,x),
                          str$0=fix_padding(_iH_,w,str);
                         return make_printf(k$0,o,[4,acc$0,str$0],rest$7)}
                      :function(w,p,x)
                        {var str=fix_padding(_iH_,w,convert_float(fconv,p,x));
                         return make_printf(k$0,o,[4,acc$0,str],rest$7)};
             var p$1=prec$3[1];
             return function(w,x)
              {var str=fix_padding(_iH_,w,convert_float(fconv,p$1,x));
               return make_printf(k$0,o,[4,acc$0,str],rest$7)}}
          case 9:
           var rest$8=fmt$0[2],pad$6=fmt$0[1];
           return make_padding(k$0,o,acc$0,rest$8,pad$6,string_of_bool);
          case 10:
           var fmt$1=fmt$0[1],acc$1=[7,acc$0],acc$0=acc$1,fmt$0=fmt$1;
           continue;
          case 11:
           var
            fmt$2=fmt$0[2],
            str=fmt$0[1],
            acc$2=[2,acc$0,str],
            acc$0=acc$2,
            fmt$0=fmt$2;
           continue;
          case 12:
           var
            fmt$3=fmt$0[2],
            chr=fmt$0[1],
            acc$3=[3,acc$0,chr],
            acc$0=acc$3,
            fmt$0=fmt$3;
           continue;
          case 13:
           var rest$9=fmt$0[3],sub_fmtty=fmt$0[2],buf=buffer_create(16);
           bprint_fmtty(buf,sub_fmtty);
           var ty=buffer_contents(buf);
           return function(str)
            {return make_printf(k$0,o,[4,acc$0,ty],rest$9)};
          case 14:
           var rest$10=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var fmt=param[1];
             return make_printf
                     (k$0,o,acc$0,concat_fmt(recast(fmt,fmtty),rest$10))};
          case 15:
           var rest$11=fmt$0[1];
           return function(f,x)
            {return make_printf
                     (k$0,
                      o,
                      [6,acc$0,function(o){return caml_call2(f,o,x)}],
                      rest$11)};
          case 16:
           var rest$12=fmt$0[1];
           return function(f){return make_printf(k$0,o,[6,acc$0,f],rest$12)};
          case 17:
           var
            fmt$4=fmt$0[2],
            fmting_lit=fmt$0[1],
            acc$4=[0,acc$0,fmting_lit],
            acc$0=acc$4,
            fmt$0=fmt$4;
           continue;
          case 18:
           var _iD_=fmt$0[1];
           if(0 === _iD_[0])
            {var
              rest$13=fmt$0[2],
              match=_iD_[1],
              fmt$5=match[1],
              k$3=
               function(acc,k,rest)
                {function k$0(koc,kacc)
                  {return make_printf(k,koc,[1,acc,[0,kacc]],rest)}
                 return k$0},
              k$1=k$3(acc$0,k$0,rest$13),
              k$0=k$1,
              acc$0=0,
              fmt$0=fmt$5;
             continue}
           var
            rest$14=fmt$0[2],
            match$0=_iD_[1],
            fmt$6=match$0[1],
            k$4=
             function(acc,k,rest)
              {function k$0(koc,kacc)
                {return make_printf(k,koc,[1,acc,[1,kacc]],rest)}
               return k$0},
            k$2=k$4(acc$0,k$0,rest$14),
            k$0=k$2,
            acc$0=0,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_bt_];
          case 20:
           var rest$15=fmt$0[3],new_acc=[8,acc$0,_bu_];
           return function(param){return make_printf(k$0,o,new_acc,rest$15)};
          case 21:
           var rest$16=fmt$0[2];
           return function(n)
            {var new_acc=[4,acc$0,caml_format_int(_bv_,n)];
             return make_printf(k$0,o,new_acc,rest$16)};
          case 22:
           var rest$17=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];
             return make_printf(k$0,o,new_acc,rest$17)};
          case 23:
           var rest$18=fmt$0[2],ign=fmt$0[1];
           if(counter < 50)
            {var counter$1=counter + 1 | 0;
             return make_ignored_param$0(counter$1,k$0,o,acc$0,ign,rest$18)}
           return caml_trampoline_return
                   (make_ignored_param$0,[0,k$0,o,acc$0,ign,rest$18]);
          default:
           var
            rest$19=fmt$0[3],
            f=fmt$0[2],
            arity=fmt$0[1],
            _iE_=caml_call1(f,0);
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return make_custom$0(counter$0,k$0,o,acc$0,rest$19,arity,_iE_)}
           return caml_trampoline_return
                   (make_custom$0,[0,k$0,o,acc$0,rest$19,arity,_iE_])}}
    function make_ignored_param$0(counter,k,o,acc,ign,fmt)
     {if(typeof ign === "number")
       switch(ign)
        {case 0:
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return make_invalid_arg(counter$0,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt]);
         case 1:
          if(counter < 50)
           {var counter$1=counter + 1 | 0;
            return make_invalid_arg(counter$1,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt]);
         case 2:throw [0,Assert_failure,_bw_];
         default:
          if(counter < 50)
           {var counter$2=counter + 1 | 0;
            return make_invalid_arg(counter$2,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt])}
      else
       switch(ign[0])
        {case 0:
          if(counter < 50)
           {var counter$3=counter + 1 | 0;
            return make_invalid_arg(counter$3,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt]);
         case 1:
          if(counter < 50)
           {var counter$4=counter + 1 | 0;
            return make_invalid_arg(counter$4,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt]);
         case 2:
          if(counter < 50)
           {var counter$5=counter + 1 | 0;
            return make_invalid_arg(counter$5,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt]);
         case 3:
          if(counter < 50)
           {var counter$6=counter + 1 | 0;
            return make_invalid_arg(counter$6,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt]);
         case 4:
          if(counter < 50)
           {var counter$7=counter + 1 | 0;
            return make_invalid_arg(counter$7,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt]);
         case 5:
          if(counter < 50)
           {var counter$8=counter + 1 | 0;
            return make_invalid_arg(counter$8,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt]);
         case 6:
          if(counter < 50)
           {var counter$9=counter + 1 | 0;
            return make_invalid_arg(counter$9,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt]);
         case 7:
          if(counter < 50)
           {var counter$10=counter + 1 | 0;
            return make_invalid_arg(counter$10,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt]);
         case 8:
          if(counter < 50)
           {var counter$11=counter + 1 | 0;
            return make_invalid_arg(counter$11,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt]);
         case 9:
          var fmtty=ign[2];
          if(counter < 50)
           {var counter$14=counter + 1 | 0;
            return make_from_fmtty$0(counter$14,k,o,acc,fmtty,fmt)}
          return caml_trampoline_return
                  (make_from_fmtty$0,[0,k,o,acc,fmtty,fmt]);
         case 10:
          if(counter < 50)
           {var counter$12=counter + 1 | 0;
            return make_invalid_arg(counter$12,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt]);
         default:
          if(counter < 50)
           {var counter$13=counter + 1 | 0;
            return make_invalid_arg(counter$13,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt])}}
    function make_from_fmtty$0(counter,k,o,acc,fmtty,fmt)
     {if(typeof fmtty === "number")
       {if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return make_invalid_arg(counter$0,k,o,acc,fmt)}
        return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt])}
      else
       switch(fmtty[0])
        {case 0:
          var rest=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest,fmt)};
         case 1:
          var rest$0=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$0,fmt)};
         case 2:
          var rest$1=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$1,fmt)};
         case 3:
          var rest$2=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$2,fmt)};
         case 4:
          var rest$3=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$3,fmt)};
         case 5:
          var rest$4=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$4,fmt)};
         case 6:
          var rest$5=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$5,fmt)};
         case 7:
          var rest$6=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$6,fmt)};
         case 8:
          var rest$7=fmtty[2];
          return function(param){return make_from_fmtty(k,o,acc,rest$7,fmt)};
         case 9:
          var
           rest$8=fmtty[3],
           ty2=fmtty[2],
           ty1=fmtty[1],
           ty=trans(symm(ty1),ty2);
          return function(param)
           {return make_from_fmtty(k,o,acc,concat_fmtty(ty,rest$8),fmt)};
         case 10:
          var rest$9=fmtty[1];
          return function(param,_iC_)
           {return make_from_fmtty(k,o,acc,rest$9,fmt)};
         case 11:
          var rest$10=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$10,fmt)};
         case 12:
          var rest$11=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$11,fmt)};
         case 13:throw [0,Assert_failure,_bx_];
         default:throw [0,Assert_failure,_by_]}}
    function make_invalid_arg(counter,k,o,acc,fmt)
     {var _iB_=[8,acc,_bz_];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,o,_iB_,fmt)}
      return caml_trampoline_return(make_printf$0,[0,k,o,_iB_,fmt])}
    function make_custom$0(counter,k,o,acc,rest,arity,f)
     {if(arity)
       {var arity$0=arity[1];
        return function(x)
         {return make_custom(k,o,acc,rest,arity$0,caml_call1(f,x))}}
      var _iA_=[4,acc,f];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,o,_iA_,rest)}
      return caml_trampoline_return(make_printf$0,[0,k,o,_iA_,rest])}
    function make_printf(k,o,acc,fmt)
     {return caml_trampoline(make_printf$0(0,k,o,acc,fmt))}
    function make_ignored_param(k,o,acc,ign,fmt)
     {return caml_trampoline(make_ignored_param$0(0,k,o,acc,ign,fmt))}
    function make_from_fmtty(k,o,acc,fmtty,fmt)
     {return caml_trampoline(make_from_fmtty$0(0,k,o,acc,fmtty,fmt))}
    function make_custom(k,o,acc,rest,arity,f)
     {return caml_trampoline(make_custom$0(0,k,o,acc,rest,arity,f))}
    function fn_of_padding_precision(k,o,fmt,pad,prec)
     {if(typeof pad === "number")
       {if(typeof prec === "number")
         {if(0 === prec)
           {var _h8_=make_iprintf(k,o,fmt);return function(_io_){return _h8_}}
          var _h9_=make_iprintf(k,o,fmt),_h__=function(_in_){return _h9_};
          return function(_im_){return _h__}}
        var _h$_=make_iprintf(k,o,fmt);
        return function(_il_){return _h$_}}
      else
       {if(0 === pad[0])
         {if(typeof prec === "number")
           {if(0 === prec)
             {var _ia_=make_iprintf(k,o,fmt);
              return function(_iz_){return _ia_}}
            var _ib_=make_iprintf(k,o,fmt),_ic_=function(_iy_){return _ib_};
            return function(_ix_){return _ic_}}
          var _id_=make_iprintf(k,o,fmt);
          return function(_iw_){return _id_}}
        if(typeof prec === "number")
         {if(0 === prec)
           {var _ie_=make_iprintf(k,o,fmt),_if_=function(_iv_){return _ie_};
            return function(_iu_){return _if_}}
          var
           _ig_=make_iprintf(k,o,fmt),
           _ih_=function(_it_){return _ig_},
           _ii_=function(_is_){return _ih_};
          return function(_ir_){return _ii_}}
        var _ij_=make_iprintf(k,o,fmt),_ik_=function(_iq_){return _ij_};
        return function(_ip_){return _ik_}}}
    function make_iprintf$0(counter,k,o,fmt)
     {var k$0=k,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call1(k$0,o);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1],_hn_=make_iprintf(k$0,o,rest);
           return function(_h7_){return _hn_};
          case 1:
           var rest$0=fmt$0[1],_ho_=make_iprintf(k$0,o,rest$0);
           return function(_h6_){return _ho_};
          case 2:
           var _hp_=fmt$0[1];
           if(typeof _hp_ === "number")
            {var rest$1=fmt$0[2],_hq_=make_iprintf(k$0,o,rest$1);
             return function(_h2_){return _hq_}}
           else
            {if(0 === _hp_[0])
              {var rest$2=fmt$0[2],_hr_=make_iprintf(k$0,o,rest$2);
               return function(_h5_){return _hr_}}
             var
              rest$3=fmt$0[2],
              _hs_=make_iprintf(k$0,o,rest$3),
              _ht_=function(_h4_){return _hs_};
             return function(_h3_){return _ht_}}
          case 3:
           var _hu_=fmt$0[1];
           if(typeof _hu_ === "number")
            {var rest$4=fmt$0[2],_hv_=make_iprintf(k$0,o,rest$4);
             return function(_hY_){return _hv_}}
           else
            {if(0 === _hu_[0])
              {var rest$5=fmt$0[2],_hw_=make_iprintf(k$0,o,rest$5);
               return function(_h1_){return _hw_}}
             var
              rest$6=fmt$0[2],
              _hx_=make_iprintf(k$0,o,rest$6),
              _hy_=function(_h0_){return _hx_};
             return function(_hZ_){return _hy_}}
          case 4:
           var rest$7=fmt$0[4],prec=fmt$0[3],pad=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$7,pad,prec);
          case 5:
           var rest$8=fmt$0[4],prec$0=fmt$0[3],pad$0=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$8,pad$0,prec$0);
          case 6:
           var rest$9=fmt$0[4],prec$1=fmt$0[3],pad$1=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$9,pad$1,prec$1);
          case 7:
           var rest$10=fmt$0[4],prec$2=fmt$0[3],pad$2=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$10,pad$2,prec$2);
          case 8:
           var rest$11=fmt$0[4],prec$3=fmt$0[3],pad$3=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$11,pad$3,prec$3);
          case 9:
           var _hz_=fmt$0[1];
           if(typeof _hz_ === "number")
            {var rest$12=fmt$0[2],_hA_=make_iprintf(k$0,o,rest$12);
             return function(_hU_){return _hA_}}
           else
            {if(0 === _hz_[0])
              {var rest$13=fmt$0[2],_hB_=make_iprintf(k$0,o,rest$13);
               return function(_hX_){return _hB_}}
             var
              rest$14=fmt$0[2],
              _hC_=make_iprintf(k$0,o,rest$14),
              _hD_=function(_hW_){return _hC_};
             return function(_hV_){return _hD_}}
          case 10:var fmt$1=fmt$0[1],fmt$0=fmt$1;continue;
          case 11:var fmt$2=fmt$0[2],fmt$0=fmt$2;continue;
          case 12:var fmt$3=fmt$0[2],fmt$0=fmt$3;continue;
          case 13:
           var rest$15=fmt$0[3],_hE_=make_iprintf(k$0,o,rest$15);
           return function(_hT_){return _hE_};
          case 14:
           var rest$16=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var fmt=param[1];
             return make_iprintf(k$0,o,concat_fmt(recast(fmt,fmtty),rest$16))};
          case 15:
           var
            rest$17=fmt$0[1],
            _hF_=make_iprintf(k$0,o,rest$17),
            _hG_=function(_hS_){return _hF_};
           return function(_hR_){return _hG_};
          case 16:
           var rest$18=fmt$0[1],_hH_=make_iprintf(k$0,o,rest$18);
           return function(_hQ_){return _hH_};
          case 17:var fmt$4=fmt$0[2],fmt$0=fmt$4;continue;
          case 18:
           var _hI_=fmt$0[1];
           if(0 === _hI_[0])
            {var
              rest$19=fmt$0[2],
              match=_hI_[1],
              fmt$5=match[1],
              k$3=
               function(k,rest)
                {function k$0(koc){return make_iprintf(k,koc,rest)}return k$0},
              k$1=k$3(k$0,rest$19),
              k$0=k$1,
              fmt$0=fmt$5;
             continue}
           var
            rest$20=fmt$0[2],
            match$0=_hI_[1],
            fmt$6=match$0[1],
            k$4=
             function(k,rest)
              {function k$0(koc){return make_iprintf(k,koc,rest)}return k$0},
            k$2=k$4(k$0,rest$20),
            k$0=k$2,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_bA_];
          case 20:
           var rest$21=fmt$0[3],_hJ_=make_iprintf(k$0,o,rest$21);
           return function(_hP_){return _hJ_};
          case 21:
           var rest$22=fmt$0[2],_hK_=make_iprintf(k$0,o,rest$22);
           return function(_hO_){return _hK_};
          case 22:
           var rest$23=fmt$0[1],_hL_=make_iprintf(k$0,o,rest$23);
           return function(_hN_){return _hL_};
          case 23:
           var rest$24=fmt$0[2],ign=fmt$0[1],_hM_=0;
           return make_ignored_param
                   (function(x,param){return caml_call1(k$0,x)},
                    o,
                    _hM_,
                    ign,
                    rest$24);
          default:
           var rest$25=fmt$0[3],arity=fmt$0[1];
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return fn_of_custom_arity$0(counter$0,k$0,o,rest$25,arity)}
           return caml_trampoline_return
                   (fn_of_custom_arity$0,[0,k$0,o,rest$25,arity])}}
    function fn_of_custom_arity$0(counter,k,o,fmt,param)
     {if(param)
       {var arity=param[1],_hl_=fn_of_custom_arity(k,o,fmt,arity);
        return function(_hm_){return _hl_}}
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_iprintf$0(counter$0,k,o,fmt)}
      return caml_trampoline_return(make_iprintf$0,[0,k,o,fmt])}
    function make_iprintf(k,o,fmt)
     {return caml_trampoline(make_iprintf$0(0,k,o,fmt))}
    function fn_of_custom_arity(k,o,fmt,param)
     {return caml_trampoline(fn_of_custom_arity$0(0,k,o,fmt,param))}
    function output_acc(o,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           output_acc(o,p);
           return output_string(o,s);
          case 1:
           var _hj_=acc$0[2],_hk_=acc$0[1];
           if(0 === _hj_[0])
            {var acc$1=_hj_[1];
             output_acc(o,_hk_);
             output_string(o,_bB_);
             var acc$0=acc$1;
             continue}
           var acc$2=_hj_[1];
           output_acc(o,_hk_);
           output_string(o,_bC_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           output_acc(o,p$2);
           return caml_call1(f,o);
          case 7:var p$3=acc$0[1];output_acc(o,p$3);return caml_ml_flush(o);
          case 8:
           var msg=acc$0[2],p$4=acc$0[1];
           output_acc(o,p$4);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           output_acc(o,p$0);
           return output_string(o,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
           output_acc(o,p$1);
           return caml_ml_output_char(o,c)}}
    function strput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           strput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _hh_=acc$0[2],_hi_=acc$0[1];
           if(0 === _hh_[0])
            {var acc$1=_hh_[1];
             strput_acc(b,_hi_);
             add_string(b,_bD_);
             var acc$0=acc$1;
             continue}
           var acc$2=_hh_[1];
           strput_acc(b,_hi_);
           add_string(b,_bE_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           strput_acc(b,p$2);
           return add_string(b,caml_call1(f,0));
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           strput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           strput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
           strput_acc(b,p$1);
           var pos=b[2];
           if(b[3] <= pos)resize(b,1);
           caml_string_unsafe_set(b[1],pos,c);
           b[2] = pos + 1 | 0;
           return 0}}
    function fprintf(oc,fmt$0)
     {var fmt=fmt$0[1],_hg_=0;
      return make_printf
              (function(o,acc){output_acc(o,acc);return 0},oc,_hg_,fmt)}
    function printf(fmt){return fprintf(stdout,fmt)}
    function ksprintf(k,param)
     {var fmt=param[1];
      function k$0(param,acc)
       {var
         n$0=64,
         n=max_string_length < 64?max_string_length:n$0,
         s=caml_create_bytes(n),
         buf=[0,s,0,n,s];
        strput_acc(buf,acc);
        return caml_call1(k,sub_string(buf[1],0,buf[2]))}
      return make_printf(k$0,0,0,fmt)}
    function sprintf(fmt){return ksprintf(function(s){return s},fmt)}
    var printers=[0,0];
    function field(x,i$1)
     {var a=x[i$1 + 1];
      if(1 - (typeof a === "number"))
       {if(caml_obj_tag(a) === 252)return caml_call1(sprintf(_bF_),a);
        if(caml_obj_tag(a) === 253)
         {var s=caml_format_float(_e_,a),l=caml_ml_string_length(s),i=0;
          for(;;)
           {if(l <= i)return _a_(s,_d_);
            var
             match=caml_string_get(s,i),
             switch$0=48 <= match?58 <= match?0:1:45 === match?1:0;
            if(switch$0){var i$0=i + 1 | 0,i=i$0;continue}
            return s}}
        return _bG_}
      return caml_call1(sprintf(_bH_),a)}
    function other_fields(x,i)
     {if(x.length - 1 <= i)return _bI_;
      var _he_=other_fields(x,i + 1 | 0),_hf_=field(x,i);
      return caml_call2(sprintf(_bJ_),_hf_,_he_)}
    function fields(x)
     {var match=x.length - 1;
      if(2 < match >>> 0)
       {var _hb_=other_fields(x,2),_hc_=field(x,1);
        return caml_call2(sprintf(_bK_),_hc_,_hb_)}
      switch(match)
       {case 0:return _bL_;
        case 1:return _bM_;
        default:var _hd_=field(x,1);return caml_call1(sprintf(_bN_),_hd_)}}
    function to_string(x)
     {function conv(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var tl=param$0[2],hd=param$0[1];
            try {var _g$_=caml_call1(hd,x),_g__=_g$_}catch(_ha_){var _g__=0}
            if(_g__){var s=_g__[1];return s}
            var param$0=tl;
            continue}
          if(x === Out_of_memory)return _bO_;
          if(x === Stack_overflow)return _bP_;
          if(x[1] === Match_failure)
           {var match=x[2],char$0=match[3],line=match[2],file=match[1];
            return caml_call5
                    (sprintf(locfmt),file,line,char$0,char$0 + 5 | 0,_bQ_)}
          if(x[1] === Assert_failure)
           {var
             match$0=x[2],
             char$1=match$0[3],
             line$0=match$0[2],
             file$0=match$0[1];
            return caml_call5
                    (sprintf(locfmt),file$0,line$0,char$1,char$1 + 6 | 0,_bR_)}
          if(x[1] === Undefined_recursive_module)
           {var
             match$1=x[2],
             char$2=match$1[3],
             line$1=match$1[2],
             file$1=match$1[1];
            return caml_call5
                    (sprintf(locfmt),file$1,line$1,char$2,char$2 + 6 | 0,_bS_)}
          if(0 === caml_obj_tag(x))
           {var constructor=x[1][1];return _a_(constructor,fields(x))}
          return x[1]}}
      return conv(printers[1])}
    function print_backtrace(outchan)
     {var
       raw_backtrace=caml_get_exception_raw_backtrace(0),
       a=caml_convert_raw_backtrace(raw_backtrace),
       backtrace=[0,a];
      if(backtrace)
       {var _g8_=a.length - 1 - 1 | 0,_g7_=0;
        if(! (_g8_ < 0))
         {var i=_g7_;
          for(;;)
           {var
             slot=caml_check_bound(a,i)[i + 1],
             info$0=
              function(i)
               {function info(is_raise)
                 {return is_raise?0 === i?_bT_:_bU_:0 === i?_bV_:_bW_}
                return info},
             info=info$0(i);
            if(0 === slot[0])
             var
              _g0_=slot[5],
              _g1_=slot[4],
              _g2_=slot[3],
              _g3_=slot[6]?_bX_:_bZ_,
              _g4_=slot[2],
              _g5_=info(slot[1]),
              match=
               [0,caml_call6(sprintf(_bY_),_g5_,_g4_,_g3_,_g2_,_g1_,_g0_)];
            else
             if(slot[1])
              var match=0;
             else
              var _g6_=info(0),match=[0,caml_call1(sprintf(_b0_),_g6_)];
            if(match){var str=match[1];caml_call1(fprintf(outchan,_b1_),str)}
            var _g9_=i + 1 | 0;
            if(_g8_ !== i){var i=_g9_;continue}
            break}}
        return 0}
      return fprintf(outchan,_b2_)}
    function register_printer(fn){printers[1] = [0,fn,printers[1]];return 0}
    function full_init(s,seed)
     {var seed$0=0 === seed.length - 1?[0,0]:seed,l=seed$0.length - 1,i$0=0;
      for(;;)
       {caml_check_bound(s[1],i$0)[i$0 + 1] = i$0;
        var _gZ_=i$0 + 1 | 0;
        if(54 !== i$0){var i$0=_gZ_;continue}
        var accu=[0,_b3_],_gV_=54 + max(55,l) | 0,_gU_=0;
        if(! (_gV_ < 0))
         {var i=_gU_;
          for(;;)
           {var
             j=i % 55 | 0,
             k=caml_mod(i,l),
             x=caml_check_bound(seed$0,k)[k + 1],
             str=_a_(accu[1],caml_new_string("" + x));
            accu[1] = caml_md5_string(str,0,caml_ml_string_length(str));
            var
             _gW_=accu[1],
             _gQ_=caml_string_get(_gW_,3) << 24,
             _gR_=caml_string_get(_gW_,2) << 16,
             _gS_=caml_string_get(_gW_,1) << 8,
             _gT_=((caml_string_get(_gW_,0) + _gS_ | 0) + _gR_ | 0) + _gQ_ | 0,
             _gX_=(caml_check_bound(s[1],j)[j + 1] ^ _gT_) & 1073741823;
            caml_check_bound(s[1],j)[j + 1] = _gX_;
            var _gY_=i + 1 | 0;
            if(_gV_ !== i){var i=_gY_;continue}
            break}}
        s[2] = 0;
        return 0}}
    function make$0(seed)
     {var result=[0,caml_make_vect(55,0),0];
      full_init(result,seed);
      return result}
    function bits(s)
     {s[2] = (s[2] + 1 | 0) % 55 | 0;
      var
       _gN_=s[2],
       curval=caml_check_bound(s[1],_gN_)[_gN_ + 1],
       _gO_=(s[2] + 24 | 0) % 55 | 0,
       newval=
        caml_check_bound(s[1],_gO_)[_gO_ + 1]
        +
        (curval ^ (curval >>> 25 | 0) & 31)
        |
        0,
       newval30=newval & 1073741823,
       _gP_=s[2];
      caml_check_bound(s[1],_gP_)[_gP_ + 1] = newval30;
      return newval30}
    function int$0(s,bound)
     {if(! (1073741823 < bound))
       if(0 < bound)
        for(;;)
         {var r=bits(s),v=caml_mod(r,bound);
          if(((1073741823 - bound | 0) + 1 | 0) < (r - v | 0))continue;
          return v}
      return invalid_arg(_b4_)}
    var default$0=[0,_b5_.slice(),0];
    function int$1(bound){return int$0(default$0,bound)}
    function self_init(param)
     {var seed=caml_sys_random_seed(0);return full_init(default$0,seed)}
    try
     {var _eN_=caml_sys_getenv(_eM_),params=_eN_}
    catch(_gL_)
     {_gL_ = caml_wrap_exception(_gL_);
      if(_gL_ !== Not_found)throw _gL_;
      try
       {var _eL_=caml_sys_getenv(_eK_),_b7_=_eL_}
      catch(_gM_)
       {_gM_ = caml_wrap_exception(_gM_);
        if(_gM_ !== Not_found)throw _gM_;
        var _b7_=_b6_}
      var params=_b7_}
    var
     randomized_default=contains(params,82),
     prng=[246,function(_gK_){return make$0(caml_sys_random_seed(0))}];
    function create$0(opt,initial_size)
     {if(opt)var sth=opt[1],random=sth;else var random=randomized_default;
      var x=16;
      for(;;)
       {if(! (initial_size <= x))
         if(! (max_array_length < (x * 2 | 0)))
          {var x$0=x * 2 | 0,x=x$0;continue}
        if(random)
         var
          _gI_=caml_obj_tag(prng),
          _gJ_=250 === _gI_?prng[1]:246 === _gI_?force_lazy_block(prng):prng,
          seed=bits(_gJ_);
        else
         var seed=0;
        return [0,0,caml_make_vect(x,0),seed,x]}}
    function register_exception(name,exn)
     {var slot=caml_obj_tag(exn) === 248?exn:exn[1];
      return caml_register_named_value(name,slot)}
    try
     {caml_sys_getenv(_eJ_)}
    catch(_gH_)
     {_gH_ = caml_wrap_exception(_gH_);if(_gH_ !== Not_found)throw _gH_}
    try
     {caml_sys_getenv(_eI_)}
    catch(_gG_)
     {_gG_ = caml_wrap_exception(_gG_);if(_gG_ !== Not_found)throw _gG_}
    var
     switch$0=
      caml_string_notequal(os_type,_b8_)
       ?caml_string_notequal(os_type,_b9_)?1:0
       :0;
    caml_fresh_oo_id(0);
    function create$1(param)
     {var seq=[];caml_update_dummy(seq,[0,seq,seq]);return seq}
    var compare$0=caml_compare,Storage_map=_J_([0,compare$0]);
    function state_of_result(param)
     {if(0 === param[0]){var x=param[1];return [0,x]}
      var exn=param[1];
      return [1,exn]}
    function underlying(p)
     {var _gF_=p[1];
      switch(_gF_[0])
       {case 0:return p;
        case 1:return p;
        case 2:return p;
        default:
         var p$0=_gF_[1],p$1=underlying(p$0);
         if(1 - (p$1 === p$0?1:0))p[1] = [3,p$1];
         return p$1}}
    function set_promise_state(p,state){p[1] = state;return p}
    var current_storage=[0,Storage_map[1]];
    function concat_regular_callbacks(l1,l2)
     {return typeof l1 === "number"?l2:typeof l2 === "number"?l1:[0,l1,l2]}
    function clean_up_callback_cells(callbacks)
     {if(typeof callbacks !== "number")
       switch(callbacks[0])
        {case 0:
          var
           l2=callbacks[2],
           l1=callbacks[1],
           l1$0=clean_up_callback_cells(l1),
           l2$0=clean_up_callback_cells(l2);
          return concat_regular_callbacks(l1$0,l2$0);
         case 2:if(! callbacks[1][1])return 0;break
         }
      return callbacks}
    function add_regular_callback_list_node(callbacks,node)
     {var
       _gE_=callbacks[1],
       node$0=typeof _gE_ === "number"?node:[0,node,_gE_];
      callbacks[1] = node$0;
      return 0}
    function add_implicitly_removed_callback(callbacks,f)
     {return add_regular_callback_list_node(callbacks,[1,f])}
    var
     async_exception_hook=
      [0,
       function(exn)
        {prerr_string(_ca_);
         prerr_string(to_string(exn));
         caml_ml_output_char(stderr,10);
         print_backtrace(stderr);
         caml_ml_flush(stderr);
         do_at_exit(0);
         return caml_sys_exit(2)}];
    function handle_with_async_exception_hook(f,v)
     {try
       {var _gD_=caml_call1(f,v);return _gD_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        return caml_call1(async_exception_hook[1],exn)}}
    var Canceled=[248,_cb_,caml_fresh_oo_id(0)];
    function run_callbacks(callbacks,result)
     {if(1 === result[0])
       var _gB_=result[1] === Canceled?1:0,is_canceled=_gB_;
      else
       var is_canceled=0;
      if(is_canceled)
       {var
         _gz_=callbacks[2],
         iter_callback_list$2=
          function(counter,fs,rest)
           {var fs$0=fs,rest$0=rest;
            for(;;)
             if(typeof fs$0 === "number")
              {if(counter < 50)
                {var counter$0=counter + 1 | 0;
                 return iter_list$0(counter$0,rest$0)}
               return caml_trampoline_return(iter_list$0,[0,rest$0])}
             else
              switch(fs$0[0])
               {case 0:
                 var
                  fs$1=fs$0[2],
                  fs$2=fs$0[1],
                  rest$1=[0,fs$1,rest$0],
                  fs$0=fs$2,
                  rest$0=rest$1;
                 continue;
                case 1:
                 var f=fs$0[2],storage=fs$0[1];
                 current_storage[1] = storage;
                 handle_with_async_exception_hook(f,0);
                 if(counter < 50)
                  {var counter$1=counter + 1 | 0;
                   return iter_list$0(counter$1,rest$0)}
                 return caml_trampoline_return(iter_list$0,[0,rest$0]);
                default:
                 var node=fs$0[1];
                 if(node[4])
                  {node[4] = 0;node[1][2] = node[2];node[2][1] = node[1]}
                 if(counter < 50)
                  {var counter$2=counter + 1 | 0;
                   return iter_list$0(counter$2,rest$0)}
                 return caml_trampoline_return(iter_list$0,[0,rest$0])}},
         iter_list$0=
          function(counter,rest)
           {if(rest)
             {var rest$0=rest[2],fs=rest[1];
              if(counter < 50)
               {var counter$0=counter + 1 | 0;
                return iter_callback_list$2(counter$0,fs,rest$0)}
              return caml_trampoline_return
                      (iter_callback_list$2,[0,fs,rest$0])}
            return 0},
         iter_callback_list=
          function(fs,rest)
           {return caml_trampoline(iter_callback_list$2(0,fs,rest))};
        iter_callback_list(_gz_,0)}
      var _gA_=callbacks[1];
      function iter_callback_list$1(counter,fs,rest)
       {var fs$0=fs,rest$0=rest;
        for(;;)
         if(typeof fs$0 === "number")
          {if(counter < 50)
            {var counter$0=counter + 1 | 0;return iter_list(counter$0,rest$0)}
           return caml_trampoline_return(iter_list,[0,rest$0])}
         else
          switch(fs$0[0])
           {case 0:
             var
              fs$1=fs$0[2],
              fs$2=fs$0[1],
              rest$1=[0,fs$1,rest$0],
              fs$0=fs$2,
              rest$0=rest$1;
             continue;
            case 1:
             var f=fs$0[1];
             caml_call1(f,result);
             if(counter < 50)
              {var counter$1=counter + 1 | 0;
               return iter_list(counter$1,rest$0)}
             return caml_trampoline_return(iter_list,[0,rest$0]);
            default:
             var _gC_=fs$0[1][1];
             if(_gC_)
              {var f$0=_gC_[1];
               caml_call1(f$0,result);
               if(counter < 50)
                {var counter$2=counter + 1 | 0;
                 return iter_list(counter$2,rest$0)}
               return caml_trampoline_return(iter_list,[0,rest$0])}
             if(counter < 50)
              {var counter$3=counter + 1 | 0;
               return iter_list(counter$3,rest$0)}
             return caml_trampoline_return(iter_list,[0,rest$0])}}
      function iter_list(counter,rest)
       {if(rest)
         {var rest$0=rest[2],fs=rest[1];
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return iter_callback_list$1(counter$0,fs,rest$0)}
          return caml_trampoline_return(iter_callback_list$1,[0,fs,rest$0])}
        return 0}
      function iter_callback_list$0(fs,rest)
       {return caml_trampoline(iter_callback_list$1(0,fs,rest))}
      return iter_callback_list$0(_gA_,0)}
    var
     current_callback_nesting_depth=[0,0],
     deferred_callbacks=create(0),
     default_maximum_callback_nesting_depth=42;
    function run_in_resolution_loop(f)
     {current_callback_nesting_depth[1]
      =
      current_callback_nesting_depth[1]
      +
      1
      |
      0;
      var storage_snapshot=current_storage[1],result$0=caml_call1(f,0);
      if(1 === current_callback_nesting_depth[1])
       for(;;)
        {if(! is_empty(deferred_callbacks))
          {var
            match=take(deferred_callbacks),
            result=match[2],
            callbacks=match[1];
           run_callbacks(callbacks,result);
           continue}
         break}
      current_callback_nesting_depth[1]
      =
      current_callback_nesting_depth[1]
      -
      1
      |
      0;
      current_storage[1] = storage_snapshot;
      return result$0}
    function resolve
     (allow_deferring$0,maximum_callback_nesting_depth$0,p,result)
     {var match=p[1],callbacks=match[1],p$0=set_promise_state(p,result);
      if(allow_deferring$0)
       var sth=allow_deferring$0[1],allow_deferring=sth;
      else
       var allow_deferring=1;
      if(maximum_callback_nesting_depth$0)
       var
        sth$0=maximum_callback_nesting_depth$0[1],
        maximum_callback_nesting_depth=sth$0;
      else
       var
        maximum_callback_nesting_depth=
         default_maximum_callback_nesting_depth;
      var
       should_defer=
        allow_deferring
         ?maximum_callback_nesting_depth <= current_callback_nesting_depth[1]
           ?1
           :0
         :allow_deferring;
      if(should_defer)
       add([0,callbacks,result],deferred_callbacks);
      else
       run_in_resolution_loop
        (function(param){return run_callbacks(callbacks,result)});
      return p$0}
    function run_callback_or_defer_it(opt,f,if_deferred)
     {if(opt)
       var sth=opt[1],run_immediately_and_ensure_tail_call=sth;
      else
       var run_immediately_and_ensure_tail_call=0;
      if(run_immediately_and_ensure_tail_call)return caml_call1(f,0);
      var should_defer=42 <= current_callback_nesting_depth[1]?1:0;
      if(should_defer)
       {var
         match=caml_call1(if_deferred,0),
         deferred_result=match[3],
         deferred_callback=match[2],
         immediate_result=match[1],
         deferred_record=[0,[1,deferred_callback],0,0,0];
        add([0,deferred_record,deferred_result],deferred_callbacks);
        return immediate_result}
      return run_in_resolution_loop(function(param){return caml_call1(f,0)})}
    function wakeup(r,v)
     {var result$0=[0,v],p=underlying(r),_gy_=p[1];
      switch(_gy_[0])
       {case 1:
         return _gy_[1] === Canceled
                 ?0
                 :caml_call1(ksprintf(invalid_arg,_cd_),api_function_name);
        case 2:
         var result=state_of_result(result$0);
         resolve(_ce_,0,p,result);
         return 0;
        default:
         return caml_call1(ksprintf(invalid_arg,_cc_),api_function_name)}}
    function wakeup_later_general(api_function_name,match,result)
     {var p=underlying(match),_gx_=p[1];
      switch(_gx_[0])
       {case 1:
         return _gx_[1] === Canceled
                 ?0
                 :caml_call1(ksprintf(invalid_arg,_cg_),api_function_name);
        case 2:
         var result$0=state_of_result(result);
         resolve(0,_ch_,p,result$0);
         return 0;
        default:
         return caml_call1(ksprintf(invalid_arg,_cf_),api_function_name)}}
    function wakeup_later_exn(r,exn)
     {return wakeup_later_general(_cj_,r,[1,exn])}
    function return$0(v){return [0,[0,v]]}
    function fail(exn){return [0,[1,exn]]}
    var return_unit=return$0(0),return_none=return$0(0);
    function new_pending(how_to_cancel)
     {var state=[2,[0,0,0,how_to_cancel,0]];return [0,state]}
    function task(param){var p=new_pending(1);return [0,p,p]}
    function make_into_proxy(outer_promise,user_provided_promise)
     {var p=underlying(user_provided_promise);
      if(p === outer_promise)return p;
      var _gw_=p[1];
      switch(_gw_[0])
       {case 1:return resolve(_cl_,0,outer_promise,p[1]);
        case 2:
         var
          p_callbacks=_gw_[1],
          match=outer_promise[1],
          outer_callbacks=match[1],
          regular_callbacks=
           concat_regular_callbacks(outer_callbacks[1],p_callbacks[1]),
          cleanups_deferred=outer_callbacks[4] + p_callbacks[4] | 0;
         if(42 < cleanups_deferred)
          var
           regular_callbacks$0=clean_up_callback_cells(regular_callbacks),
           cleanups_deferred$0=0;
         else
          var
           regular_callbacks$0=regular_callbacks,
           cleanups_deferred$0=cleanups_deferred;
         var
          _gu_=p_callbacks[2],
          _gv_=outer_callbacks[2],
          cancel_callbacks=
           typeof _gv_ === "number"
            ?_gu_
            :typeof _gu_ === "number"?_gv_:[0,_gv_,_gu_];
         outer_callbacks[1] = regular_callbacks$0;
         outer_callbacks[2] = cancel_callbacks;
         outer_callbacks[4] = cleanups_deferred$0;
         outer_callbacks[3] = p_callbacks[3];
         set_promise_state(p,[3,outer_promise]);
         return outer_promise;
        default:return resolve(_ck_,0,outer_promise,p[1])}}
    function bind(match,f)
     {var p=underlying(match);
      function create_result_promise_and_callback_if_deferred(param)
       {var match=new_pending([0,p]),saved_storage=current_storage[1];
        function callback(p_result)
         {if(1 === p_result[0])
           {var p$1=underlying(match);resolve(_cm_,0,p$1,p_result);return 0}
          var v=p_result[1];
          current_storage[1] = saved_storage;
          try
           {var _gt_=caml_call1(f,v),p=_gt_}
          catch(exn){exn = caml_wrap_exception(exn);var p=fail(exn)}
          var p$0=underlying(match);
          make_into_proxy(p$0,p);
          return 0}
        return [0,match,callback]}
      var _gr_=p[1];
      switch(_gr_[0])
       {case 1:return [0,_gr_];
        case 2:
         var
          p_callbacks=_gr_[1],
          match$0=create_result_promise_and_callback_if_deferred(0),
          callback=match$0[2],
          p$0=match$0[1];
         add_implicitly_removed_callback(p_callbacks,callback);
         return p$0;
        default:
         var
          v=_gr_[1],
          _gs_=
           function(param)
            {var
              match=create_result_promise_and_callback_if_deferred(0),
              callback=match[2],
              p$0=match[1];
             return [0,p$0,callback,p[1]]};
         return run_callback_or_defer_it
                 (_cn_,function(param){return caml_call1(f,v)},_gs_)}}
    function backtrace_bind(add_loc,match,f)
     {var p=underlying(match);
      function create_result_promise_and_callback_if_deferred(param)
       {var match=new_pending([0,p]),saved_storage=current_storage[1];
        function callback(p_result)
         {if(1 === p_result[0])
           {var exn=p_result[1],p$1=underlying(match);
            resolve(_co_,0,p$1,[1,caml_call1(add_loc,exn)]);
            return 0}
          var v=p_result[1];
          current_storage[1] = saved_storage;
          try
           {var _gq_=caml_call1(f,v),p=_gq_}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            var p=fail(caml_call1(add_loc,exn))}
          var p$0=underlying(match);
          make_into_proxy(p$0,p);
          return 0}
        return [0,match,callback]}
      var _go_=p[1];
      switch(_go_[0])
       {case 1:var exn=_go_[1];return [0,[1,caml_call1(add_loc,exn)]];
        case 2:
         var
          p_callbacks=_go_[1],
          match$0=create_result_promise_and_callback_if_deferred(0),
          callback=match$0[2],
          p$0=match$0[1];
         add_implicitly_removed_callback(p_callbacks,callback);
         return p$0;
        default:
         var
          v=_go_[1],
          _gp_=
           function(param)
            {var
              match=create_result_promise_and_callback_if_deferred(0),
              callback=match[2],
              p$0=match[1];
             return [0,p$0,callback,p[1]]};
         return run_callback_or_defer_it
                 (_cp_,function(param){return caml_call1(f,v)},_gp_)}}
    function backtrace_catch(add_loc,f,h)
     {try
       {var _gm_=caml_call1(f,0),p=_gm_}
      catch(exn){exn = caml_wrap_exception(exn);var p=fail(exn)}
      var p$0=underlying(p);
      function create_result_promise_and_callback_if_deferred(param)
       {var match=new_pending([0,p$0]),saved_storage=current_storage[1];
        function callback(p_result)
         {if(1 === p_result[0])
           {var exn=p_result[1];
            current_storage[1] = saved_storage;
            try
             {var _gn_=caml_call1(h,exn),p$0=_gn_}
            catch(exn)
             {exn = caml_wrap_exception(exn);
              var p$0=fail(caml_call1(add_loc,exn))}
            var p$1=underlying(match);
            make_into_proxy(p$1,p$0);
            return 0}
          var p=underlying(match);
          resolve(_cq_,0,p,p_result);
          return 0}
        return [0,match,callback]}
      var _gk_=p$0[1];
      switch(_gk_[0])
       {case 1:
         var
          exn=_gk_[1],
          _gl_=
           function(param)
            {var
              match=create_result_promise_and_callback_if_deferred(0),
              callback=match[2],
              p=match[1];
             return [0,p,callback,p$0[1]]};
         return run_callback_or_defer_it
                 (_cr_,
                  function(param)
                   {return caml_call1(h,caml_call1(add_loc,exn))},
                  _gl_);
        case 2:
         var
          p_callbacks=_gk_[1],
          match=create_result_promise_and_callback_if_deferred(0),
          callback=match[2],
          p$1=match[1];
         add_implicitly_removed_callback(p_callbacks,callback);
         return p$1;
        default:return p$0}}
    function try_bind(f$0,f,h)
     {try
       {var _gh_=caml_call1(f$0,0),p=_gh_}
      catch(exn){exn = caml_wrap_exception(exn);var p=fail(exn)}
      var p$0=underlying(p);
      function create_result_promise_and_callback_if_deferred(param)
       {var match=new_pending([0,p$0]),saved_storage=current_storage[1];
        function callback(p_result)
         {if(1 === p_result[0])
           {var exn=p_result[1];
            current_storage[1] = saved_storage;
            try
             {var _gj_=caml_call1(h,exn),p$1=_gj_}
            catch(exn){exn = caml_wrap_exception(exn);var p$1=fail(exn)}
            var p$2=underlying(match);
            make_into_proxy(p$2,p$1);
            return 0}
          var v=p_result[1];
          current_storage[1] = saved_storage;
          try
           {var _gi_=caml_call1(f,v),p=_gi_}
          catch(exn){exn = caml_wrap_exception(exn);var p=fail(exn)}
          var p$0=underlying(match);
          make_into_proxy(p$0,p);
          return 0}
        return [0,match,callback]}
      var _ge_=p$0[1];
      switch(_ge_[0])
       {case 1:
         var
          exn=_ge_[1],
          _gg_=
           function(param)
            {var
              match=create_result_promise_and_callback_if_deferred(0),
              callback=match[2],
              p=match[1];
             return [0,p,callback,p$0[1]]};
         return run_callback_or_defer_it
                 (_ct_,function(param){return caml_call1(h,exn)},_gg_);
        case 2:
         var
          p_callbacks=_ge_[1],
          match=create_result_promise_and_callback_if_deferred(0),
          callback=match[2],
          p$1=match[1];
         add_implicitly_removed_callback(p_callbacks,callback);
         return p$1;
        default:
         var
          v=_ge_[1],
          _gf_=
           function(param)
            {var
              match=create_result_promise_and_callback_if_deferred(0),
              callback=match[2],
              p=match[1];
             return [0,p,callback,p$0[1]]};
         return run_callback_or_defer_it
                 (_cs_,function(param){return caml_call1(f,v)},_gf_)}}
    function nth_resolved(ps,n)
     {var ps$0=ps,n$0=n;
      for(;;)
       {if(ps$0)
         {var ps$1=ps$0[2],p=ps$0[1];
          switch(underlying(p)[1][0])
           {case 1:
             if(0 < n$0){var n$2=n$0 - 1 | 0,ps$0=ps$1,n$0=n$2;continue}
             return p;
            case 2:var ps$0=ps$1;continue;
            default:
             if(0 < n$0){var n$1=n$0 - 1 | 0,ps$0=ps$1,n$0=n$1;continue}
             return p}}
        throw [0,Assert_failure,_cw_]}}
    var
     prng$0=[246,function(_gd_){return make$0([0])}],
     pause_hook=[0,function(_gc_){return 0}],
     s1=create$1(0),
     _cy_=[0,0];
    function wakeup_paused(param)
     {if(s1[2] === s1){_cy_[1] = 0;return 0}
      var seq=create$1(0);
      seq[1][2] = s1[2];
      s1[2][1] = seq[1];
      seq[1] = s1[1];
      s1[1][2] = seq;
      s1[1] = s1;
      s1[2] = s1;
      _cy_[1] = 0;
      var curr=seq[2];
      for(;;)
       {var _gb_=curr !== seq?1:0;
        if(_gb_)
         {if(curr[4])wakeup(curr[3],0);
          var curr$0=curr[2],curr=curr$0;
          continue}
        return _gb_}}
    function register_pause_notifier(f){pause_hook[1] = f;return 0}
    var
     window=joo_global_object,
     undefined$0=undefined,
     array_constructor=window.Array,
     Error$0=[248,_cz_,caml_fresh_oo_id(0)];
    register_exception(_cA_,[0,Error$0,{}]);
    (function(exn){throw exn});
    register_printer
     (function(param)
       {if(param[1] === Error$0)
         {var e=param[2];return [0,caml_js_to_string(e.toString())]}
        return 0});
    register_printer
     (function(e)
       {return e instanceof array_constructor
                ?0
                :[0,caml_js_to_string(e.toString())]});
    caml_fresh_oo_id(0);
    var html_element=window.HTMLElement;
    html_element === undefined$0;
    var json=caml_json(0),overflow_limit=2147483e3;
    function reviver(this$0,key,value)
     {return typeof value == typeof "foo"?caml_js_to_byte_string(value):value}
    var input_reviver=caml_js_wrap_meth_callback(reviver);
    function unsafe_input(s){return json.parse(s,input_reviver)}
    var mlString_constr=dummy_string.constructor;
    function output_reviver(key,value)
     {return value instanceof mlString_constr
              ?caml_bytes_of_string(value)
              :value}
    function output(obj){return json.stringify(obj,output_reviver)}
    var console=caml_js_get_console(0);
    function wakeup$0(param)
     {return 1 === param
              ?(window.setTimeout(caml_js_wrap_callback(wakeup_paused),0),0)
              :0}
    register_pause_notifier(wakeup$0);
    function prerr_string$0(s){return console.log(s.toString())}
    async_exception_hook[1]
    =
    function(exn)
     {prerr_string$0(_cB_);
      prerr_string$0(to_string(exn));
      return print_backtrace(stderr)};
    var
     OMQ_Exception=[248,_cC_,caml_fresh_oo_id(0)],
     LocalSocketSet=_A_([0,compare]),
     RemoteSocketMap=_J_([0,compare]),
     pcl_jsapi_start_comm_layer_jsfun=pcl_jsapi_start_comm_layer,
     pcl_jsapi_bind_address_jsfun=pcl_jsapi_bind_address,
     pcl_jsapi_send_msg_jsfun=pcl_jsapi_send_msg,
     pcl_jsapi_util_rand_str$0=pcl_jsapi_util_rand_str;
    function unsafe_wrap_string_arg_fun(f)
     {function f_safe(js_str){return caml_call1(f,caml_js_to_string(js_str))}
      return caml_js_wrap_callback(f_safe)}
    function resolve_promise(resolver,value)
     {return wakeup_later_general(_ci_,resolver,[0,value])}
    function safe_resolve_promise(resolver,value)
     {try
       {resolve_promise(resolver,value);var _f$_=1;return _f$_}
      catch(_ga_)
       {_ga_ = caml_wrap_exception(_ga_);
        if(_ga_[1] === Invalid_argument)return 0;
        throw _ga_}}
    function safe_reject_promise(resolver,exc)
     {try
       {wakeup_later_exn(resolver,exc);var _f9_=1;return _f9_}
      catch(_f__)
       {_f__ = caml_wrap_exception(_f__);
        if(_f__[1] === Invalid_argument)return 0;
        throw _f__}}
    function make_exn_fail_callback(opt,resolver,reason)
     {if(opt)var sth=opt[1],context=sth;else var context=_cE_;
      var explanation=_a_(context,_a_(_cD_,reason));
      safe_reject_promise(resolver,[0,OMQ_Exception,explanation]);
      return 0}
    function json_stringify(obj){return caml_js_to_string(output(obj))}
    function promise_send_msg(local,remote,msg$0)
     {var match=task(0),resolver=match[2],promise=match[1];
      function ok_callback$0(param){safe_resolve_promise(resolver,0);return 0}
      var _f7_=[0,_a_(_cH_,remote)];
      function fail_callback$0(_f8_)
       {return make_exn_fail_callback(_f7_,resolver,_f8_)}
      var
       from_socket=local.toString(),
       to_socket=remote.toString(),
       msg=msg$0.toString(),
       ok_callback=caml_js_wrap_callback(ok_callback$0),
       fail_callback=unsafe_wrap_string_arg_fun(fail_callback$0);
      pcl_jsapi_send_msg_jsfun
       (from_socket,to_socket,msg,ok_callback,fail_callback);
      return promise}
    var OmqSocketIdMap=_J_([0,compare]);
    function last_op_from_sckt_state(param)
     {switch(param[0])
       {case 0:var lop=param[1];return lop;
        case 1:var lop$0=param[1];return lop$0;
        default:var lop$1=param[1];return lop$1}}
    function ensure_not_blocked_and_open(sckt)
     {if(sckt[2])
       switch(sckt[3][0])
        {case 0:return 0;
         case 1:throw [0,OMQ_Exception,_cI_];
         default:throw [0,OMQ_Exception,_cJ_]}
      throw [0,OMQ_Exception,_cK_]}
    function make_with_timeout_blocking_promise
     (sckt,
      no_timeout_promise,
      timeout_ms,
      blocked_state,
      unblocked_state,
      timeout_during)
     {sckt[3] = blocked_state;
      var
       on_timeout_exc=[0,OMQ_Exception,_a_(_cL_,timeout_during)],
       d$0=timeout_ms / 1e3,
       some_promise=
        bind(no_timeout_promise,function(res){return return$0([0,res])});
      function _fU_(param){return return_none}
      var match=task(0),w=match[2],t=match[1],d=d$0 * 1e3;
      function callback(_f6_){return wakeup(w,_f6_)}
      var id=[0,0];
      function loop(step,param)
       {if(2147483e3 < step)
         var step$0=overflow_limit,remain=step - 2147483e3;
        else
         var step$0=step,remain=0;
        var cb=remain == 0?callback:function(_f5_){return loop(remain,_f5_)};
        id[1] = [0,window.setTimeout(caml_js_wrap_callback(cb),step$0)];
        return 0}
      loop(d,0);
      function f(param)
       {var _f4_=id[1];
        if(_f4_){var x=_f4_[1];id[1] = 0;return window.clearTimeout(x)}
        return 0}
      var p=underlying(t),_fS_=p[1];
      switch(_fS_[0])
       {case 1:
         if(_fS_[1] === Canceled)
          {var
            _fT_=
             function(param)
              {return [0,
                       0,
                       function(param)
                        {return handle_with_async_exception_hook(f,0)},
                       _cu_]};
           run_callback_or_defer_it
            (_cv_,
             function(param){return handle_with_async_exception_hook(f,0)},
             _fT_)}
         break;
        case 2:
         var
          callbacks=_fS_[1],
          node=[1,current_storage[1],f],
          node$0=typeof callbacks[2] === "number"?node:[0,node,callbacks[2]];
         callbacks[2] = node$0;
         break
        }
      var timeout=bind(t,_fU_);
      function _fV_(exn){return fail(exn)}
      function _fW_(param)
       {if(param){var res=param[1];return return$0(res)}
        sckt[3] = unblocked_state;
        return fail(on_timeout_exc)}
      return try_bind
              (function(param)
                {var ps=[0,some_promise,[0,timeout,0]],accu=0,l=ps;
                 for(;;)
                  {if(l)
                    {var l$0=l[2],a=l[1];
                     switch(underlying(a)[1][0])
                      {case 1:var accu$0=accu + 1 | 0;break;
                       case 2:var accu$0=accu;break;
                       default:var accu$0=accu + 1 | 0}
                     var accu=accu$0,l=l$0;
                     continue}
                   if(0 === accu)
                    {var
                      match=new_pending([1,ps]),
                      cell=[],
                      self_removing_callback_wrapper=
                       function _f3_(_f2_){return _f3_.fun(_f2_)};
                     caml_update_dummy
                      (cell,[0,[0,self_removing_callback_wrapper]]);
                     caml_update_dummy
                      (self_removing_callback_wrapper,
                       function(result)
                        {cell[1] = 0;
                         iter
                          (function(p)
                            {var _f0_=underlying(p)[1];
                             switch(_f0_[0])
                              {case 1:return 0;
                               case 2:
                                var callbacks=_f0_[1],_f1_=callbacks[1];
                                if(typeof _f1_ !== "number" && 2 === _f1_[0])
                                 {callbacks[1] = 0;return 0}
                                var cleanups_deferred=callbacks[4] + 1 | 0;
                                return 42 < cleanups_deferred
                                        ?(callbacks[4]
                                          =
                                          0,
                                          callbacks[1]
                                          =
                                          clean_up_callback_cells(callbacks[1]),
                                          0)
                                        :(callbacks[4] = cleanups_deferred,0);
                               default:return 0}},
                           ps);
                         var p=underlying(match);
                         resolve(_cx_,0,p,result);
                         return 0});
                     var node=[2,cell];
                     iter
                      (function(p)
                        {var _fZ_=underlying(p)[1];
                         switch(_fZ_[0])
                          {case 1:throw [0,Assert_failure,_b$_];
                           case 2:
                            var callbacks=_fZ_[1];
                            return add_regular_callback_list_node(callbacks,node);
                           default:throw [0,Assert_failure,_b__]}},
                       ps);
                     return match}
                   if(1 === accu)return nth_resolved(ps,0);
                   var
                    _fX_=caml_obj_tag(prng$0),
                    _fY_=
                     250 === _fX_
                      ?prng$0[1]
                      :246 === _fX_?force_lazy_block(prng$0):prng$0;
                   return nth_resolved(ps,int$0(_fY_,accu))}},
               _fW_,
               _fV_)}
    function round_robin_send_msg(opt,sckt,msg)
     {if(opt)var sth=opt[1],block=sth;else var block=1;
      var cncts=sckt[6],match=caml_call1(RemoteSocketMap[2],cncts);
      if(0 === match)
       {var
         rand_ind=[0,int$1(caml_call1(RemoteSocketMap[18],cncts))],
         remote=[0,caml_call1(RemoteSocketMap[24],cncts)[1]],
         local=[0,caml_call2(RemoteSocketMap[27],remote[1],cncts)],
         _fR_=
          function(r,l)
           {if(0 === rand_ind[1]){remote[1] = r;local[1] = l}
            rand_ind[1] = rand_ind[1] - 1 | 0;
            return 0};
        caml_call2(RemoteSocketMap[12],_fR_,cncts);
        sckt[3] = [0,[0,local[1],remote[1]]];
        return promise_send_msg(local[1],remote[1],msg)}
      if(block)
       {var
         match$0=task(0),
         resolver=match$0[2],
         no_timeout_promise=match$0[1],
         blocked_state=[1,last_op_from_sckt_state(sckt[3]),[0,msg,resolver]],
         unblocked_state=[0,last_op_from_sckt_state(sckt[3])],
         timeout_ms=sckt[8];
        return make_with_timeout_blocking_promise
                (sckt,
                 no_timeout_promise,
                 timeout_ms,
                 blocked_state,
                 unblocked_state,
                 timeout_during)}
      return fail([0,OMQ_Exception,_cU_])}
    function get_identity(sckt)
     {ensure_not_blocked_and_open(sckt);return sckt[4]}
    function internal_close(sckt)
     {if(sckt[2]){sckt[2] = 0;return 0}throw [0,OMQ_Exception,_cZ_]}
    var exists_singleton_context=[0,0];
    function ensure_is_open(ctx)
     {var _fQ_=1 - ctx[5];if(_fQ_)throw [0,OMQ_Exception,_c0_];return _fQ_}
    var Unix_error=[248,_c4_,caml_fresh_oo_id(0)];
    register_exception(_c7_,[0,Unix_error,0,_c6_,_c5_]);
    register_printer
     (function(param)
       {if(param[1] === Unix_error)
         {var s=param[4],s$0=param[3],e=param[2];
          if(typeof e === "number")
           {var _fP_=e;
            if(34 <= _fP_)
             switch(_fP_)
              {case 34:var msg=_dF_;break;
               case 35:var msg=_dG_;break;
               case 36:var msg=_dH_;break;
               case 37:var msg=_dI_;break;
               case 38:var msg=_dJ_;break;
               case 39:var msg=_dK_;break;
               case 40:var msg=_dL_;break;
               case 41:var msg=_dM_;break;
               case 42:var msg=_dN_;break;
               case 43:var msg=_dO_;break;
               case 44:var msg=_dP_;break;
               case 45:var msg=_dQ_;break;
               case 46:var msg=_dR_;break;
               case 47:var msg=_dS_;break;
               case 48:var msg=_dT_;break;
               case 49:var msg=_dU_;break;
               case 50:var msg=_dV_;break;
               case 51:var msg=_dW_;break;
               case 52:var msg=_dX_;break;
               case 53:var msg=_dY_;break;
               case 54:var msg=_dZ_;break;
               case 55:var msg=_d0_;break;
               case 56:var msg=_d1_;break;
               case 57:var msg=_d2_;break;
               case 58:var msg=_d3_;break;
               case 59:var msg=_d4_;break;
               case 60:var msg=_d5_;break;
               case 61:var msg=_d6_;break;
               case 62:var msg=_d7_;break;
               case 63:var msg=_d8_;break;
               case 64:var msg=_d9_;break;
               case 65:var msg=_d__;break;
               case 66:var msg=_d$_;break;
               default:var msg=_ea_}
            else
             switch(_fP_)
              {case 0:var msg=_c8_;break;
               case 1:var msg=_c__;break;
               case 2:var msg=_c$_;break;
               case 3:var msg=_da_;break;
               case 4:var msg=_db_;break;
               case 5:var msg=_dc_;break;
               case 6:var msg=_dd_;break;
               case 7:var msg=_de_;break;
               case 8:var msg=_df_;break;
               case 9:var msg=_dg_;break;
               case 10:var msg=_dh_;break;
               case 11:var msg=_di_;break;
               case 12:var msg=_dj_;break;
               case 13:var msg=_dk_;break;
               case 14:var msg=_dl_;break;
               case 15:var msg=_dm_;break;
               case 16:var msg=_dn_;break;
               case 17:var msg=_do_;break;
               case 18:var msg=_dp_;break;
               case 19:var msg=_dq_;break;
               case 20:var msg=_dr_;break;
               case 21:var msg=_ds_;break;
               case 22:var msg=_dt_;break;
               case 23:var msg=_du_;break;
               case 24:var msg=_dv_;break;
               case 25:var msg=_dw_;break;
               case 26:var msg=_dx_;break;
               case 27:var msg=_dy_;break;
               case 28:var msg=_dz_;break;
               case 29:var msg=_dA_;break;
               case 30:var msg=_dB_;break;
               case 31:var msg=_dC_;break;
               case 32:var msg=_dD_;break;
               default:var msg=_dE_}}
          else
           var x=e[1],msg=caml_call1(sprintf(_eb_),x);
          return [0,caml_call3(sprintf(_c9_),msg,s$0,s)]}
        return 0});
    unix_inet_addr_of_string(_ec_);
    unix_inet_addr_of_string(_ed_);
    try
     {unix_inet_addr_of_string(_eH_)}
    catch(_fO_)
     {_fO_ = caml_wrap_exception(_fO_);if(_fO_[1] !== Failure)throw _fO_}
    try
     {unix_inet_addr_of_string(_eG_)}
    catch(_fN_)
     {_fN_ = caml_wrap_exception(_fN_);if(_fN_[1] !== Failure)throw _fN_}
    create$0(0,7);
    function level_to_int(param)
     {switch(param)
       {case 0:return 0;
        case 1:return 1;
        case 2:return 2;
        case 3:return 3;
        default:return 4}}
    var level=[0,1],output$0=[0,stderr];
    function set_level(x){level[1] = x;return 0}
    function set_output(x){output$0[1] = x;return 0}
    function shall_paint(c,s)
     {var _fL_=_a_(s,_ek_);
      switch(c)
       {case 0:var _fM_=_ee_;break;
        case 1:var _fM_=_ef_;break;
        case 2:var _fM_=_eg_;break;
        case 3:var _fM_=_eh_;break;
        case 4:var _fM_=_ei_;break;
        default:var _fM_=_ej_}
      return _a_(_fM_,_fL_)}
    function log(lvl,fmt$0)
     {var _fy_=level_to_int(level[1]),match=_fy_ <= level_to_int(lvl)?1:0;
      if(0 === match)
       {var _fI_=output$0[1],k=function(_fK_){return 0},fmt=fmt$0[1];
        return make_iprintf(k,_fI_,fmt)}
      var ts=unix_gettimeofday(0),tm=unix_localtime(ts);
      switch(lvl)
       {case 0:var _fz_=shall_paint(5,_el_);break;
        case 1:var _fz_=shall_paint(1,_em_);break;
        case 2:var _fz_=shall_paint(2,_en_);break;
        case 3:var _fz_=shall_paint(0,_eo_);break;
        default:var _fz_=shall_paint(4,_ep_)}
      var
       _fA_=1e3 * caml_modf_float(ts)[1] | 0,
       _fB_=tm[1],
       _fC_=tm[2],
       _fD_=tm[3],
       _fE_=tm[4],
       _fF_=tm[5] + 1 | 0,
       _fG_=tm[6] + 1900 | 0,
       _fH_=caml_call8(sprintf(_eq_),_fG_,_fF_,_fE_,_fD_,_fC_,_fB_,_fA_,_fz_),
       _fJ_=_f_(_es_,_f_(fmt$0,_er_));
      return caml_call1(fprintf(output$0[1],_fJ_),_fH_)}
    function info(fmt){return log(1,fmt)}
    function debug(fmt){return log(0,fmt)}
    function error(fmt){return log(3,fmt)}
    set_level(0);
    set_output(stdout);
    debug(_et_);
    var
     include=_J_([0,compare]),
     empty=include[1],
     mem=include[3],
     add$0=include[4],
     fold=include[13],
     find=include[27];
    self_init(0);
    function send(opt$0,sckt,msg_typ,par)
     {if(opt$0)var sth=opt$0[1],bar=sth;else var bar=0;
      function _fu_(exn)
       {ensure_not_blocked_and_open(sckt);
        var _fx_=sckt[10];
        caml_call2(error(_eu_),bar,_fx_);
        return return$0(0)}
      function _fv_(param)
       {var m=[0,bar,msg_typ,par],msg$0=json_stringify(m);
        if(opt)var sth=opt[1],block=sth;else var block=1;
        ensure_not_blocked_and_open(sckt);
        var msg=caml_js_to_string(output([0,sckt[4],[0,msg$0]])),_fw_=sckt[1];
        if(4093246 === _fw_)
         {var match=last_op_from_sckt_state(sckt[3]);
          if(typeof match !== "number" && 0 === match[0])
           return fail([0,OMQ_Exception,_cV_]);
          return round_robin_send_msg([0,block],sckt,msg)}
        if(370890265 <= _fw_)return round_robin_send_msg([0,block],sckt,msg);
        var match$0=last_op_from_sckt_state(sckt[3]);
        if(typeof match$0 === "number")
         return fail([0,OMQ_Exception,_cW_]);
        else
         {if(0 === match$0[0])return fail([0,OMQ_Exception,_cX_]);
          var
           local=match$0[2],
           remote=match$0[1],
           match$1=caml_call2(RemoteSocketMap[3],remote,sckt[6]);
          return 0 === match$1
                  ?return$0(0)
                  :(sckt[3]
                    =
                    [0,[0,local,remote]],
                    promise_send_msg(local,remote,msg))}}
      return backtrace_catch
              (function(exn)
                {try
                  {throw exn}
                 catch(exn){exn = caml_wrap_exception(exn);return exn}},
               _fv_,
               _fu_)}
    var services=[0,empty];
    function mem$0(id){return caml_call2(mem,id,services[1])}
    function add$1(id,master)
     {var s=[0,id,master,[0]];
      services[1] = caml_call3(add$0,id,s,services[1]);
      return 0}
    var workers=[0,empty];
    function add$2(id,addr)
     {var _ft_=workers[1];
      workers[1] = caml_call3(add$0,id,[0,id,addr,unix_time(0)],_ft_);
      return 0}
    function run(id,addr)
     {caml_call1(info(_eD_),signalling_server_url);
      if(exists_singleton_context[1])
       {caml_call1(printf(_c1_),err_msg);throw [0,OMQ_Exception,err_msg]}
      exists_singleton_context[1] = 1;
      var match=task(0),resolver=match[2],promise=match[1];
      function ok_callback$0(unique_id)
       {safe_resolve_promise(resolver,unique_id);return 0}
      var _eO_=[0,_a_(_cF_,signalling_server_url)];
      function fail_callback$0(_fs_)
       {return make_exn_fail_callback(_eO_,resolver,_fs_)}
      var
       server_url=signalling_server_url.toString(),
       ok_callback=unsafe_wrap_string_arg_fun(ok_callback$0),
       fail_callback=unsafe_wrap_string_arg_fun(fail_callback$0);
      pcl_jsapi_start_comm_layer_jsfun(server_url,ok_callback,fail_callback);
      function _eP_(my_id){return return$0([0,my_id,[0,0,0,0,0,1]])}
      var
       ppx_lwt_0=
        backtrace_bind
         (function(exn)
           {try
             {throw exn}
            catch(exn){exn = caml_wrap_exception(exn);return exn}},
          promise,
          _eP_);
      function _eQ_(param)
       {var ztx=param[2],unique_id=param[1];
        caml_call1(info(_eE_),unique_id);
        var
         _eU_=create(0),
         _eV_=OmqSocketIdMap[1],
         _eW_=RemoteSocketMap[1],
         _eX_=LocalSocketSet[1],
         res=pcl_jsapi_util_rand_str$0(20),
         rep=
          [0,
           4093245,
           1,
           _cY_,
           caml_js_to_string(res),
           _eX_,
           _eW_,
           _eV_,
           max_int,
           max_int,
           1e4,
           1e4,
           _eU_];
        ensure_is_open(ztx);
        ztx[1] = [0,rep,ztx[1]];
        caml_call1(info(_eF_),addr);
        function _eY_(param)
         {function _e7_(param$0)
           {ensure_is_open(ztx);
            var accu=0,param=ztx[1];
            for(;;)
             {if(param)
               {var l=param[2],x=param[1],_fk_=get_identity(x);
                if(caml_string_notequal(get_identity(rep),_fk_))
                 {var accu$0=[0,x,accu],accu=accu$0,param=l;continue}
                var param=l;
                continue}
              ztx[1] = rev_append(accu,0);
              internal_close(rep);
              ensure_is_open(ztx);
              var
               _fl_=ztx[1],
               _fm_=ztx[4],
               _fn_=ztx[3],
               switch$0=ztx[2]?0:_fl_?0:_fm_?0:_fn_?0:(print_string(_c3_),1);
              if(! switch$0)
               {print_string(_c2_);
                var _fo_=function(sckt){return internal_close(sckt)};
                iter(_fo_,ztx[2]);
                var _fp_=function(sckt){return internal_close(sckt)};
                iter(_fp_,ztx[2]);
                var _fq_=function(sckt){return internal_close(sckt)};
                iter(_fq_,ztx[3]);
                var _fr_=function(sckt){return internal_close(sckt)};
                iter(_fr_,ztx[4])}
              ztx[5] = 0;
              return return$0(0)}}
          function ppx_lwt_loop(param)
           {ensure_not_blocked_and_open(rep);
            if(is_empty(rep[12]))
             var
              match=task(0),
              resolver=match[2],
              no_timeout_promise=match[1],
              blocked_state=[2,last_op_from_sckt_state(rep[3]),resolver],
              unblocked_state=[0,last_op_from_sckt_state(rep[3])],
              timeout_ms=rep[9],
              ppx_lwt_0=
               make_with_timeout_blocking_promise
                (rep,
                 no_timeout_promise,
                 timeout_ms,
                 blocked_state,
                 unblocked_state,
                 timeout_during$0);
            else
             {var
               match$0=take(rep[12]),
               msg=match$0[4],
               id=match$0[3],
               local=match$0[2],
               remote=match$0[1];
              rep[3] = [0,[1,remote,local]];
              rep[7]
              =
              caml_call3(OmqSocketIdMap[4],id,[0,local,remote],rep[7]);
              var ppx_lwt_0=return$0([0,id,msg])}
            function _e9_(param){var msg=param[2];return return$0(msg)}
            var
             ppx_lwt_0$0=
              backtrace_bind
               (function(exn)
                 {try
                   {throw exn}
                  catch(exn){exn = caml_wrap_exception(exn);return exn}},
                ppx_lwt_0,
                _e9_);
            function _e__(m_pack)
             {var m=unsafe_input(m_pack[1].toString()),_fg_=m[2];
              if(31 === _fg_)
               {var
                 id=caml_check_bound(m[3],1)[2],
                 wid=caml_check_bound(m[3],0)[1];
                caml_call2(info(_ew_),wid,id);
                if(0 === mem$0(id))add$1(id,_ex_);
                var
                 s=caml_call2(find,id,services[1]),
                 match=10 < s[3].length - 1?1:0;
                if(0 === match)
                 var peers=s[3];
                else
                 {var _fd_=s[3];
                  if(! (10 <= _fd_.length - 1))throw [0,Assert_failure,_ev_];
                  var l=_fd_.length - 1,shuff_x=copy(_fd_),_fb_=l - 1 | 0;
                  if(! (_fb_ < 1))
                   {var i$0=_fb_;
                    for(;;)
                     {var
                       j=int$1(i$0 + 1 | 0),
                       t=caml_check_bound(shuff_x,j)[j + 1];
                      shuff_x[j + 1] = caml_check_bound(shuff_x,i$0)[i$0 + 1];
                      shuff_x[i$0 + 1] = t;
                      var _fc_=i$0 - 1 | 0;
                      if(1 !== i$0){var i$0=_fc_;continue}
                      break}}
                  var
                   f=function(i){return caml_check_bound(shuff_x,i)[i + 1]},
                   res=caml_make_vect(10,f(0)),
                   i=1;
                  for(;;)
                   {res[i + 1] = f(i);
                    var _e$_=i + 1 | 0;
                    if(9 !== i){var i=_e$_;continue}
                    var peers=res;
                    break}}
                var
                 peers$0=json_stringify(peers),
                 service=caml_call2(find,id,services[1]),
                 a2=[0,wid],
                 _fa_=service[3],
                 l1=_fa_.length - 1,
                 workers$0=
                  0 === l1
                   ?copy(a2)
                   :0 === a2.length - 1
                     ?caml_array_sub(_fa_,0,l1)
                     :caml_array_append(_fa_,a2);
                service[3] = workers$0;
                return send(0,rep,0,[0,peers$0])}
              if(! (5 <= _fg_))
               switch(_fg_)
                {case 2:
                  var _fh_=_a_(_ez_,caml_check_bound(m[3],0)[1]);
                  caml_call1(info(_eA_),_fh_);
                  var _fi_=caml_check_bound(m[3],1)[2];
                  add$2(caml_check_bound(m[3],0)[1],_fi_);
                  return send(0,rep,0,[0]);
                 case 3:
                  var
                   addr=caml_check_bound(m[3],1)[2],
                   id$0=caml_check_bound(m[3],0)[1];
                  if(0 === caml_call2(mem,id$0,workers[1]))
                   {var _fj_=_a_(id$0,_a_(_eB_,addr));
                    caml_call1(info(_eC_),_fj_)}
                  add$2(id$0,addr);
                  return send(0,rep,0,[0]);
                 case 4:
                  var
                   id$1=caml_check_bound(m[3],1)[2],
                   master=caml_check_bound(m[3],0)[1];
                  if(0 === mem$0(id$1))
                   {add$1(id$1,master);
                    var
                     _fe_=0,
                     _ff_=workers[1],
                     addrs=
                      json_stringify
                       (caml_call3
                         (fold,
                          function(k,v,l){return append(l,[0,v[2],0])},
                          _ff_,
                          _fe_));
                    return send(0,rep,5,[0,addrs])}
                  var master$0=caml_call2(find,id$1,services[1])[2];
                  return send(0,rep,6,[0,master$0])
                 }
              return return$0(error(_ey_))}
            return bind
                    (backtrace_bind
                      (function(exn)
                        {try
                          {throw exn}
                         catch(exn){exn = caml_wrap_exception(exn);return exn}},
                       ppx_lwt_0$0,
                       _e__),
                     ppx_lwt_loop)}
          var _e8_=ppx_lwt_loop(0);
          return backtrace_bind
                  (function(exn)
                    {try
                      {throw exn}
                     catch(exn){exn = caml_wrap_exception(exn);return exn}},
                   _e8_,
                   _e7_)}
        ensure_not_blocked_and_open(rep);
        var match=task(0),resolver=match[2],promise=match[1];
        function ok_callback$0(param)
         {safe_resolve_promise(resolver,0);return 0}
        var _eR_=[0,_a_(_cG_,addr)];
        function fail_callback$0(_e6_)
         {return make_exn_fail_callback(_eR_,resolver,_e6_)}
        var address=addr.toString();
        function f_safe$0(js_str1,js_str2,js_str3)
         {var
           msg=caml_js_to_string(js_str3),
           local=caml_js_to_string(js_str2),
           remote=caml_js_to_string(js_str1);
          if(1 - caml_call2(LocalSocketSet[3],local,rep[5]))
           print_string(_cM_);
          var
           _e4_=unsafe_input(msg.toString()),
           match=_e4_[2],
           str_msg=match[1],
           from_omq_id=_e4_[1],
           msg$0=[0,str_msg],
           _e5_=rep[3];
          if(2 === _e5_[0])
           {var resolver=_e5_[2];
            rep[7]
            =
            caml_call3(OmqSocketIdMap[4],from_omq_id,[0,local,remote],rep[7]);
            rep[3] = [0,[1,remote,local]];
            return resolve_promise(resolver,[0,from_omq_id,msg$0])}
          var match$0=rep[12][1] < rep[11]?1:0;
          return 0 === match$0
                  ?print_string(_cN_)
                  :add([0,remote,local,from_omq_id,msg$0],rep[12])}
        var on_msg_callback=caml_js_wrap_callback(f_safe$0);
        function f_safe(js_str1,js_str2,js_bool)
         {var
           connected=js_bool | 0,
           remote=caml_js_to_string(js_str2),
           local=caml_js_to_string(js_str1);
          if(0 === connected)
           {print_string(_cO_);
            return caml_call2(RemoteSocketMap[3],remote,rep[6])
                    ?(rep[6] = caml_call2(RemoteSocketMap[7],remote,rep[6]),0)
                    :print_string(_cP_)}
          caml_call1(printf(_cQ_),remote);
          if(1 - caml_call2(LocalSocketSet[3],local,rep[5]))
           print_string(_cR_);
          rep[6] = caml_call3(RemoteSocketMap[4],remote,local,rep[6]);
          var _e2_=rep[3];
          if(1 === _e2_[0])
           {var
             match=_e2_[2],
             resolver=match[2],
             msg=match[1],
             ppx_lwt_0=promise_send_msg(local,remote,msg),
             _e3_=
              function(param)
               {rep[3] = [0,[0,local,remote]];
                resolve_promise(resolver,0);
                return return_unit},
             p=
              backtrace_bind
               (function(exn)
                 {try
                   {throw exn}
                  catch(exn){exn = caml_wrap_exception(exn);return exn}},
                ppx_lwt_0,
                _e3_),
             _e1_=underlying(p)[1];
            switch(_e1_[0])
             {case 1:var exn=_e1_[1];throw exn;
              case 2:
               var
                p_callbacks=_e1_[1],
                callback=
                 function(result)
                  {if(1 === result[0])
                    {var exn=result[1];
                     return caml_call1(async_exception_hook[1],exn)}
                   return 0};
               return add_implicitly_removed_callback(p_callbacks,callback);
              default:return 0}}
          return 0}
        var
         on_connection_callback=caml_js_wrap_callback(f_safe),
         ok_callback=caml_js_wrap_callback(ok_callback$0),
         fail_callback=unsafe_wrap_string_arg_fun(fail_callback$0);
        pcl_jsapi_bind_address_jsfun
         (address,
          on_msg_callback,
          on_connection_callback,
          ok_callback,
          fail_callback);
        function _eS_(param)
         {if(caml_call2(LocalSocketSet[3],addr,rep[5]))
           var _e0_=caml_call1(printf(_cS_),addr);
          else
           {rep[5] = caml_call2(LocalSocketSet[4],addr,rep[5]);
            var _eZ_=rep[4],_e0_=caml_call2(printf(_cT_),addr,_eZ_)}
          return return$0(_e0_)}
        var
         _eT_=
          backtrace_bind
           (function(exn)
             {try
               {throw exn}
              catch(exn){exn = caml_wrap_exception(exn);return exn}},
            promise,
            _eS_);
        return backtrace_bind
                (function(exn)
                  {try
                    {throw exn}
                   catch(exn){exn = caml_wrap_exception(exn);return exn}},
                 _eT_,
                 _eY_)}
      return backtrace_bind
              (function(exn)
                {try
                  {throw exn}
                 catch(exn){exn = caml_wrap_exception(exn);return exn}},
               ppx_lwt_0,
               _eQ_)}
    run(myid,addr);
    do_at_exit(0);
    return}
  (function(){return this}()));
